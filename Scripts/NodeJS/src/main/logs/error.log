{
  message: <ref *5> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 213,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: qpCheck],
                        name: 'qpCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/getProfileIds',
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: getProfileId],
                              name: 'getProfileId',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 157
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: qpCheck],
                        name: 'qpCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/getProfileIds',
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: getProfileId],
                              name: 'getProfileId',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 157
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            sync: false,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: false,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: clearRequestTimeout]
          },
          _eventsCount: 1,
          _maxListeners: undefined,
          socket: [Circular *1],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          headers: {
            'content-type': 'application/json',
            authorization: 'Bearer TkhOU1JYTlBia3g1',
            'user-agent': 'PostmanRuntime/7.32.3',
            accept: '*/*',
            'cache-control': 'no-cache',
            'postman-token': 'd0db4cc8-448f-4e35-9447-c2be16634174',
            host: 'localhost:8004',
            'accept-encoding': 'gzip, deflate, br',
            connection: 'keep-alive',
            'content-length': '232',
            'correlation-id': '101a69d0-2572-11ee-ad52-994b84cdb6e4'
          },
          rawHeaders: [
            'Content-Type',
            'application/json',
            'Authorization',
            'Bearer TkhOU1JYTlBia3g1',
            'User-Agent',
            'PostmanRuntime/7.32.3',
            'Accept',
            '*/*',
            'Cache-Control',
            'no-cache',
            'Postman-Token',
            'd0db4cc8-448f-4e35-9447-c2be16634174',
            'Host',
            'localhost:8004',
            'Accept-Encoding',
            'gzip, deflate, br',
            'Connection',
            'keep-alive',
            'Content-Length',
            '232'
          ],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '/getProfileIds',
          method: 'POST',
          statusCode: null,
          statusMessage: null,
          client: [Circular *1],
          _consuming: true,
          _dumped: false,
          next: [Function: next],
          baseUrl: '/data/api-management/apis/v1',
          originalUrl: '/data/api-management/apis/v1/getProfileIds',
          _parsedUrl: Url {
            protocol: null,
            slashes: null,
            auth: null,
            host: null,
            port: null,
            hostname: null,
            hash: null,
            search: null,
            query: null,
            pathname: '/getProfileIds',
            path: '/getProfileIds',
            href: '/getProfileIds',
            _raw: '/getProfileIds'
          },
          params: {},
          query: {},
          res: [Circular *5],
          body: {
            salesforceOrgApiUrl: 'https://cmentor--tammisb.sandbox.my.salesforce.com',
            accessToken: 'Bearer 00DDw000005FClx!AREAQN1QuTvRQv26QE39qwFlMNuRqs7AIuaaCov7hpkdh4PI00idFi_s4vINoa56qWYlLNtlUTS7Uxmq73V5JzXmfJmSkGrZ'
          },
          _body: true,
          length: undefined,
          getId: [Function (anonymous)],
          [Symbol(kCapture)]: false,
          [Symbol(RequestTimeout)]: undefined
        },
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *5],
      [Symbol(async_id_symbol)]: 167,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'HTTP/1.1 400 Bad Request\r\n' +
      'X-Powered-By: Express\r\n' +
      'correlation-id: 101a69d0-2572-11ee-ad52-994b84cdb6e4\r\n' +
      'Content-Type: application/json; charset=utf-8\r\n' +
      'Content-Length: 213\r\n' +
      'ETag: W/"d5-ExX0eEmt0so2gI/khu3IIhHMEvE"\r\n' +
      'Date: Tue, 18 Jul 2023 13:50:32 GMT\r\n' +
      'Connection: keep-alive\r\n' +
      'Keep-Alive: timeout=5\r\n' +
      '\r\n',
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: <ref *6> IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
      _eventsCount: 1,
      _maxListeners: undefined,
      socket: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: qpCheck],
                          name: 'qpCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/getProfileIds',
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getProfileId],
                                name: 'getProfileId',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 157
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: qpCheck],
                          name: 'qpCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/getProfileIds',
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getProfileId],
                                name: 'getProfileId',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 157
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 167,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: {
        'content-type': 'application/json',
        authorization: 'Bearer TkhOU1JYTlBia3g1',
        'user-agent': 'PostmanRuntime/7.32.3',
        accept: '*/*',
        'cache-control': 'no-cache',
        'postman-token': 'd0db4cc8-448f-4e35-9447-c2be16634174',
        host: 'localhost:8004',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive',
        'content-length': '232',
        'correlation-id': '101a69d0-2572-11ee-ad52-994b84cdb6e4'
      },
      rawHeaders: [
        'Content-Type',
        'application/json',
        'Authorization',
        'Bearer TkhOU1JYTlBia3g1',
        'User-Agent',
        'PostmanRuntime/7.32.3',
        'Accept',
        '*/*',
        'Cache-Control',
        'no-cache',
        'Postman-Token',
        'd0db4cc8-448f-4e35-9447-c2be16634174',
        'Host',
        'localhost:8004',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive',
        'Content-Length',
        '232'
      ],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/getProfileIds',
      method: 'POST',
      statusCode: null,
      statusMessage: null,
      client: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: qpCheck],
                          name: 'qpCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/getProfileIds',
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getProfileId],
                                name: 'getProfileId',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 157
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: qpCheck],
                          name: 'qpCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/getProfileIds',
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getProfileId],
                                name: 'getProfileId',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 157
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 167,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/data/api-management/apis/v1',
      originalUrl: '/data/api-management/apis/v1/getProfileIds',
      _parsedUrl: Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: null,
        query: null,
        pathname: '/getProfileIds',
        path: '/getProfileIds',
        href: '/getProfileIds',
        _raw: '/getProfileIds'
      },
      params: {},
      query: {},
      res: [Circular *5],
      body: {
        salesforceOrgApiUrl: 'https://cmentor--tammisb.sandbox.my.salesforce.com',
        accessToken: 'Bearer 00DDw000005FClx!AREAQN1QuTvRQv26QE39qwFlMNuRqs7AIuaaCov7hpkdh4PI00idFi_s4vINoa56qWYlLNtlUTS7Uxmq73V5JzXmfJmSkGrZ'
      },
      _body: true,
      length: undefined,
      getId: [Function (anonymous)],
      [Symbol(kCapture)]: false,
      [Symbol(RequestTimeout)]: undefined
    },
    locals: [Object: null prototype] {},
    statusCode: 400,
    statusMessage: 'Bad Request',
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [ 'X-Powered-By', 'Express' ],
      'correlation-id': [ 'correlation-id', '101a69d0-2572-11ee-ad52-994b84cdb6e4' ],
      'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
      'content-length': [ 'Content-Length', '213' ],
      etag: [ 'ETag', 'W/"d5-ExX0eEmt0so2gI/khu3IIhHMEvE"' ]
    }
  },
  level: 'error',
  service: 'some-random-service',
  timestamp: '2023-07-18T13:50:32.178Z',
  label: 'validation'
}
{
  message: <ref *5> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 211,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: qpCheck],
                        name: 'qpCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/createUsers',
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 157
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: qpCheck],
                        name: 'qpCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/createUsers',
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 157
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            sync: false,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: false,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: clearRequestTimeout]
          },
          _eventsCount: 1,
          _maxListeners: undefined,
          socket: [Circular *1],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          headers: {
            'content-type': 'application/json',
            authorization: 'Bearer TkhOU1JYTlBia3g1',
            'user-agent': 'PostmanRuntime/7.32.3',
            accept: '*/*',
            'cache-control': 'no-cache',
            'postman-token': '0d7ae124-654a-4d93-8297-167c04b54380',
            host: 'localhost:8004',
            'accept-encoding': 'gzip, deflate, br',
            connection: 'keep-alive',
            'content-length': '232',
            'correlation-id': '26433d50-257b-11ee-afd4-dd8ecb84b3c0'
          },
          rawHeaders: [
            'Content-Type',
            'application/json',
            'Authorization',
            'Bearer TkhOU1JYTlBia3g1',
            'User-Agent',
            'PostmanRuntime/7.32.3',
            'Accept',
            '*/*',
            'Cache-Control',
            'no-cache',
            'Postman-Token',
            '0d7ae124-654a-4d93-8297-167c04b54380',
            'Host',
            'localhost:8004',
            'Accept-Encoding',
            'gzip, deflate, br',
            'Connection',
            'keep-alive',
            'Content-Length',
            '232'
          ],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '/createUsers?coll=homework&id=homework&version=1.0.0',
          method: 'POST',
          statusCode: null,
          statusMessage: null,
          client: [Circular *1],
          _consuming: true,
          _dumped: false,
          next: [Function: next],
          baseUrl: '/data/api-management/apis/v1',
          originalUrl: '/data/api-management/apis/v1/createUsers?coll=homework&id=homework&version=1.0.0',
          _parsedUrl: Url {
            protocol: null,
            slashes: null,
            auth: null,
            host: null,
            port: null,
            hostname: null,
            hash: null,
            search: '?coll=homework&id=homework&version=1.0.0',
            query: 'coll=homework&id=homework&version=1.0.0',
            pathname: '/createUsers',
            path: '/createUsers?coll=homework&id=homework&version=1.0.0',
            href: '/createUsers?coll=homework&id=homework&version=1.0.0',
            _raw: '/createUsers?coll=homework&id=homework&version=1.0.0'
          },
          params: {},
          query: {
            coll: 'homework',
            id: 'homework',
            version: '1.0.0',
            myEndpoint: 'createUsers'
          },
          res: [Circular *5],
          body: {
            salesforceOrgApiUrl: 'https://cmentor--tammisb.sandbox.my.salesforce.com',
            accessToken: 'Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q'
          },
          _body: true,
          length: undefined,
          getId: [Function (anonymous)],
          route: Route {
            path: '/createUsers',
            stack: [
              Layer {
                handle: [AsyncFunction: createUsers],
                name: 'createUsers',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                method: 'post'
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                method: 'post'
              }
            ],
            methods: { post: true }
          },
          [Symbol(kCapture)]: false,
          [Symbol(RequestTimeout)]: undefined
        },
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *5],
      [Symbol(async_id_symbol)]: 167,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'HTTP/1.1 500 Internal Server Error\r\n' +
      'X-Powered-By: Express\r\n' +
      'correlation-id: 26433d50-257b-11ee-afd4-dd8ecb84b3c0\r\n' +
      'Content-Type: application/json; charset=utf-8\r\n' +
      'Content-Length: 211\r\n' +
      'ETag: W/"d3-qyIegVkb0bb4ZHe6mqV78DF1qRg"\r\n' +
      'Date: Tue, 18 Jul 2023 14:55:52 GMT\r\n' +
      'Connection: keep-alive\r\n' +
      'Keep-Alive: timeout=5\r\n' +
      '\r\n',
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: <ref *6> IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
      _eventsCount: 1,
      _maxListeners: undefined,
      socket: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: qpCheck],
                          name: 'qpCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/createUsers',
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 157
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: qpCheck],
                          name: 'qpCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/createUsers',
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 157
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 167,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: {
        'content-type': 'application/json',
        authorization: 'Bearer TkhOU1JYTlBia3g1',
        'user-agent': 'PostmanRuntime/7.32.3',
        accept: '*/*',
        'cache-control': 'no-cache',
        'postman-token': '0d7ae124-654a-4d93-8297-167c04b54380',
        host: 'localhost:8004',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive',
        'content-length': '232',
        'correlation-id': '26433d50-257b-11ee-afd4-dd8ecb84b3c0'
      },
      rawHeaders: [
        'Content-Type',
        'application/json',
        'Authorization',
        'Bearer TkhOU1JYTlBia3g1',
        'User-Agent',
        'PostmanRuntime/7.32.3',
        'Accept',
        '*/*',
        'Cache-Control',
        'no-cache',
        'Postman-Token',
        '0d7ae124-654a-4d93-8297-167c04b54380',
        'Host',
        'localhost:8004',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive',
        'Content-Length',
        '232'
      ],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/createUsers?coll=homework&id=homework&version=1.0.0',
      method: 'POST',
      statusCode: null,
      statusMessage: null,
      client: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: qpCheck],
                          name: 'qpCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/createUsers',
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 157
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: qpCheck],
                          name: 'qpCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/createUsers',
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 157
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 167,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/data/api-management/apis/v1',
      originalUrl: '/data/api-management/apis/v1/createUsers?coll=homework&id=homework&version=1.0.0',
      _parsedUrl: Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: '?coll=homework&id=homework&version=1.0.0',
        query: 'coll=homework&id=homework&version=1.0.0',
        pathname: '/createUsers',
        path: '/createUsers?coll=homework&id=homework&version=1.0.0',
        href: '/createUsers?coll=homework&id=homework&version=1.0.0',
        _raw: '/createUsers?coll=homework&id=homework&version=1.0.0'
      },
      params: {},
      query: {
        coll: 'homework',
        id: 'homework',
        version: '1.0.0',
        myEndpoint: 'createUsers'
      },
      res: [Circular *5],
      body: {
        salesforceOrgApiUrl: 'https://cmentor--tammisb.sandbox.my.salesforce.com',
        accessToken: 'Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q'
      },
      _body: true,
      length: undefined,
      getId: [Function (anonymous)],
      route: Route {
        path: '/createUsers',
        stack: [
          Layer {
            handle: [AsyncFunction: createUsers],
            name: 'createUsers',
            params: undefined,
            path: undefined,
            keys: [],
            regexp: /^\/?$/i { fast_star: false, fast_slash: false },
            method: 'post'
          },
          Layer {
            handle: [Function (anonymous)],
            name: '<anonymous>',
            params: undefined,
            path: undefined,
            keys: [],
            regexp: /^\/?$/i { fast_star: false, fast_slash: false },
            method: 'post'
          }
        ],
        methods: { post: true }
      },
      [Symbol(kCapture)]: false,
      [Symbol(RequestTimeout)]: undefined
    },
    locals: [Object: null prototype] {},
    statusCode: 500,
    statusMessage: 'Internal Server Error',
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [ 'X-Powered-By', 'Express' ],
      'correlation-id': [ 'correlation-id', '26433d50-257b-11ee-afd4-dd8ecb84b3c0' ],
      'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
      'content-length': [ 'Content-Length', '211' ],
      etag: [ 'ETag', 'W/"d3-qyIegVkb0bb4ZHe6mqV78DF1qRg"' ]
    }
  },
  level: 'error',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:55:52.779Z',
  label: 'validation'
}
{
  message: <ref *5> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 171,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 1,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/health',
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/health',
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: null,
            ended: false,
            endEmitted: false,
            reading: false,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: false,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: null
          },
          _events: [Object: null prototype] {
            end: [Function: clearRequestTimeout]
          },
          _eventsCount: 1,
          _maxListeners: undefined,
          socket: [Circular *1],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: false,
          headers: {
            'content-type': 'application/json',
            'user-agent': 'PostmanRuntime/7.35.0',
            accept: '*/*',
            'cache-control': 'no-cache',
            'postman-token': 'c1470b9d-3a85-4ad5-8280-1c88b133bf49',
            host: 'localhost:8004',
            'accept-encoding': 'gzip, deflate, br',
            connection: 'keep-alive',
            'correlation-id': 'f821a1f0-a504-11ee-a324-6da28ed399b9'
          },
          rawHeaders: [
            'Content-Type',
            'application/json',
            'User-Agent',
            'PostmanRuntime/7.35.0',
            'Accept',
            '*/*',
            'Cache-Control',
            'no-cache',
            'Postman-Token',
            'c1470b9d-3a85-4ad5-8280-1c88b133bf49',
            'Host',
            'localhost:8004',
            'Accept-Encoding',
            'gzip, deflate, br',
            'Connection',
            'keep-alive'
          ],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '/health',
          method: 'GET',
          statusCode: null,
          statusMessage: null,
          client: [Circular *1],
          _consuming: false,
          _dumped: false,
          next: [Function: next],
          baseUrl: '/data/api-management/apis/v1',
          originalUrl: '/data/api-management/apis/v1/health',
          _parsedUrl: Url {
            protocol: null,
            slashes: null,
            auth: null,
            host: null,
            port: null,
            hostname: null,
            hash: null,
            search: null,
            query: null,
            pathname: '/health',
            path: '/health',
            href: '/health',
            _raw: '/health'
          },
          params: {},
          query: {},
          res: [Circular *5],
          body: {},
          getId: [Function (anonymous)],
          [Symbol(kCapture)]: false,
          [Symbol(RequestTimeout)]: undefined
        },
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *5],
      [Symbol(async_id_symbol)]: 158,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'HTTP/1.1 401 Unauthorized\r\n' +
      'X-Powered-By: Express\r\n' +
      'correlation-id: f821a1f0-a504-11ee-a324-6da28ed399b9\r\n' +
      'Content-Type: application/json; charset=utf-8\r\n' +
      'Content-Length: 171\r\n' +
      'ETag: W/"ab-42gwko1gcJ+Xy8P99Q0Eq1BUOec"\r\n' +
      'Date: Wed, 27 Dec 2023 22:12:05 GMT\r\n' +
      'Connection: keep-alive\r\n' +
      'Keep-Alive: timeout=5\r\n' +
      '\r\n',
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: <ref *6> IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: null,
        ended: false,
        endEmitted: false,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: null
      },
      _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
      _eventsCount: 1,
      _maxListeners: undefined,
      socket: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 158,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: false,
      headers: {
        'content-type': 'application/json',
        'user-agent': 'PostmanRuntime/7.35.0',
        accept: '*/*',
        'cache-control': 'no-cache',
        'postman-token': 'c1470b9d-3a85-4ad5-8280-1c88b133bf49',
        host: 'localhost:8004',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive',
        'correlation-id': 'f821a1f0-a504-11ee-a324-6da28ed399b9'
      },
      rawHeaders: [
        'Content-Type',
        'application/json',
        'User-Agent',
        'PostmanRuntime/7.35.0',
        'Accept',
        '*/*',
        'Cache-Control',
        'no-cache',
        'Postman-Token',
        'c1470b9d-3a85-4ad5-8280-1c88b133bf49',
        'Host',
        'localhost:8004',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive'
      ],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/health',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 158,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: false,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/data/api-management/apis/v1',
      originalUrl: '/data/api-management/apis/v1/health',
      _parsedUrl: Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: null,
        query: null,
        pathname: '/health',
        path: '/health',
        href: '/health',
        _raw: '/health'
      },
      params: {},
      query: {},
      res: [Circular *5],
      body: {},
      getId: [Function (anonymous)],
      [Symbol(kCapture)]: false,
      [Symbol(RequestTimeout)]: undefined
    },
    locals: [Object: null prototype] {},
    statusCode: 401,
    statusMessage: 'Unauthorized',
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [ 'X-Powered-By', 'Express' ],
      'correlation-id': [ 'correlation-id', 'f821a1f0-a504-11ee-a324-6da28ed399b9' ],
      'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
      'content-length': [ 'Content-Length', '171' ],
      etag: [ 'ETag', 'W/"ab-42gwko1gcJ+Xy8P99Q0Eq1BUOec"' ]
    }
  },
  level: 'error',
  service: 'some-random-service',
  timestamp: '2023-12-27T22:12:05.653Z',
  label: 'validation'
}
{
  message: <ref *5> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 171,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 1,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/health',
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/health',
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: null,
            ended: false,
            endEmitted: false,
            reading: false,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: false,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: null
          },
          _events: [Object: null prototype] {
            end: [Function: clearRequestTimeout]
          },
          _eventsCount: 1,
          _maxListeners: undefined,
          socket: [Circular *1],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: false,
          headers: {
            'content-type': 'application/json',
            'user-agent': 'PostmanRuntime/7.35.0',
            accept: '*/*',
            'cache-control': 'no-cache',
            'postman-token': 'd75c6915-37f3-4b19-87a9-bfb36af719d8',
            host: 'localhost:8004',
            'accept-encoding': 'gzip, deflate, br',
            connection: 'keep-alive',
            'correlation-id': '2a6892e0-a505-11ee-a74a-79ee331685de'
          },
          rawHeaders: [
            'Content-Type',
            'application/json',
            'User-Agent',
            'PostmanRuntime/7.35.0',
            'Accept',
            '*/*',
            'Cache-Control',
            'no-cache',
            'Postman-Token',
            'd75c6915-37f3-4b19-87a9-bfb36af719d8',
            'Host',
            'localhost:8004',
            'Accept-Encoding',
            'gzip, deflate, br',
            'Connection',
            'keep-alive'
          ],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '/health',
          method: 'GET',
          statusCode: null,
          statusMessage: null,
          client: [Circular *1],
          _consuming: false,
          _dumped: false,
          next: [Function: next],
          baseUrl: '/data/api-management/apis/v1',
          originalUrl: '/data/api-management/apis/v1/health',
          _parsedUrl: Url {
            protocol: null,
            slashes: null,
            auth: null,
            host: null,
            port: null,
            hostname: null,
            hash: null,
            search: null,
            query: null,
            pathname: '/health',
            path: '/health',
            href: '/health',
            _raw: '/health'
          },
          params: {},
          query: {},
          res: [Circular *5],
          body: {},
          getId: [Function (anonymous)],
          [Symbol(kCapture)]: false,
          [Symbol(RequestTimeout)]: undefined
        },
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *5],
      [Symbol(async_id_symbol)]: 158,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'HTTP/1.1 401 Unauthorized\r\n' +
      'X-Powered-By: Express\r\n' +
      'correlation-id: 2a6892e0-a505-11ee-a74a-79ee331685de\r\n' +
      'Content-Type: application/json; charset=utf-8\r\n' +
      'Content-Length: 171\r\n' +
      'ETag: W/"ab-+hpy04fM++kUqs57txzyZirV+LY"\r\n' +
      'Date: Wed, 27 Dec 2023 22:13:30 GMT\r\n' +
      'Connection: keep-alive\r\n' +
      'Keep-Alive: timeout=5\r\n' +
      '\r\n',
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: <ref *6> IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: null,
        ended: false,
        endEmitted: false,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: null
      },
      _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
      _eventsCount: 1,
      _maxListeners: undefined,
      socket: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 158,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: false,
      headers: {
        'content-type': 'application/json',
        'user-agent': 'PostmanRuntime/7.35.0',
        accept: '*/*',
        'cache-control': 'no-cache',
        'postman-token': 'd75c6915-37f3-4b19-87a9-bfb36af719d8',
        host: 'localhost:8004',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive',
        'correlation-id': '2a6892e0-a505-11ee-a74a-79ee331685de'
      },
      rawHeaders: [
        'Content-Type',
        'application/json',
        'User-Agent',
        'PostmanRuntime/7.35.0',
        'Accept',
        '*/*',
        'Cache-Control',
        'no-cache',
        'Postman-Token',
        'd75c6915-37f3-4b19-87a9-bfb36af719d8',
        'Host',
        'localhost:8004',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive'
      ],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/health',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 158,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: false,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/data/api-management/apis/v1',
      originalUrl: '/data/api-management/apis/v1/health',
      _parsedUrl: Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: null,
        query: null,
        pathname: '/health',
        path: '/health',
        href: '/health',
        _raw: '/health'
      },
      params: {},
      query: {},
      res: [Circular *5],
      body: {},
      getId: [Function (anonymous)],
      [Symbol(kCapture)]: false,
      [Symbol(RequestTimeout)]: undefined
    },
    locals: [Object: null prototype] {},
    statusCode: 401,
    statusMessage: 'Unauthorized',
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [ 'X-Powered-By', 'Express' ],
      'correlation-id': [ 'correlation-id', '2a6892e0-a505-11ee-a74a-79ee331685de' ],
      'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
      'content-length': [ 'Content-Length', '171' ],
      etag: [ 'ETag', 'W/"ab-+hpy04fM++kUqs57txzyZirV+LY"' ]
    }
  },
  level: 'error',
  service: 'some-random-service',
  timestamp: '2023-12-27T22:13:30.004Z',
  label: 'validation'
}
{
  message: <ref *5> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 171,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 1,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/health',
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/health',
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: null,
            ended: false,
            endEmitted: false,
            reading: false,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: false,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: null
          },
          _events: [Object: null prototype] {
            end: [Function: clearRequestTimeout]
          },
          _eventsCount: 1,
          _maxListeners: undefined,
          socket: [Circular *1],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: false,
          headers: {
            'content-type': 'application/json',
            'user-agent': 'PostmanRuntime/7.35.0',
            accept: '*/*',
            'cache-control': 'no-cache',
            'postman-token': '0b484dc7-2e6b-42bc-baff-b496d309b509',
            host: 'localhost:8004',
            'accept-encoding': 'gzip, deflate, br',
            connection: 'keep-alive',
            'correlation-id': '379b2cc0-a505-11ee-944b-cd9856103195'
          },
          rawHeaders: [
            'Content-Type',
            'application/json',
            'User-Agent',
            'PostmanRuntime/7.35.0',
            'Accept',
            '*/*',
            'Cache-Control',
            'no-cache',
            'Postman-Token',
            '0b484dc7-2e6b-42bc-baff-b496d309b509',
            'Host',
            'localhost:8004',
            'Accept-Encoding',
            'gzip, deflate, br',
            'Connection',
            'keep-alive'
          ],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '/health',
          method: 'GET',
          statusCode: null,
          statusMessage: null,
          client: [Circular *1],
          _consuming: false,
          _dumped: false,
          next: [Function: next],
          baseUrl: '/data/api-management/apis/v1',
          originalUrl: '/data/api-management/apis/v1/health',
          _parsedUrl: Url {
            protocol: null,
            slashes: null,
            auth: null,
            host: null,
            port: null,
            hostname: null,
            hash: null,
            search: null,
            query: null,
            pathname: '/health',
            path: '/health',
            href: '/health',
            _raw: '/health'
          },
          params: {},
          query: {},
          res: [Circular *5],
          body: {},
          getId: [Function (anonymous)],
          [Symbol(kCapture)]: false,
          [Symbol(RequestTimeout)]: undefined
        },
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *5],
      [Symbol(async_id_symbol)]: 158,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'HTTP/1.1 401 Unauthorized\r\n' +
      'X-Powered-By: Express\r\n' +
      'correlation-id: 379b2cc0-a505-11ee-944b-cd9856103195\r\n' +
      'Content-Type: application/json; charset=utf-8\r\n' +
      'Content-Length: 171\r\n' +
      'ETag: W/"ab-OvvizaspPHnJ3lUV6XyeQgn2t3c"\r\n' +
      'Date: Wed, 27 Dec 2023 22:13:52 GMT\r\n' +
      'Connection: keep-alive\r\n' +
      'Keep-Alive: timeout=5\r\n' +
      '\r\n',
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: <ref *6> IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: null,
        ended: false,
        endEmitted: false,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: null
      },
      _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
      _eventsCount: 1,
      _maxListeners: undefined,
      socket: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 158,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: false,
      headers: {
        'content-type': 'application/json',
        'user-agent': 'PostmanRuntime/7.35.0',
        accept: '*/*',
        'cache-control': 'no-cache',
        'postman-token': '0b484dc7-2e6b-42bc-baff-b496d309b509',
        host: 'localhost:8004',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive',
        'correlation-id': '379b2cc0-a505-11ee-944b-cd9856103195'
      },
      rawHeaders: [
        'Content-Type',
        'application/json',
        'User-Agent',
        'PostmanRuntime/7.35.0',
        'Accept',
        '*/*',
        'Cache-Control',
        'no-cache',
        'Postman-Token',
        '0b484dc7-2e6b-42bc-baff-b496d309b509',
        'Host',
        'localhost:8004',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive'
      ],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/health',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 158,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: false,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/data/api-management/apis/v1',
      originalUrl: '/data/api-management/apis/v1/health',
      _parsedUrl: Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: null,
        query: null,
        pathname: '/health',
        path: '/health',
        href: '/health',
        _raw: '/health'
      },
      params: {},
      query: {},
      res: [Circular *5],
      body: {},
      getId: [Function (anonymous)],
      [Symbol(kCapture)]: false,
      [Symbol(RequestTimeout)]: undefined
    },
    locals: [Object: null prototype] {},
    statusCode: 401,
    statusMessage: 'Unauthorized',
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [ 'X-Powered-By', 'Express' ],
      'correlation-id': [ 'correlation-id', '379b2cc0-a505-11ee-944b-cd9856103195' ],
      'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
      'content-length': [ 'Content-Length', '171' ],
      etag: [ 'ETag', 'W/"ab-OvvizaspPHnJ3lUV6XyeQgn2t3c"' ]
    }
  },
  level: 'error',
  service: 'some-random-service',
  timestamp: '2023-12-27T22:13:52.147Z',
  label: 'validation'
}
{
  message: <ref *5> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 171,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 1,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/health',
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/health',
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: null,
            ended: false,
            endEmitted: false,
            reading: false,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: false,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: null
          },
          _events: [Object: null prototype] {
            end: [Function: clearRequestTimeout]
          },
          _eventsCount: 1,
          _maxListeners: undefined,
          socket: [Circular *1],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: false,
          headers: {
            'content-type': 'application/json',
            'user-agent': 'PostmanRuntime/7.35.0',
            accept: '*/*',
            'cache-control': 'no-cache',
            'postman-token': '97301942-f3a0-4ccb-9236-9bbab845b0f8',
            host: 'localhost:8004',
            'accept-encoding': 'gzip, deflate, br',
            connection: 'keep-alive',
            'correlation-id': '41b08110-a505-11ee-944b-cd9856103195'
          },
          rawHeaders: [
            'Content-Type',
            'application/json',
            'User-Agent',
            'PostmanRuntime/7.35.0',
            'Accept',
            '*/*',
            'Cache-Control',
            'no-cache',
            'Postman-Token',
            '97301942-f3a0-4ccb-9236-9bbab845b0f8',
            'Host',
            'localhost:8004',
            'Accept-Encoding',
            'gzip, deflate, br',
            'Connection',
            'keep-alive'
          ],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '/health',
          method: 'GET',
          statusCode: null,
          statusMessage: null,
          client: [Circular *1],
          _consuming: false,
          _dumped: false,
          next: [Function: next],
          baseUrl: '/data/api-management/apis/v1',
          originalUrl: '/data/api-management/apis/v1/health',
          _parsedUrl: Url {
            protocol: null,
            slashes: null,
            auth: null,
            host: null,
            port: null,
            hostname: null,
            hash: null,
            search: null,
            query: null,
            pathname: '/health',
            path: '/health',
            href: '/health',
            _raw: '/health'
          },
          params: {},
          query: {},
          res: [Circular *5],
          body: {},
          getId: [Function (anonymous)],
          [Symbol(kCapture)]: false,
          [Symbol(RequestTimeout)]: undefined
        },
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *5],
      [Symbol(async_id_symbol)]: 195,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'HTTP/1.1 401 Unauthorized\r\n' +
      'X-Powered-By: Express\r\n' +
      'correlation-id: 41b08110-a505-11ee-944b-cd9856103195\r\n' +
      'Content-Type: application/json; charset=utf-8\r\n' +
      'Content-Length: 171\r\n' +
      'ETag: W/"ab-8W66f+1zReKQhpfnhEafbI/9Y0c"\r\n' +
      'Date: Wed, 27 Dec 2023 22:14:09 GMT\r\n' +
      'Connection: keep-alive\r\n' +
      'Keep-Alive: timeout=5\r\n' +
      '\r\n',
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: <ref *6> IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: null,
        ended: false,
        endEmitted: false,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: null
      },
      _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
      _eventsCount: 1,
      _maxListeners: undefined,
      socket: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 195,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: false,
      headers: {
        'content-type': 'application/json',
        'user-agent': 'PostmanRuntime/7.35.0',
        accept: '*/*',
        'cache-control': 'no-cache',
        'postman-token': '97301942-f3a0-4ccb-9236-9bbab845b0f8',
        host: 'localhost:8004',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive',
        'correlation-id': '41b08110-a505-11ee-944b-cd9856103195'
      },
      rawHeaders: [
        'Content-Type',
        'application/json',
        'User-Agent',
        'PostmanRuntime/7.35.0',
        'Accept',
        '*/*',
        'Cache-Control',
        'no-cache',
        'Postman-Token',
        '97301942-f3a0-4ccb-9236-9bbab845b0f8',
        'Host',
        'localhost:8004',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive'
      ],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/health',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 195,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: false,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/data/api-management/apis/v1',
      originalUrl: '/data/api-management/apis/v1/health',
      _parsedUrl: Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: null,
        query: null,
        pathname: '/health',
        path: '/health',
        href: '/health',
        _raw: '/health'
      },
      params: {},
      query: {},
      res: [Circular *5],
      body: {},
      getId: [Function (anonymous)],
      [Symbol(kCapture)]: false,
      [Symbol(RequestTimeout)]: undefined
    },
    locals: [Object: null prototype] {},
    statusCode: 401,
    statusMessage: 'Unauthorized',
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [ 'X-Powered-By', 'Express' ],
      'correlation-id': [ 'correlation-id', '41b08110-a505-11ee-944b-cd9856103195' ],
      'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
      'content-length': [ 'Content-Length', '171' ],
      etag: [ 'ETag', 'W/"ab-8W66f+1zReKQhpfnhEafbI/9Y0c"' ]
    }
  },
  level: 'error',
  service: 'some-random-service',
  timestamp: '2023-12-27T22:14:09.060Z',
  label: 'validation'
}
{
  message: <ref *5> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 171,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 1,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/health',
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/health',
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: null,
            ended: false,
            endEmitted: false,
            reading: false,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: false,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: null
          },
          _events: [Object: null prototype] {
            end: [Function: clearRequestTimeout]
          },
          _eventsCount: 1,
          _maxListeners: undefined,
          socket: [Circular *1],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: false,
          headers: {
            'content-type': 'application/json',
            authorization: 'Bearer TkhOU1JYTlBia3g1',
            'user-agent': 'PostmanRuntime/7.35.0',
            accept: '*/*',
            'cache-control': 'no-cache',
            'postman-token': 'c1c9a194-4889-4bf3-b79c-44dae8c3c16c',
            host: 'localhost:8004',
            'accept-encoding': 'gzip, deflate, br',
            connection: 'keep-alive',
            'correlation-id': '5a440210-a505-11ee-944b-cd9856103195'
          },
          rawHeaders: [
            'Content-Type',
            'application/json',
            'Authorization',
            'Bearer TkhOU1JYTlBia3g1',
            'User-Agent',
            'PostmanRuntime/7.35.0',
            'Accept',
            '*/*',
            'Cache-Control',
            'no-cache',
            'Postman-Token',
            'c1c9a194-4889-4bf3-b79c-44dae8c3c16c',
            'Host',
            'localhost:8004',
            'Accept-Encoding',
            'gzip, deflate, br',
            'Connection',
            'keep-alive'
          ],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '/health',
          method: 'GET',
          statusCode: null,
          statusMessage: null,
          client: [Circular *1],
          _consuming: false,
          _dumped: false,
          next: [Function: next],
          baseUrl: '/data/api-management/apis/v1',
          originalUrl: '/data/api-management/apis/v1/health',
          _parsedUrl: Url {
            protocol: null,
            slashes: null,
            auth: null,
            host: null,
            port: null,
            hostname: null,
            hash: null,
            search: null,
            query: null,
            pathname: '/health',
            path: '/health',
            href: '/health',
            _raw: '/health'
          },
          params: {},
          query: {},
          res: [Circular *5],
          body: {},
          getId: [Function (anonymous)],
          [Symbol(kCapture)]: false,
          [Symbol(RequestTimeout)]: undefined
        },
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *5],
      [Symbol(async_id_symbol)]: 232,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'HTTP/1.1 401 Unauthorized\r\n' +
      'X-Powered-By: Express\r\n' +
      'correlation-id: 5a440210-a505-11ee-944b-cd9856103195\r\n' +
      'Content-Type: application/json; charset=utf-8\r\n' +
      'Content-Length: 171\r\n' +
      'ETag: W/"ab-rCWqco5rV3nDwnuTRIS4R7zhexY"\r\n' +
      'Date: Wed, 27 Dec 2023 22:14:50 GMT\r\n' +
      'Connection: keep-alive\r\n' +
      'Keep-Alive: timeout=5\r\n' +
      '\r\n',
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: <ref *6> IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: null,
        ended: false,
        endEmitted: false,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: null
      },
      _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
      _eventsCount: 1,
      _maxListeners: undefined,
      socket: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 232,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: false,
      headers: {
        'content-type': 'application/json',
        authorization: 'Bearer TkhOU1JYTlBia3g1',
        'user-agent': 'PostmanRuntime/7.35.0',
        accept: '*/*',
        'cache-control': 'no-cache',
        'postman-token': 'c1c9a194-4889-4bf3-b79c-44dae8c3c16c',
        host: 'localhost:8004',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive',
        'correlation-id': '5a440210-a505-11ee-944b-cd9856103195'
      },
      rawHeaders: [
        'Content-Type',
        'application/json',
        'Authorization',
        'Bearer TkhOU1JYTlBia3g1',
        'User-Agent',
        'PostmanRuntime/7.35.0',
        'Accept',
        '*/*',
        'Cache-Control',
        'no-cache',
        'Postman-Token',
        'c1c9a194-4889-4bf3-b79c-44dae8c3c16c',
        'Host',
        'localhost:8004',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive'
      ],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/health',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 232,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: false,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/data/api-management/apis/v1',
      originalUrl: '/data/api-management/apis/v1/health',
      _parsedUrl: Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: null,
        query: null,
        pathname: '/health',
        path: '/health',
        href: '/health',
        _raw: '/health'
      },
      params: {},
      query: {},
      res: [Circular *5],
      body: {},
      getId: [Function (anonymous)],
      [Symbol(kCapture)]: false,
      [Symbol(RequestTimeout)]: undefined
    },
    locals: [Object: null prototype] {},
    statusCode: 401,
    statusMessage: 'Unauthorized',
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [ 'X-Powered-By', 'Express' ],
      'correlation-id': [ 'correlation-id', '5a440210-a505-11ee-944b-cd9856103195' ],
      'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
      'content-length': [ 'Content-Length', '171' ],
      etag: [ 'ETag', 'W/"ab-rCWqco5rV3nDwnuTRIS4R7zhexY"' ]
    }
  },
  level: 'error',
  service: 'some-random-service',
  timestamp: '2023-12-27T22:14:50.291Z',
  label: 'validation'
}
{
  message: <ref *5> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 171,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 1,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/health',
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/health',
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: null,
            ended: false,
            endEmitted: false,
            reading: false,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: false,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: null
          },
          _events: [Object: null prototype] {
            end: [Function: clearRequestTimeout]
          },
          _eventsCount: 1,
          _maxListeners: undefined,
          socket: [Circular *1],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: false,
          headers: {
            'content-type': 'application/json',
            authorization: 'Bearer TkhOU1JYTlBia3g1',
            'user-agent': 'PostmanRuntime/7.35.0',
            accept: '*/*',
            'cache-control': 'no-cache',
            'postman-token': 'aa547de2-06cf-44e1-94d2-483c9ca1259a',
            host: 'localhost:8004',
            'accept-encoding': 'gzip, deflate, br',
            connection: 'keep-alive',
            'correlation-id': '95bf3620-a505-11ee-aa5b-eb927d22f5dc'
          },
          rawHeaders: [
            'Content-Type',
            'application/json',
            'Authorization',
            'Bearer TkhOU1JYTlBia3g1',
            'User-Agent',
            'PostmanRuntime/7.35.0',
            'Accept',
            '*/*',
            'Cache-Control',
            'no-cache',
            'Postman-Token',
            'aa547de2-06cf-44e1-94d2-483c9ca1259a',
            'Host',
            'localhost:8004',
            'Accept-Encoding',
            'gzip, deflate, br',
            'Connection',
            'keep-alive'
          ],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '/health',
          method: 'GET',
          statusCode: null,
          statusMessage: null,
          client: [Circular *1],
          _consuming: false,
          _dumped: false,
          next: [Function: next],
          baseUrl: '/data/api-management/apis/v1',
          originalUrl: '/data/api-management/apis/v1/health',
          _parsedUrl: Url {
            protocol: null,
            slashes: null,
            auth: null,
            host: null,
            port: null,
            hostname: null,
            hash: null,
            search: null,
            query: null,
            pathname: '/health',
            path: '/health',
            href: '/health',
            _raw: '/health'
          },
          params: {},
          query: {},
          res: [Circular *5],
          body: {},
          getId: [Function (anonymous)],
          [Symbol(kCapture)]: false,
          [Symbol(RequestTimeout)]: undefined
        },
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *5],
      [Symbol(async_id_symbol)]: 158,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'HTTP/1.1 401 Unauthorized\r\n' +
      'X-Powered-By: Express\r\n' +
      'correlation-id: 95bf3620-a505-11ee-aa5b-eb927d22f5dc\r\n' +
      'Content-Type: application/json; charset=utf-8\r\n' +
      'Content-Length: 171\r\n' +
      'ETag: W/"ab-KrMNVGH+//u4zum3nccPJGgVkJ4"\r\n' +
      'Date: Wed, 27 Dec 2023 22:16:30 GMT\r\n' +
      'Connection: keep-alive\r\n' +
      'Keep-Alive: timeout=5\r\n' +
      '\r\n',
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: <ref *6> IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: null,
        ended: false,
        endEmitted: false,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: null
      },
      _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
      _eventsCount: 1,
      _maxListeners: undefined,
      socket: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 158,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: false,
      headers: {
        'content-type': 'application/json',
        authorization: 'Bearer TkhOU1JYTlBia3g1',
        'user-agent': 'PostmanRuntime/7.35.0',
        accept: '*/*',
        'cache-control': 'no-cache',
        'postman-token': 'aa547de2-06cf-44e1-94d2-483c9ca1259a',
        host: 'localhost:8004',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive',
        'correlation-id': '95bf3620-a505-11ee-aa5b-eb927d22f5dc'
      },
      rawHeaders: [
        'Content-Type',
        'application/json',
        'Authorization',
        'Bearer TkhOU1JYTlBia3g1',
        'User-Agent',
        'PostmanRuntime/7.35.0',
        'Accept',
        '*/*',
        'Cache-Control',
        'no-cache',
        'Postman-Token',
        'aa547de2-06cf-44e1-94d2-483c9ca1259a',
        'Host',
        'localhost:8004',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive'
      ],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/health',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 158,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: false,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/data/api-management/apis/v1',
      originalUrl: '/data/api-management/apis/v1/health',
      _parsedUrl: Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: null,
        query: null,
        pathname: '/health',
        path: '/health',
        href: '/health',
        _raw: '/health'
      },
      params: {},
      query: {},
      res: [Circular *5],
      body: {},
      getId: [Function (anonymous)],
      [Symbol(kCapture)]: false,
      [Symbol(RequestTimeout)]: undefined
    },
    locals: [Object: null prototype] {},
    statusCode: 401,
    statusMessage: 'Unauthorized',
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [ 'X-Powered-By', 'Express' ],
      'correlation-id': [ 'correlation-id', '95bf3620-a505-11ee-aa5b-eb927d22f5dc' ],
      'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
      'content-length': [ 'Content-Length', '171' ],
      etag: [ 'ETag', 'W/"ab-KrMNVGH+//u4zum3nccPJGgVkJ4"' ]
    }
  },
  level: 'error',
  service: 'some-random-service',
  timestamp: '2023-12-27T22:16:30.089Z',
  label: 'validation'
}
{
  message: <ref *5> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 171,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 1,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/health',
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/health',
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: null,
            ended: false,
            endEmitted: false,
            reading: false,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: false,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: null
          },
          _events: [Object: null prototype] {
            end: [Function: clearRequestTimeout]
          },
          _eventsCount: 1,
          _maxListeners: undefined,
          socket: [Circular *1],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: false,
          headers: {
            'content-type': 'application/json',
            authorization: 'Bearer TkhOU1JYTlBia3g1',
            'user-agent': 'PostmanRuntime/7.35.0',
            accept: '*/*',
            'cache-control': 'no-cache',
            'postman-token': '2312ae53-ebe6-4c96-8af9-7716004a7212',
            host: 'localhost:8004',
            'accept-encoding': 'gzip, deflate, br',
            connection: 'keep-alive',
            'correlation-id': 'a8151ec0-a505-11ee-aca6-3b7aaf1e4a15'
          },
          rawHeaders: [
            'Content-Type',
            'application/json',
            'Authorization',
            'Bearer TkhOU1JYTlBia3g1',
            'User-Agent',
            'PostmanRuntime/7.35.0',
            'Accept',
            '*/*',
            'Cache-Control',
            'no-cache',
            'Postman-Token',
            '2312ae53-ebe6-4c96-8af9-7716004a7212',
            'Host',
            'localhost:8004',
            'Accept-Encoding',
            'gzip, deflate, br',
            'Connection',
            'keep-alive'
          ],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '/health',
          method: 'GET',
          statusCode: null,
          statusMessage: null,
          client: [Circular *1],
          _consuming: false,
          _dumped: false,
          next: [Function: next],
          baseUrl: '/data/api-management/apis/v1',
          originalUrl: '/data/api-management/apis/v1/health',
          _parsedUrl: Url {
            protocol: null,
            slashes: null,
            auth: null,
            host: null,
            port: null,
            hostname: null,
            hash: null,
            search: null,
            query: null,
            pathname: '/health',
            path: '/health',
            href: '/health',
            _raw: '/health'
          },
          params: {},
          query: {},
          res: [Circular *5],
          body: {},
          getId: [Function (anonymous)],
          [Symbol(kCapture)]: false,
          [Symbol(RequestTimeout)]: undefined
        },
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *5],
      [Symbol(async_id_symbol)]: 158,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'HTTP/1.1 401 Unauthorized\r\n' +
      'X-Powered-By: Express\r\n' +
      'correlation-id: a8151ec0-a505-11ee-aca6-3b7aaf1e4a15\r\n' +
      'Content-Type: application/json; charset=utf-8\r\n' +
      'Content-Length: 171\r\n' +
      'ETag: W/"ab-ijycPRgy1GuM+D/iz//tvlP+4Oo"\r\n' +
      'Date: Wed, 27 Dec 2023 22:17:00 GMT\r\n' +
      'Connection: keep-alive\r\n' +
      'Keep-Alive: timeout=5\r\n' +
      '\r\n',
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: <ref *6> IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: null,
        ended: false,
        endEmitted: false,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: null
      },
      _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
      _eventsCount: 1,
      _maxListeners: undefined,
      socket: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 158,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: false,
      headers: {
        'content-type': 'application/json',
        authorization: 'Bearer TkhOU1JYTlBia3g1',
        'user-agent': 'PostmanRuntime/7.35.0',
        accept: '*/*',
        'cache-control': 'no-cache',
        'postman-token': '2312ae53-ebe6-4c96-8af9-7716004a7212',
        host: 'localhost:8004',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive',
        'correlation-id': 'a8151ec0-a505-11ee-aca6-3b7aaf1e4a15'
      },
      rawHeaders: [
        'Content-Type',
        'application/json',
        'Authorization',
        'Bearer TkhOU1JYTlBia3g1',
        'User-Agent',
        'PostmanRuntime/7.35.0',
        'Accept',
        '*/*',
        'Cache-Control',
        'no-cache',
        'Postman-Token',
        '2312ae53-ebe6-4c96-8af9-7716004a7212',
        'Host',
        'localhost:8004',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive'
      ],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/health',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 158,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: false,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/data/api-management/apis/v1',
      originalUrl: '/data/api-management/apis/v1/health',
      _parsedUrl: Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: null,
        query: null,
        pathname: '/health',
        path: '/health',
        href: '/health',
        _raw: '/health'
      },
      params: {},
      query: {},
      res: [Circular *5],
      body: {},
      getId: [Function (anonymous)],
      [Symbol(kCapture)]: false,
      [Symbol(RequestTimeout)]: undefined
    },
    locals: [Object: null prototype] {},
    statusCode: 401,
    statusMessage: 'Unauthorized',
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [ 'X-Powered-By', 'Express' ],
      'correlation-id': [ 'correlation-id', 'a8151ec0-a505-11ee-aca6-3b7aaf1e4a15' ],
      'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
      'content-length': [ 'Content-Length', '171' ],
      etag: [ 'ETag', 'W/"ab-ijycPRgy1GuM+D/iz//tvlP+4Oo"' ]
    }
  },
  level: 'error',
  service: 'some-random-service',
  timestamp: '2023-12-27T22:17:00.855Z',
  label: 'validation'
}
{
  message: <ref *5> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 171,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 1,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/health',
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/health',
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: null,
            ended: false,
            endEmitted: false,
            reading: false,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: false,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: null
          },
          _events: [Object: null prototype] {
            end: [Function: clearRequestTimeout]
          },
          _eventsCount: 1,
          _maxListeners: undefined,
          socket: [Circular *1],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: false,
          headers: {
            'content-type': 'application/json',
            authorization: 'Bearer TkhOU1JYTlBia3g1',
            'user-agent': 'PostmanRuntime/7.35.0',
            accept: '*/*',
            'cache-control': 'no-cache',
            'postman-token': '892fd630-2016-476e-92e6-5c6352170174',
            host: 'localhost:8004',
            'accept-encoding': 'gzip, deflate, br',
            connection: 'keep-alive',
            'correlation-id': '002d7530-a506-11ee-b69f-1538e4e832f2'
          },
          rawHeaders: [
            'Content-Type',
            'application/json',
            'Authorization',
            'Bearer TkhOU1JYTlBia3g1',
            'User-Agent',
            'PostmanRuntime/7.35.0',
            'Accept',
            '*/*',
            'Cache-Control',
            'no-cache',
            'Postman-Token',
            '892fd630-2016-476e-92e6-5c6352170174',
            'Host',
            'localhost:8004',
            'Accept-Encoding',
            'gzip, deflate, br',
            'Connection',
            'keep-alive'
          ],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '/health',
          method: 'GET',
          statusCode: null,
          statusMessage: null,
          client: [Circular *1],
          _consuming: false,
          _dumped: false,
          next: [Function: next],
          baseUrl: '/data/api-management/apis/v1',
          originalUrl: '/data/api-management/apis/v1/health',
          _parsedUrl: Url {
            protocol: null,
            slashes: null,
            auth: null,
            host: null,
            port: null,
            hostname: null,
            hash: null,
            search: null,
            query: null,
            pathname: '/health',
            path: '/health',
            href: '/health',
            _raw: '/health'
          },
          params: {},
          query: {},
          res: [Circular *5],
          body: {},
          getId: [Function (anonymous)],
          [Symbol(kCapture)]: false,
          [Symbol(RequestTimeout)]: undefined
        },
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *5],
      [Symbol(async_id_symbol)]: 158,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'HTTP/1.1 401 Unauthorized\r\n' +
      'X-Powered-By: Express\r\n' +
      'correlation-id: 002d7530-a506-11ee-b69f-1538e4e832f2\r\n' +
      'Content-Type: application/json; charset=utf-8\r\n' +
      'Content-Length: 171\r\n' +
      'ETag: W/"ab-feJJzpACXxkas/IxbAXNRqAb4as"\r\n' +
      'Date: Wed, 27 Dec 2023 22:19:28 GMT\r\n' +
      'Connection: keep-alive\r\n' +
      'Keep-Alive: timeout=5\r\n' +
      '\r\n',
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: <ref *6> IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: null,
        ended: false,
        endEmitted: false,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: null
      },
      _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
      _eventsCount: 1,
      _maxListeners: undefined,
      socket: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 158,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: false,
      headers: {
        'content-type': 'application/json',
        authorization: 'Bearer TkhOU1JYTlBia3g1',
        'user-agent': 'PostmanRuntime/7.35.0',
        accept: '*/*',
        'cache-control': 'no-cache',
        'postman-token': '892fd630-2016-476e-92e6-5c6352170174',
        host: 'localhost:8004',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive',
        'correlation-id': '002d7530-a506-11ee-b69f-1538e4e832f2'
      },
      rawHeaders: [
        'Content-Type',
        'application/json',
        'Authorization',
        'Bearer TkhOU1JYTlBia3g1',
        'User-Agent',
        'PostmanRuntime/7.35.0',
        'Accept',
        '*/*',
        'Cache-Control',
        'no-cache',
        'Postman-Token',
        '892fd630-2016-476e-92e6-5c6352170174',
        'Host',
        'localhost:8004',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive'
      ],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/health',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 158,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: false,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/data/api-management/apis/v1',
      originalUrl: '/data/api-management/apis/v1/health',
      _parsedUrl: Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: null,
        query: null,
        pathname: '/health',
        path: '/health',
        href: '/health',
        _raw: '/health'
      },
      params: {},
      query: {},
      res: [Circular *5],
      body: {},
      getId: [Function (anonymous)],
      [Symbol(kCapture)]: false,
      [Symbol(RequestTimeout)]: undefined
    },
    locals: [Object: null prototype] {},
    statusCode: 401,
    statusMessage: 'Unauthorized',
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [ 'X-Powered-By', 'Express' ],
      'correlation-id': [ 'correlation-id', '002d7530-a506-11ee-b69f-1538e4e832f2' ],
      'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
      'content-length': [ 'Content-Length', '171' ],
      etag: [ 'ETag', 'W/"ab-feJJzpACXxkas/IxbAXNRqAb4as"' ]
    }
  },
  level: 'error',
  service: 'some-random-service',
  timestamp: '2023-12-27T22:19:28.651Z',
  label: 'validation'
}
{
  message: <ref *5> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 171,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 1,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/health',
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/health',
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: null,
            ended: false,
            endEmitted: false,
            reading: false,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: false,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: null
          },
          _events: [Object: null prototype] {
            end: [Function: clearRequestTimeout]
          },
          _eventsCount: 1,
          _maxListeners: undefined,
          socket: [Circular *1],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: false,
          headers: {
            'content-type': 'application/json',
            authorization: 'Bearer TkhOU1JYTlBia3g',
            'user-agent': 'PostmanRuntime/7.35.0',
            accept: '*/*',
            'cache-control': 'no-cache',
            'postman-token': '00d2d83e-f5eb-4db8-99de-beda819bfec1',
            host: 'localhost:8004',
            'accept-encoding': 'gzip, deflate, br',
            connection: 'keep-alive',
            'correlation-id': '2c57c340-a506-11ee-b9a9-e1718af3ec0f'
          },
          rawHeaders: [
            'Content-Type',
            'application/json',
            'Authorization',
            'Bearer TkhOU1JYTlBia3g',
            'User-Agent',
            'PostmanRuntime/7.35.0',
            'Accept',
            '*/*',
            'Cache-Control',
            'no-cache',
            'Postman-Token',
            '00d2d83e-f5eb-4db8-99de-beda819bfec1',
            'Host',
            'localhost:8004',
            'Accept-Encoding',
            'gzip, deflate, br',
            'Connection',
            'keep-alive'
          ],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '/health',
          method: 'GET',
          statusCode: null,
          statusMessage: null,
          client: [Circular *1],
          _consuming: false,
          _dumped: false,
          next: [Function: next],
          baseUrl: '/data/api-management/apis/v1',
          originalUrl: '/data/api-management/apis/v1/health',
          _parsedUrl: Url {
            protocol: null,
            slashes: null,
            auth: null,
            host: null,
            port: null,
            hostname: null,
            hash: null,
            search: null,
            query: null,
            pathname: '/health',
            path: '/health',
            href: '/health',
            _raw: '/health'
          },
          params: {},
          query: {},
          res: [Circular *5],
          body: {},
          getId: [Function (anonymous)],
          [Symbol(kCapture)]: false,
          [Symbol(RequestTimeout)]: undefined
        },
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *5],
      [Symbol(async_id_symbol)]: 190,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'HTTP/1.1 401 Unauthorized\r\n' +
      'X-Powered-By: Express\r\n' +
      'correlation-id: 2c57c340-a506-11ee-b9a9-e1718af3ec0f\r\n' +
      'Content-Type: application/json; charset=utf-8\r\n' +
      'Content-Length: 171\r\n' +
      'ETag: W/"ab-FOA4IgjH6FJxVp7CC4uI0zFzep0"\r\n' +
      'Date: Wed, 27 Dec 2023 22:20:42 GMT\r\n' +
      'Connection: keep-alive\r\n' +
      'Keep-Alive: timeout=5\r\n' +
      '\r\n',
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: <ref *6> IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: null,
        ended: false,
        endEmitted: false,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: null
      },
      _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
      _eventsCount: 1,
      _maxListeners: undefined,
      socket: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 190,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: false,
      headers: {
        'content-type': 'application/json',
        authorization: 'Bearer TkhOU1JYTlBia3g',
        'user-agent': 'PostmanRuntime/7.35.0',
        accept: '*/*',
        'cache-control': 'no-cache',
        'postman-token': '00d2d83e-f5eb-4db8-99de-beda819bfec1',
        host: 'localhost:8004',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive',
        'correlation-id': '2c57c340-a506-11ee-b9a9-e1718af3ec0f'
      },
      rawHeaders: [
        'Content-Type',
        'application/json',
        'Authorization',
        'Bearer TkhOU1JYTlBia3g',
        'User-Agent',
        'PostmanRuntime/7.35.0',
        'Accept',
        '*/*',
        'Cache-Control',
        'no-cache',
        'Postman-Token',
        '00d2d83e-f5eb-4db8-99de-beda819bfec1',
        'Host',
        'localhost:8004',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive'
      ],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/health',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 190,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: false,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/data/api-management/apis/v1',
      originalUrl: '/data/api-management/apis/v1/health',
      _parsedUrl: Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: null,
        query: null,
        pathname: '/health',
        path: '/health',
        href: '/health',
        _raw: '/health'
      },
      params: {},
      query: {},
      res: [Circular *5],
      body: {},
      getId: [Function (anonymous)],
      [Symbol(kCapture)]: false,
      [Symbol(RequestTimeout)]: undefined
    },
    locals: [Object: null prototype] {},
    statusCode: 401,
    statusMessage: 'Unauthorized',
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [ 'X-Powered-By', 'Express' ],
      'correlation-id': [ 'correlation-id', '2c57c340-a506-11ee-b9a9-e1718af3ec0f' ],
      'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
      'content-length': [ 'Content-Length', '171' ],
      etag: [ 'ETag', 'W/"ab-FOA4IgjH6FJxVp7CC4uI0zFzep0"' ]
    }
  },
  level: 'error',
  service: 'some-random-service',
  timestamp: '2023-12-27T22:20:42.744Z',
  label: 'validation'
}
{
  message: <ref *5> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 171,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 1,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/health',
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/health',
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: null,
            ended: false,
            endEmitted: false,
            reading: false,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: false,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: null
          },
          _events: [Object: null prototype] {
            end: [Function: clearRequestTimeout]
          },
          _eventsCount: 1,
          _maxListeners: undefined,
          socket: [Circular *1],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: false,
          headers: {
            'content-type': 'application/json',
            'user-agent': 'PostmanRuntime/7.35.0',
            accept: '*/*',
            'cache-control': 'no-cache',
            'postman-token': '5babc634-d06a-4aa1-b5b0-f9703a99533c',
            host: 'localhost:8004',
            'accept-encoding': 'gzip, deflate, br',
            connection: 'keep-alive',
            'correlation-id': '762a7900-a591-11ee-82cb-174f9ae15c31'
          },
          rawHeaders: [
            'Content-Type',
            'application/json',
            'User-Agent',
            'PostmanRuntime/7.35.0',
            'Accept',
            '*/*',
            'Cache-Control',
            'no-cache',
            'Postman-Token',
            '5babc634-d06a-4aa1-b5b0-f9703a99533c',
            'Host',
            'localhost:8004',
            'Accept-Encoding',
            'gzip, deflate, br',
            'Connection',
            'keep-alive'
          ],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '/health',
          method: 'GET',
          statusCode: null,
          statusMessage: null,
          client: [Circular *1],
          _consuming: false,
          _dumped: false,
          next: [Function: next],
          baseUrl: '/data/api-management/apis/v1',
          originalUrl: '/data/api-management/apis/v1/health',
          _parsedUrl: Url {
            protocol: null,
            slashes: null,
            auth: null,
            host: null,
            port: null,
            hostname: null,
            hash: null,
            search: null,
            query: null,
            pathname: '/health',
            path: '/health',
            href: '/health',
            _raw: '/health'
          },
          params: {},
          query: { myEndpoint: '/data/api-management/apis/v1/' },
          res: [Circular *5],
          body: {},
          getId: [Function (anonymous)],
          [Symbol(kCapture)]: false,
          [Symbol(RequestTimeout)]: undefined
        },
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *5],
      [Symbol(async_id_symbol)]: 158,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'HTTP/1.1 401 Unauthorized\r\n' +
      'X-Powered-By: Express\r\n' +
      'correlation-id: 762a7900-a591-11ee-82cb-174f9ae15c31\r\n' +
      'Content-Type: application/json; charset=utf-8\r\n' +
      'Content-Length: 171\r\n' +
      'ETag: W/"ab-L6H/JmJ3niQnvdPS98126CCJMsY"\r\n' +
      'Date: Thu, 28 Dec 2023 14:57:46 GMT\r\n' +
      'Connection: keep-alive\r\n' +
      'Keep-Alive: timeout=5\r\n' +
      '\r\n',
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: <ref *6> IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: null,
        ended: false,
        endEmitted: false,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: null
      },
      _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
      _eventsCount: 1,
      _maxListeners: undefined,
      socket: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 158,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: false,
      headers: {
        'content-type': 'application/json',
        'user-agent': 'PostmanRuntime/7.35.0',
        accept: '*/*',
        'cache-control': 'no-cache',
        'postman-token': '5babc634-d06a-4aa1-b5b0-f9703a99533c',
        host: 'localhost:8004',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive',
        'correlation-id': '762a7900-a591-11ee-82cb-174f9ae15c31'
      },
      rawHeaders: [
        'Content-Type',
        'application/json',
        'User-Agent',
        'PostmanRuntime/7.35.0',
        'Accept',
        '*/*',
        'Cache-Control',
        'no-cache',
        'Postman-Token',
        '5babc634-d06a-4aa1-b5b0-f9703a99533c',
        'Host',
        'localhost:8004',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive'
      ],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/health',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 158,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: false,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/data/api-management/apis/v1',
      originalUrl: '/data/api-management/apis/v1/health',
      _parsedUrl: Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: null,
        query: null,
        pathname: '/health',
        path: '/health',
        href: '/health',
        _raw: '/health'
      },
      params: {},
      query: { myEndpoint: '/data/api-management/apis/v1/' },
      res: [Circular *5],
      body: {},
      getId: [Function (anonymous)],
      [Symbol(kCapture)]: false,
      [Symbol(RequestTimeout)]: undefined
    },
    locals: [Object: null prototype] {},
    statusCode: 401,
    statusMessage: 'Unauthorized',
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [ 'X-Powered-By', 'Express' ],
      'correlation-id': [ 'correlation-id', '762a7900-a591-11ee-82cb-174f9ae15c31' ],
      'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
      'content-length': [ 'Content-Length', '171' ],
      etag: [ 'ETag', 'W/"ab-L6H/JmJ3niQnvdPS98126CCJMsY"' ]
    }
  },
  level: 'error',
  service: 'some-random-service',
  timestamp: '2023-12-28T14:57:46.646Z',
  label: 'validation'
}
{
  message: <ref *5> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 171,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 1,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/health',
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/health',
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: null,
            ended: false,
            endEmitted: false,
            reading: false,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: false,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: null
          },
          _events: [Object: null prototype] {
            end: [Function: clearRequestTimeout]
          },
          _eventsCount: 1,
          _maxListeners: undefined,
          socket: [Circular *1],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: false,
          headers: {
            'content-type': 'application/json',
            'user-agent': 'PostmanRuntime/7.35.0',
            accept: '*/*',
            'cache-control': 'no-cache',
            'postman-token': '50ce52a0-6bcd-41f3-966f-9736e276a79c',
            host: 'localhost:8004',
            'accept-encoding': 'gzip, deflate, br',
            connection: 'keep-alive',
            'correlation-id': '9178fb50-a591-11ee-856e-bd33fc6f5fcd'
          },
          rawHeaders: [
            'Content-Type',
            'application/json',
            'User-Agent',
            'PostmanRuntime/7.35.0',
            'Accept',
            '*/*',
            'Cache-Control',
            'no-cache',
            'Postman-Token',
            '50ce52a0-6bcd-41f3-966f-9736e276a79c',
            'Host',
            'localhost:8004',
            'Accept-Encoding',
            'gzip, deflate, br',
            'Connection',
            'keep-alive'
          ],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '/health',
          method: 'GET',
          statusCode: null,
          statusMessage: null,
          client: [Circular *1],
          _consuming: false,
          _dumped: false,
          next: [Function: next],
          baseUrl: '/data/api-management/apis/v1',
          originalUrl: '/data/api-management/apis/v1/health',
          _parsedUrl: Url {
            protocol: null,
            slashes: null,
            auth: null,
            host: null,
            port: null,
            hostname: null,
            hash: null,
            search: null,
            query: null,
            pathname: '/health',
            path: '/health',
            href: '/health',
            _raw: '/health'
          },
          params: {},
          query: { myEndpoint: '/data/api-management/apis/v1/' },
          res: [Circular *5],
          body: {},
          getId: [Function (anonymous)],
          [Symbol(kCapture)]: false,
          [Symbol(RequestTimeout)]: undefined
        },
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *5],
      [Symbol(async_id_symbol)]: 158,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'HTTP/1.1 401 Unauthorized\r\n' +
      'X-Powered-By: Express\r\n' +
      'correlation-id: 9178fb50-a591-11ee-856e-bd33fc6f5fcd\r\n' +
      'Content-Type: application/json; charset=utf-8\r\n' +
      'Content-Length: 171\r\n' +
      'ETag: W/"ab-f5CO36R2DvH8oWZwdxmCpc66MWw"\r\n' +
      'Date: Thu, 28 Dec 2023 14:58:32 GMT\r\n' +
      'Connection: keep-alive\r\n' +
      'Keep-Alive: timeout=5\r\n' +
      '\r\n',
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: <ref *6> IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: null,
        ended: false,
        endEmitted: false,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: null
      },
      _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
      _eventsCount: 1,
      _maxListeners: undefined,
      socket: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 158,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: false,
      headers: {
        'content-type': 'application/json',
        'user-agent': 'PostmanRuntime/7.35.0',
        accept: '*/*',
        'cache-control': 'no-cache',
        'postman-token': '50ce52a0-6bcd-41f3-966f-9736e276a79c',
        host: 'localhost:8004',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive',
        'correlation-id': '9178fb50-a591-11ee-856e-bd33fc6f5fcd'
      },
      rawHeaders: [
        'Content-Type',
        'application/json',
        'User-Agent',
        'PostmanRuntime/7.35.0',
        'Accept',
        '*/*',
        'Cache-Control',
        'no-cache',
        'Postman-Token',
        '50ce52a0-6bcd-41f3-966f-9736e276a79c',
        'Host',
        'localhost:8004',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive'
      ],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/health',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/health',
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 158,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: false,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/data/api-management/apis/v1',
      originalUrl: '/data/api-management/apis/v1/health',
      _parsedUrl: Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: null,
        query: null,
        pathname: '/health',
        path: '/health',
        href: '/health',
        _raw: '/health'
      },
      params: {},
      query: { myEndpoint: '/data/api-management/apis/v1/' },
      res: [Circular *5],
      body: {},
      getId: [Function (anonymous)],
      [Symbol(kCapture)]: false,
      [Symbol(RequestTimeout)]: undefined
    },
    locals: [Object: null prototype] {},
    statusCode: 401,
    statusMessage: 'Unauthorized',
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [ 'X-Powered-By', 'Express' ],
      'correlation-id': [ 'correlation-id', '9178fb50-a591-11ee-856e-bd33fc6f5fcd' ],
      'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
      'content-length': [ 'Content-Length', '171' ],
      etag: [ 'ETag', 'W/"ab-f5CO36R2DvH8oWZwdxmCpc66MWw"' ]
    }
  },
  level: 'error',
  service: 'some-random-service',
  timestamp: '2023-12-28T14:58:32.461Z',
  label: 'validation'
}
{
  message: <ref *5> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 171,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 1,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/getProfileIds',
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 2,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/getProfileIds',
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 2,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: null,
            ended: false,
            endEmitted: false,
            reading: false,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: false,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: null
          },
          _events: [Object: null prototype] {
            end: [Function: clearRequestTimeout]
          },
          _eventsCount: 1,
          _maxListeners: undefined,
          socket: [Circular *1],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: false,
          headers: {
            'content-type': 'application/json',
            'user-agent': 'PostmanRuntime/7.35.0',
            accept: '*/*',
            'cache-control': 'no-cache',
            'postman-token': '108a0ef7-8832-44c1-a03d-ea0b055cb595',
            host: 'localhost:8004',
            'accept-encoding': 'gzip, deflate, br',
            connection: 'keep-alive',
            'correlation-id': 'ba3dfe50-a591-11ee-8ead-49f425e9192d'
          },
          rawHeaders: [
            'Content-Type',
            'application/json',
            'User-Agent',
            'PostmanRuntime/7.35.0',
            'Accept',
            '*/*',
            'Cache-Control',
            'no-cache',
            'Postman-Token',
            '108a0ef7-8832-44c1-a03d-ea0b055cb595',
            'Host',
            'localhost:8004',
            'Accept-Encoding',
            'gzip, deflate, br',
            'Connection',
            'keep-alive'
          ],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '/getProfileIds',
          method: 'GET',
          statusCode: null,
          statusMessage: null,
          client: [Circular *1],
          _consuming: false,
          _dumped: false,
          next: [Function: next],
          baseUrl: '/data/api-management/apis/v1',
          originalUrl: '/data/api-management/apis/v1/getProfileIds',
          _parsedUrl: Url {
            protocol: null,
            slashes: null,
            auth: null,
            host: null,
            port: null,
            hostname: null,
            hash: null,
            search: null,
            query: null,
            pathname: '/getProfileIds',
            path: '/getProfileIds',
            href: '/getProfileIds',
            _raw: '/getProfileIds'
          },
          params: {},
          query: { myEndpoint: '/data/api-management/apis/v1/' },
          res: [Circular *5],
          body: {},
          getId: [Function (anonymous)],
          [Symbol(kCapture)]: false,
          [Symbol(RequestTimeout)]: undefined
        },
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *5],
      [Symbol(async_id_symbol)]: 190,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'HTTP/1.1 401 Unauthorized\r\n' +
      'X-Powered-By: Express\r\n' +
      'correlation-id: ba3dfe50-a591-11ee-8ead-49f425e9192d\r\n' +
      'Content-Type: application/json; charset=utf-8\r\n' +
      'Content-Length: 171\r\n' +
      'ETag: W/"ab-8FtnzdCQsf6EgbwqPNUi4BnfPG8"\r\n' +
      'Date: Thu, 28 Dec 2023 14:59:40 GMT\r\n' +
      'Connection: keep-alive\r\n' +
      'Keep-Alive: timeout=5\r\n' +
      '\r\n',
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: <ref *6> IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: null,
        ended: false,
        endEmitted: false,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: null
      },
      _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
      _eventsCount: 1,
      _maxListeners: undefined,
      socket: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/getProfileIds',
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 2,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/getProfileIds',
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 2,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 190,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: false,
      headers: {
        'content-type': 'application/json',
        'user-agent': 'PostmanRuntime/7.35.0',
        accept: '*/*',
        'cache-control': 'no-cache',
        'postman-token': '108a0ef7-8832-44c1-a03d-ea0b055cb595',
        host: 'localhost:8004',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive',
        'correlation-id': 'ba3dfe50-a591-11ee-8ead-49f425e9192d'
      },
      rawHeaders: [
        'Content-Type',
        'application/json',
        'User-Agent',
        'PostmanRuntime/7.35.0',
        'Accept',
        '*/*',
        'Cache-Control',
        'no-cache',
        'Postman-Token',
        '108a0ef7-8832-44c1-a03d-ea0b055cb595',
        'Host',
        'localhost:8004',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive'
      ],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/getProfileIds',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/getProfileIds',
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 2,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/getProfileIds',
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 2,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 190,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: false,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/data/api-management/apis/v1',
      originalUrl: '/data/api-management/apis/v1/getProfileIds',
      _parsedUrl: Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: null,
        query: null,
        pathname: '/getProfileIds',
        path: '/getProfileIds',
        href: '/getProfileIds',
        _raw: '/getProfileIds'
      },
      params: {},
      query: { myEndpoint: '/data/api-management/apis/v1/' },
      res: [Circular *5],
      body: {},
      getId: [Function (anonymous)],
      [Symbol(kCapture)]: false,
      [Symbol(RequestTimeout)]: undefined
    },
    locals: [Object: null prototype] {},
    statusCode: 401,
    statusMessage: 'Unauthorized',
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [ 'X-Powered-By', 'Express' ],
      'correlation-id': [ 'correlation-id', 'ba3dfe50-a591-11ee-8ead-49f425e9192d' ],
      'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
      'content-length': [ 'Content-Length', '171' ],
      etag: [ 'ETag', 'W/"ab-8FtnzdCQsf6EgbwqPNUi4BnfPG8"' ]
    }
  },
  level: 'error',
  service: 'some-random-service',
  timestamp: '2023-12-28T14:59:40.857Z',
  label: 'validation'
}
{
  message: <ref *5> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 233,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 1,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/uploadHomework',
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/uploadHomework',
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            sync: false,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: false,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: clearRequestTimeout]
          },
          _eventsCount: 1,
          _maxListeners: undefined,
          socket: [Circular *1],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          headers: {
            'content-type': 'application/json',
            authorization: 'Bearer TkhOU1JYTlBia3g1',
            'user-agent': 'PostmanRuntime/7.35.0',
            accept: '*/*',
            'cache-control': 'no-cache',
            'postman-token': 'c76b929c-1b72-4701-9e13-c877b5153155',
            host: 'localhost:8004',
            'accept-encoding': 'gzip, deflate, br',
            connection: 'keep-alive',
            'content-length': '4411',
            'correlation-id': '617cf210-aaf2-11ee-a055-938165dde1e1'
          },
          rawHeaders: [
            'Content-Type',
            'application/json',
            'Authorization',
            'Bearer TkhOU1JYTlBia3g1',
            'User-Agent',
            'PostmanRuntime/7.35.0',
            'Accept',
            '*/*',
            'Cache-Control',
            'no-cache',
            'Postman-Token',
            'c76b929c-1b72-4701-9e13-c877b5153155',
            'Host',
            'localhost:8004',
            'Accept-Encoding',
            'gzip, deflate, br',
            'Connection',
            'keep-alive',
            'Content-Length',
            '4411'
          ],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '/uploadHomework?coll=TamKroConsulting&id=Wigdor&version=1.0.0',
          method: 'POST',
          statusCode: null,
          statusMessage: null,
          client: [Circular *1],
          _consuming: true,
          _dumped: false,
          next: [Function: next],
          baseUrl: '/data/api-management/apis/v1',
          originalUrl: '/data/api-management/apis/v1/uploadHomework?coll=TamKroConsulting&id=Wigdor&version=1.0.0',
          _parsedUrl: Url {
            protocol: null,
            slashes: null,
            auth: null,
            host: null,
            port: null,
            hostname: null,
            hash: null,
            search: '?coll=TamKroConsulting&id=Wigdor&version=1.0.0',
            query: 'coll=TamKroConsulting&id=Wigdor&version=1.0.0',
            pathname: '/uploadHomework',
            path: '/uploadHomework?coll=TamKroConsulting&id=Wigdor&version=1.0.0',
            href: '/uploadHomework?coll=TamKroConsulting&id=Wigdor&version=1.0.0',
            _raw: '/uploadHomework?coll=TamKroConsulting&id=Wigdor&version=1.0.0'
          },
          params: {},
          query: {
            coll: 'TamKroConsulting',
            id: 'Wigdor',
            version: '1.0.0',
            myEndpoint: 'uploadHomework'
          },
          res: [Circular *5],
          body: {
            id: 'Wigdor',
            version: '1.0.0',
            type: 'object',
            object: 'homework',
            homework: {
              userList: [
                {
                  Username: 'Seth1TestUser100@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Partner',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser101@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Attorney',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser102@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Paralegal/CM',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser103@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Financial',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser104@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'IT/Admin',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser105@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Partner',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser106@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Attorney',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser107@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Paralegal/CM',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser108@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Financial',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser109@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'IT/Admin',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser110@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Partner',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser111@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Attorney',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser112@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Paralegal/CM',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser113@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Financial',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser114@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'IT/Admin',
                  TimeZoneSidKey: 'America/New_York'
                }
              ]
            }
          },
          _body: true,
          length: undefined,
          getId: [Function (anonymous)],
          route: Route {
            path: '/uploadHomework',
            stack: [
              Layer {
                handle: [AsyncFunction: qpCheck],
                name: 'qpCheck',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                method: 'post'
              },
              Layer {
                handle: [AsyncFunction: postHomework],
                name: 'postHomework',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                method: 'post'
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                method: 'post'
              }
            ],
            methods: { post: true }
          },
          [Symbol(kCapture)]: false,
          [Symbol(RequestTimeout)]: undefined
        },
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *5],
      [Symbol(async_id_symbol)]: 158,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'HTTP/1.1 400 Bad Request\r\n' +
      'X-Powered-By: Express\r\n' +
      'correlation-id: 617cf210-aaf2-11ee-a055-938165dde1e1\r\n' +
      'Content-Type: application/json; charset=utf-8\r\n' +
      'Content-Length: 233\r\n' +
      'ETag: W/"e9-arGlnmLY8bFc+f8rEx7mnEjsCMg"\r\n' +
      'Date: Thu, 04 Jan 2024 11:14:08 GMT\r\n' +
      'Connection: keep-alive\r\n' +
      'Keep-Alive: timeout=5\r\n' +
      '\r\n',
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: <ref *6> IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
      _eventsCount: 1,
      _maxListeners: undefined,
      socket: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 158,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: {
        'content-type': 'application/json',
        authorization: 'Bearer TkhOU1JYTlBia3g1',
        'user-agent': 'PostmanRuntime/7.35.0',
        accept: '*/*',
        'cache-control': 'no-cache',
        'postman-token': 'c76b929c-1b72-4701-9e13-c877b5153155',
        host: 'localhost:8004',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive',
        'content-length': '4411',
        'correlation-id': '617cf210-aaf2-11ee-a055-938165dde1e1'
      },
      rawHeaders: [
        'Content-Type',
        'application/json',
        'Authorization',
        'Bearer TkhOU1JYTlBia3g1',
        'User-Agent',
        'PostmanRuntime/7.35.0',
        'Accept',
        '*/*',
        'Cache-Control',
        'no-cache',
        'Postman-Token',
        'c76b929c-1b72-4701-9e13-c877b5153155',
        'Host',
        'localhost:8004',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive',
        'Content-Length',
        '4411'
      ],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/uploadHomework?coll=TamKroConsulting&id=Wigdor&version=1.0.0',
      method: 'POST',
      statusCode: null,
      statusMessage: null,
      client: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 158,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/data/api-management/apis/v1',
      originalUrl: '/data/api-management/apis/v1/uploadHomework?coll=TamKroConsulting&id=Wigdor&version=1.0.0',
      _parsedUrl: Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: '?coll=TamKroConsulting&id=Wigdor&version=1.0.0',
        query: 'coll=TamKroConsulting&id=Wigdor&version=1.0.0',
        pathname: '/uploadHomework',
        path: '/uploadHomework?coll=TamKroConsulting&id=Wigdor&version=1.0.0',
        href: '/uploadHomework?coll=TamKroConsulting&id=Wigdor&version=1.0.0',
        _raw: '/uploadHomework?coll=TamKroConsulting&id=Wigdor&version=1.0.0'
      },
      params: {},
      query: {
        coll: 'TamKroConsulting',
        id: 'Wigdor',
        version: '1.0.0',
        myEndpoint: 'uploadHomework'
      },
      res: [Circular *5],
      body: {
        id: 'Wigdor',
        version: '1.0.0',
        type: 'object',
        object: 'homework',
        homework: {
          userList: [
            {
              Username: 'Seth1TestUser100@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Partner',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser101@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Attorney',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser102@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Paralegal/CM',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser103@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Financial',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser104@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'IT/Admin',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser105@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Partner',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser106@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Attorney',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser107@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Paralegal/CM',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser108@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Financial',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser109@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'IT/Admin',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser110@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Partner',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser111@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Attorney',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser112@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Paralegal/CM',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser113@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Financial',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser114@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'IT/Admin',
              TimeZoneSidKey: 'America/New_York'
            }
          ]
        }
      },
      _body: true,
      length: undefined,
      getId: [Function (anonymous)],
      route: Route {
        path: '/uploadHomework',
        stack: [
          Layer {
            handle: [AsyncFunction: qpCheck],
            name: 'qpCheck',
            params: undefined,
            path: undefined,
            keys: [],
            regexp: /^\/?$/i { fast_star: false, fast_slash: false },
            method: 'post'
          },
          Layer {
            handle: [AsyncFunction: postHomework],
            name: 'postHomework',
            params: undefined,
            path: undefined,
            keys: [],
            regexp: /^\/?$/i { fast_star: false, fast_slash: false },
            method: 'post'
          },
          Layer {
            handle: [Function (anonymous)],
            name: '<anonymous>',
            params: undefined,
            path: undefined,
            keys: [],
            regexp: /^\/?$/i { fast_star: false, fast_slash: false },
            method: 'post'
          }
        ],
        methods: { post: true }
      },
      [Symbol(kCapture)]: false,
      [Symbol(RequestTimeout)]: undefined
    },
    locals: [Object: null prototype] {},
    statusCode: 400,
    statusMessage: 'Bad Request',
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [ 'X-Powered-By', 'Express' ],
      'correlation-id': [ 'correlation-id', '617cf210-aaf2-11ee-a055-938165dde1e1' ],
      'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
      'content-length': [ 'Content-Length', '233' ],
      etag: [ 'ETag', 'W/"e9-arGlnmLY8bFc+f8rEx7mnEjsCMg"' ]
    }
  },
  level: 'error',
  service: 'some-random-service',
  timestamp: '2024-01-04T11:14:08.957Z',
  label: 'validation'
}
{
  message: <ref *5> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 233,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 1,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/uploadHomework',
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/uploadHomework',
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            sync: false,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: false,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: clearRequestTimeout]
          },
          _eventsCount: 1,
          _maxListeners: undefined,
          socket: [Circular *1],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          headers: {
            'content-type': 'application/json',
            authorization: 'Bearer TkhOU1JYTlBia3g1',
            'user-agent': 'PostmanRuntime/7.35.0',
            accept: '*/*',
            'cache-control': 'no-cache',
            'postman-token': 'b4ab0caa-a588-4929-97f4-1f5b45a5ff63',
            host: 'localhost:8004',
            'accept-encoding': 'gzip, deflate, br',
            connection: 'keep-alive',
            'content-length': '4411',
            'correlation-id': '7b189440-aaf2-11ee-a055-938165dde1e1'
          },
          rawHeaders: [
            'Content-Type',
            'application/json',
            'Authorization',
            'Bearer TkhOU1JYTlBia3g1',
            'User-Agent',
            'PostmanRuntime/7.35.0',
            'Accept',
            '*/*',
            'Cache-Control',
            'no-cache',
            'Postman-Token',
            'b4ab0caa-a588-4929-97f4-1f5b45a5ff63',
            'Host',
            'localhost:8004',
            'Accept-Encoding',
            'gzip, deflate, br',
            'Connection',
            'keep-alive',
            'Content-Length',
            '4411'
          ],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '/uploadHomework?coll=TamKroConsulting&id=Wigdor&version=1.0.0&type=homework',
          method: 'POST',
          statusCode: null,
          statusMessage: null,
          client: [Circular *1],
          _consuming: true,
          _dumped: false,
          next: [Function: next],
          baseUrl: '/data/api-management/apis/v1',
          originalUrl: '/data/api-management/apis/v1/uploadHomework?coll=TamKroConsulting&id=Wigdor&version=1.0.0&type=homework',
          _parsedUrl: Url {
            protocol: null,
            slashes: null,
            auth: null,
            host: null,
            port: null,
            hostname: null,
            hash: null,
            search: '?coll=TamKroConsulting&id=Wigdor&version=1.0.0&type=homework',
            query: 'coll=TamKroConsulting&id=Wigdor&version=1.0.0&type=homework',
            pathname: '/uploadHomework',
            path: '/uploadHomework?coll=TamKroConsulting&id=Wigdor&version=1.0.0&type=homework',
            href: '/uploadHomework?coll=TamKroConsulting&id=Wigdor&version=1.0.0&type=homework',
            _raw: '/uploadHomework?coll=TamKroConsulting&id=Wigdor&version=1.0.0&type=homework'
          },
          params: {},
          query: {
            coll: 'TamKroConsulting',
            id: 'Wigdor',
            version: '1.0.0',
            type: 'homework',
            myEndpoint: 'uploadHomework'
          },
          res: [Circular *5],
          body: {
            id: 'Wigdor',
            version: '1.0.0',
            type: 'object',
            object: 'homework',
            homework: {
              userList: [
                {
                  Username: 'Seth1TestUser100@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Partner',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser101@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Attorney',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser102@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Paralegal/CM',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser103@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Financial',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser104@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'IT/Admin',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser105@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Partner',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser106@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Attorney',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser107@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Paralegal/CM',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser108@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Financial',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser109@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'IT/Admin',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser110@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Partner',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser111@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Attorney',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser112@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Paralegal/CM',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser113@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Financial',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser114@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'IT/Admin',
                  TimeZoneSidKey: 'America/New_York'
                }
              ]
            }
          },
          _body: true,
          length: undefined,
          getId: [Function (anonymous)],
          route: Route {
            path: '/uploadHomework',
            stack: [
              Layer {
                handle: [AsyncFunction: qpCheck],
                name: 'qpCheck',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                method: 'post'
              },
              Layer {
                handle: [AsyncFunction: postHomework],
                name: 'postHomework',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                method: 'post'
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                method: 'post'
              }
            ],
            methods: { post: true }
          },
          [Symbol(kCapture)]: false,
          [Symbol(RequestTimeout)]: undefined
        },
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *5],
      [Symbol(async_id_symbol)]: 194,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'HTTP/1.1 400 Bad Request\r\n' +
      'X-Powered-By: Express\r\n' +
      'correlation-id: 7b189440-aaf2-11ee-a055-938165dde1e1\r\n' +
      'Content-Type: application/json; charset=utf-8\r\n' +
      'Content-Length: 233\r\n' +
      'ETag: W/"e9-8gBU0HyeJQ+oebsV+0prnXgXxgs"\r\n' +
      'Date: Thu, 04 Jan 2024 11:14:51 GMT\r\n' +
      'Connection: keep-alive\r\n' +
      'Keep-Alive: timeout=5\r\n' +
      '\r\n',
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: <ref *6> IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
      _eventsCount: 1,
      _maxListeners: undefined,
      socket: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 194,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: {
        'content-type': 'application/json',
        authorization: 'Bearer TkhOU1JYTlBia3g1',
        'user-agent': 'PostmanRuntime/7.35.0',
        accept: '*/*',
        'cache-control': 'no-cache',
        'postman-token': 'b4ab0caa-a588-4929-97f4-1f5b45a5ff63',
        host: 'localhost:8004',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive',
        'content-length': '4411',
        'correlation-id': '7b189440-aaf2-11ee-a055-938165dde1e1'
      },
      rawHeaders: [
        'Content-Type',
        'application/json',
        'Authorization',
        'Bearer TkhOU1JYTlBia3g1',
        'User-Agent',
        'PostmanRuntime/7.35.0',
        'Accept',
        '*/*',
        'Cache-Control',
        'no-cache',
        'Postman-Token',
        'b4ab0caa-a588-4929-97f4-1f5b45a5ff63',
        'Host',
        'localhost:8004',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive',
        'Content-Length',
        '4411'
      ],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/uploadHomework?coll=TamKroConsulting&id=Wigdor&version=1.0.0&type=homework',
      method: 'POST',
      statusCode: null,
      statusMessage: null,
      client: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 194,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/data/api-management/apis/v1',
      originalUrl: '/data/api-management/apis/v1/uploadHomework?coll=TamKroConsulting&id=Wigdor&version=1.0.0&type=homework',
      _parsedUrl: Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: '?coll=TamKroConsulting&id=Wigdor&version=1.0.0&type=homework',
        query: 'coll=TamKroConsulting&id=Wigdor&version=1.0.0&type=homework',
        pathname: '/uploadHomework',
        path: '/uploadHomework?coll=TamKroConsulting&id=Wigdor&version=1.0.0&type=homework',
        href: '/uploadHomework?coll=TamKroConsulting&id=Wigdor&version=1.0.0&type=homework',
        _raw: '/uploadHomework?coll=TamKroConsulting&id=Wigdor&version=1.0.0&type=homework'
      },
      params: {},
      query: {
        coll: 'TamKroConsulting',
        id: 'Wigdor',
        version: '1.0.0',
        type: 'homework',
        myEndpoint: 'uploadHomework'
      },
      res: [Circular *5],
      body: {
        id: 'Wigdor',
        version: '1.0.0',
        type: 'object',
        object: 'homework',
        homework: {
          userList: [
            {
              Username: 'Seth1TestUser100@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Partner',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser101@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Attorney',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser102@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Paralegal/CM',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser103@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Financial',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser104@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'IT/Admin',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser105@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Partner',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser106@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Attorney',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser107@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Paralegal/CM',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser108@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Financial',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser109@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'IT/Admin',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser110@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Partner',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser111@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Attorney',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser112@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Paralegal/CM',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser113@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Financial',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser114@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'IT/Admin',
              TimeZoneSidKey: 'America/New_York'
            }
          ]
        }
      },
      _body: true,
      length: undefined,
      getId: [Function (anonymous)],
      route: Route {
        path: '/uploadHomework',
        stack: [
          Layer {
            handle: [AsyncFunction: qpCheck],
            name: 'qpCheck',
            params: undefined,
            path: undefined,
            keys: [],
            regexp: /^\/?$/i { fast_star: false, fast_slash: false },
            method: 'post'
          },
          Layer {
            handle: [AsyncFunction: postHomework],
            name: 'postHomework',
            params: undefined,
            path: undefined,
            keys: [],
            regexp: /^\/?$/i { fast_star: false, fast_slash: false },
            method: 'post'
          },
          Layer {
            handle: [Function (anonymous)],
            name: '<anonymous>',
            params: undefined,
            path: undefined,
            keys: [],
            regexp: /^\/?$/i { fast_star: false, fast_slash: false },
            method: 'post'
          }
        ],
        methods: { post: true }
      },
      [Symbol(kCapture)]: false,
      [Symbol(RequestTimeout)]: undefined
    },
    locals: [Object: null prototype] {},
    statusCode: 400,
    statusMessage: 'Bad Request',
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [ 'X-Powered-By', 'Express' ],
      'correlation-id': [ 'correlation-id', '7b189440-aaf2-11ee-a055-938165dde1e1' ],
      'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
      'content-length': [ 'Content-Length', '233' ],
      etag: [ 'ETag', 'W/"e9-8gBU0HyeJQ+oebsV+0prnXgXxgs"' ]
    }
  },
  level: 'error',
  service: 'some-random-service',
  timestamp: '2024-01-04T11:14:51.912Z',
  label: 'validation'
}
{
  message: <ref *5> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 235,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 1,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/uploadHomework',
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/uploadHomework',
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            sync: false,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: false,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: clearRequestTimeout]
          },
          _eventsCount: 1,
          _maxListeners: undefined,
          socket: [Circular *1],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          headers: {
            'content-type': 'application/json',
            authorization: 'Bearer TkhOU1JYTlBia3g1',
            'user-agent': 'PostmanRuntime/7.35.0',
            accept: '*/*',
            'cache-control': 'no-cache',
            'postman-token': 'b4591897-3ef3-4909-8f5c-a19e68ac2577',
            host: 'localhost:8004',
            'accept-encoding': 'gzip, deflate, br',
            connection: 'keep-alive',
            'content-length': '4411',
            'correlation-id': '9b8d1280-aaf4-11ee-ab8a-6915086fa756'
          },
          rawHeaders: [
            'Content-Type',
            'application/json',
            'Authorization',
            'Bearer TkhOU1JYTlBia3g1',
            'User-Agent',
            'PostmanRuntime/7.35.0',
            'Accept',
            '*/*',
            'Cache-Control',
            'no-cache',
            'Postman-Token',
            'b4591897-3ef3-4909-8f5c-a19e68ac2577',
            'Host',
            'localhost:8004',
            'Accept-Encoding',
            'gzip, deflate, br',
            'Connection',
            'keep-alive',
            'Content-Length',
            '4411'
          ],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
          method: 'POST',
          statusCode: null,
          statusMessage: null,
          client: [Circular *1],
          _consuming: true,
          _dumped: false,
          next: [Function: next],
          baseUrl: '/data/api-management/apis/v1',
          originalUrl: '/data/api-management/apis/v1/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
          _parsedUrl: Url {
            protocol: null,
            slashes: null,
            auth: null,
            host: null,
            port: null,
            hostname: null,
            hash: null,
            search: '?db=TamKroConsulting&coll=Wigdor&type=homework',
            query: 'db=TamKroConsulting&coll=Wigdor&type=homework',
            pathname: '/uploadHomework',
            path: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
            href: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
            _raw: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework'
          },
          params: {},
          query: {
            db: 'TamKroConsulting',
            coll: 'Wigdor',
            type: 'homework',
            myEndpoint: 'uploadHomework'
          },
          res: [Circular *5],
          body: {
            id: 'Wigdor',
            version: '1.0.0',
            type: 'object',
            object: 'homework',
            homework: {
              userList: [
                {
                  Username: 'Seth1TestUser100@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Partner',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser101@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Attorney',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser102@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Paralegal/CM',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser103@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Financial',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser104@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'IT/Admin',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser105@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Partner',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser106@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Attorney',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser107@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Paralegal/CM',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser108@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Financial',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser109@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'IT/Admin',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser110@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Partner',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser111@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Attorney',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser112@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Paralegal/CM',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser113@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Financial',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser114@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'IT/Admin',
                  TimeZoneSidKey: 'America/New_York'
                }
              ]
            }
          },
          _body: true,
          length: undefined,
          getId: [Function (anonymous)],
          route: Route {
            path: '/uploadHomework',
            stack: [
              Layer {
                handle: [AsyncFunction: postHomework],
                name: 'postHomework',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                method: 'post'
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                method: 'post'
              }
            ],
            methods: { post: true }
          },
          [Symbol(kCapture)]: false,
          [Symbol(RequestTimeout)]: undefined
        },
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *5],
      [Symbol(async_id_symbol)]: 160,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'HTTP/1.1 400 Bad Request\r\n' +
      'X-Powered-By: Express\r\n' +
      'correlation-id: 9b8d1280-aaf4-11ee-ab8a-6915086fa756\r\n' +
      'Content-Type: application/json; charset=utf-8\r\n' +
      'Content-Length: 235\r\n' +
      'ETag: W/"eb-oJKpk4BdUd2gMv9uEMQIi/yflhw"\r\n' +
      'Date: Thu, 04 Jan 2024 11:30:05 GMT\r\n' +
      'Connection: keep-alive\r\n' +
      'Keep-Alive: timeout=5\r\n' +
      '\r\n',
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: <ref *6> IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
      _eventsCount: 1,
      _maxListeners: undefined,
      socket: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 160,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: {
        'content-type': 'application/json',
        authorization: 'Bearer TkhOU1JYTlBia3g1',
        'user-agent': 'PostmanRuntime/7.35.0',
        accept: '*/*',
        'cache-control': 'no-cache',
        'postman-token': 'b4591897-3ef3-4909-8f5c-a19e68ac2577',
        host: 'localhost:8004',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive',
        'content-length': '4411',
        'correlation-id': '9b8d1280-aaf4-11ee-ab8a-6915086fa756'
      },
      rawHeaders: [
        'Content-Type',
        'application/json',
        'Authorization',
        'Bearer TkhOU1JYTlBia3g1',
        'User-Agent',
        'PostmanRuntime/7.35.0',
        'Accept',
        '*/*',
        'Cache-Control',
        'no-cache',
        'Postman-Token',
        'b4591897-3ef3-4909-8f5c-a19e68ac2577',
        'Host',
        'localhost:8004',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive',
        'Content-Length',
        '4411'
      ],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
      method: 'POST',
      statusCode: null,
      statusMessage: null,
      client: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 160,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/data/api-management/apis/v1',
      originalUrl: '/data/api-management/apis/v1/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
      _parsedUrl: Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: '?db=TamKroConsulting&coll=Wigdor&type=homework',
        query: 'db=TamKroConsulting&coll=Wigdor&type=homework',
        pathname: '/uploadHomework',
        path: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
        href: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
        _raw: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework'
      },
      params: {},
      query: {
        db: 'TamKroConsulting',
        coll: 'Wigdor',
        type: 'homework',
        myEndpoint: 'uploadHomework'
      },
      res: [Circular *5],
      body: {
        id: 'Wigdor',
        version: '1.0.0',
        type: 'object',
        object: 'homework',
        homework: {
          userList: [
            {
              Username: 'Seth1TestUser100@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Partner',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser101@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Attorney',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser102@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Paralegal/CM',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser103@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Financial',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser104@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'IT/Admin',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser105@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Partner',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser106@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Attorney',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser107@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Paralegal/CM',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser108@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Financial',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser109@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'IT/Admin',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser110@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Partner',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser111@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Attorney',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser112@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Paralegal/CM',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser113@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Financial',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser114@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'IT/Admin',
              TimeZoneSidKey: 'America/New_York'
            }
          ]
        }
      },
      _body: true,
      length: undefined,
      getId: [Function (anonymous)],
      route: Route {
        path: '/uploadHomework',
        stack: [
          Layer {
            handle: [AsyncFunction: postHomework],
            name: 'postHomework',
            params: undefined,
            path: undefined,
            keys: [],
            regexp: /^\/?$/i { fast_star: false, fast_slash: false },
            method: 'post'
          },
          Layer {
            handle: [Function (anonymous)],
            name: '<anonymous>',
            params: undefined,
            path: undefined,
            keys: [],
            regexp: /^\/?$/i { fast_star: false, fast_slash: false },
            method: 'post'
          }
        ],
        methods: { post: true }
      },
      [Symbol(kCapture)]: false,
      [Symbol(RequestTimeout)]: undefined
    },
    locals: [Object: null prototype] {},
    statusCode: 400,
    statusMessage: 'Bad Request',
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [ 'X-Powered-By', 'Express' ],
      'correlation-id': [ 'correlation-id', '9b8d1280-aaf4-11ee-ab8a-6915086fa756' ],
      'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
      'content-length': [ 'Content-Length', '235' ],
      etag: [ 'ETag', 'W/"eb-oJKpk4BdUd2gMv9uEMQIi/yflhw"' ]
    }
  },
  level: 'error',
  service: 'some-random-service',
  timestamp: '2024-01-04T11:30:05.366Z',
  label: 'validation'
}
{
  message: <ref *5> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 218,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 1,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/uploadHomework',
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/uploadHomework',
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            sync: false,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: false,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: clearRequestTimeout]
          },
          _eventsCount: 1,
          _maxListeners: undefined,
          socket: [Circular *1],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          headers: {
            'content-type': 'application/json',
            authorization: 'Bearer TkhOU1JYTlBia3g1',
            'user-agent': 'PostmanRuntime/7.35.0',
            accept: '*/*',
            'cache-control': 'no-cache',
            'postman-token': 'd8e12401-1d6b-48bd-9494-738d161c3100',
            host: 'localhost:8004',
            'accept-encoding': 'gzip, deflate, br',
            connection: 'keep-alive',
            'content-length': '4411',
            'correlation-id': 'ee08a470-aaf4-11ee-a5e4-df634585f9e3'
          },
          rawHeaders: [
            'Content-Type',
            'application/json',
            'Authorization',
            'Bearer TkhOU1JYTlBia3g1',
            'User-Agent',
            'PostmanRuntime/7.35.0',
            'Accept',
            '*/*',
            'Cache-Control',
            'no-cache',
            'Postman-Token',
            'd8e12401-1d6b-48bd-9494-738d161c3100',
            'Host',
            'localhost:8004',
            'Accept-Encoding',
            'gzip, deflate, br',
            'Connection',
            'keep-alive',
            'Content-Length',
            '4411'
          ],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
          method: 'POST',
          statusCode: null,
          statusMessage: null,
          client: [Circular *1],
          _consuming: true,
          _dumped: false,
          next: [Function: next],
          baseUrl: '/data/api-management/apis/v1',
          originalUrl: '/data/api-management/apis/v1/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
          _parsedUrl: Url {
            protocol: null,
            slashes: null,
            auth: null,
            host: null,
            port: null,
            hostname: null,
            hash: null,
            search: '?db=TamKroConsulting&coll=Wigdor&type=homework',
            query: 'db=TamKroConsulting&coll=Wigdor&type=homework',
            pathname: '/uploadHomework',
            path: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
            href: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
            _raw: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework'
          },
          params: {},
          query: {
            db: 'TamKroConsulting',
            coll: 'Wigdor',
            type: 'homework',
            myEndpoint: 'uploadHomework',
            homework: {
              id: 'Wigdor',
              version: '1.0.0',
              type: 'object',
              object: 'homework',
              homework: {
                userList: [
                  {
                    Username: 'Seth1TestUser100@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Partner',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser101@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Attorney',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser102@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Paralegal/CM',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser103@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Financial',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser104@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'IT/Admin',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser105@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Partner',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser106@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Attorney',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser107@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Paralegal/CM',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser108@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Financial',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser109@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'IT/Admin',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser110@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Partner',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser111@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Attorney',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser112@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Paralegal/CM',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser113@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Financial',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser114@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'IT/Admin',
                    TimeZoneSidKey: 'America/New_York'
                  }
                ]
              }
            }
          },
          res: [Circular *5],
          body: {
            id: 'Wigdor',
            version: '1.0.0',
            type: 'object',
            object: 'homework',
            homework: {
              userList: [
                {
                  Username: 'Seth1TestUser100@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Partner',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser101@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Attorney',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser102@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Paralegal/CM',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser103@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Financial',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser104@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'IT/Admin',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser105@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Partner',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser106@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Attorney',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser107@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Paralegal/CM',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser108@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Financial',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser109@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'IT/Admin',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser110@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Partner',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser111@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Attorney',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser112@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Paralegal/CM',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser113@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Financial',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser114@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'IT/Admin',
                  TimeZoneSidKey: 'America/New_York'
                }
              ]
            }
          },
          _body: true,
          length: undefined,
          getId: [Function (anonymous)],
          route: Route {
            path: '/uploadHomework',
            stack: [
              Layer {
                handle: [AsyncFunction: postHomework],
                name: 'postHomework',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                method: 'post'
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                method: 'post'
              }
            ],
            methods: { post: true }
          },
          [Symbol(kCapture)]: false,
          [Symbol(RequestTimeout)]: undefined
        },
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *5],
      [Symbol(async_id_symbol)]: 160,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'HTTP/1.1 400 Bad Request\r\n' +
      'X-Powered-By: Express\r\n' +
      'correlation-id: ee08a470-aaf4-11ee-a5e4-df634585f9e3\r\n' +
      'Content-Type: application/json; charset=utf-8\r\n' +
      'Content-Length: 218\r\n' +
      'ETag: W/"da-JraTVIEtlP1Jhpco4xC8fboMZj0"\r\n' +
      'Date: Thu, 04 Jan 2024 11:32:24 GMT\r\n' +
      'Connection: keep-alive\r\n' +
      'Keep-Alive: timeout=5\r\n' +
      '\r\n',
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: <ref *6> IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
      _eventsCount: 1,
      _maxListeners: undefined,
      socket: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 160,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: {
        'content-type': 'application/json',
        authorization: 'Bearer TkhOU1JYTlBia3g1',
        'user-agent': 'PostmanRuntime/7.35.0',
        accept: '*/*',
        'cache-control': 'no-cache',
        'postman-token': 'd8e12401-1d6b-48bd-9494-738d161c3100',
        host: 'localhost:8004',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive',
        'content-length': '4411',
        'correlation-id': 'ee08a470-aaf4-11ee-a5e4-df634585f9e3'
      },
      rawHeaders: [
        'Content-Type',
        'application/json',
        'Authorization',
        'Bearer TkhOU1JYTlBia3g1',
        'User-Agent',
        'PostmanRuntime/7.35.0',
        'Accept',
        '*/*',
        'Cache-Control',
        'no-cache',
        'Postman-Token',
        'd8e12401-1d6b-48bd-9494-738d161c3100',
        'Host',
        'localhost:8004',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive',
        'Content-Length',
        '4411'
      ],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
      method: 'POST',
      statusCode: null,
      statusMessage: null,
      client: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 160,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/data/api-management/apis/v1',
      originalUrl: '/data/api-management/apis/v1/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
      _parsedUrl: Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: '?db=TamKroConsulting&coll=Wigdor&type=homework',
        query: 'db=TamKroConsulting&coll=Wigdor&type=homework',
        pathname: '/uploadHomework',
        path: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
        href: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
        _raw: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework'
      },
      params: {},
      query: {
        db: 'TamKroConsulting',
        coll: 'Wigdor',
        type: 'homework',
        myEndpoint: 'uploadHomework',
        homework: {
          id: 'Wigdor',
          version: '1.0.0',
          type: 'object',
          object: 'homework',
          homework: {
            userList: [
              {
                Username: 'Seth1TestUser100@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Partner',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser101@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Attorney',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser102@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Paralegal/CM',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser103@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Financial',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser104@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'IT/Admin',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser105@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Partner',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser106@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Attorney',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser107@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Paralegal/CM',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser108@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Financial',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser109@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'IT/Admin',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser110@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Partner',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser111@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Attorney',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser112@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Paralegal/CM',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser113@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Financial',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser114@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'IT/Admin',
                TimeZoneSidKey: 'America/New_York'
              }
            ]
          }
        }
      },
      res: [Circular *5],
      body: {
        id: 'Wigdor',
        version: '1.0.0',
        type: 'object',
        object: 'homework',
        homework: {
          userList: [
            {
              Username: 'Seth1TestUser100@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Partner',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser101@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Attorney',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser102@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Paralegal/CM',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser103@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Financial',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser104@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'IT/Admin',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser105@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Partner',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser106@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Attorney',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser107@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Paralegal/CM',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser108@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Financial',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser109@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'IT/Admin',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser110@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Partner',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser111@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Attorney',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser112@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Paralegal/CM',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser113@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Financial',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser114@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'IT/Admin',
              TimeZoneSidKey: 'America/New_York'
            }
          ]
        }
      },
      _body: true,
      length: undefined,
      getId: [Function (anonymous)],
      route: Route {
        path: '/uploadHomework',
        stack: [
          Layer {
            handle: [AsyncFunction: postHomework],
            name: 'postHomework',
            params: undefined,
            path: undefined,
            keys: [],
            regexp: /^\/?$/i { fast_star: false, fast_slash: false },
            method: 'post'
          },
          Layer {
            handle: [Function (anonymous)],
            name: '<anonymous>',
            params: undefined,
            path: undefined,
            keys: [],
            regexp: /^\/?$/i { fast_star: false, fast_slash: false },
            method: 'post'
          }
        ],
        methods: { post: true }
      },
      [Symbol(kCapture)]: false,
      [Symbol(RequestTimeout)]: undefined
    },
    locals: [Object: null prototype] {},
    statusCode: 400,
    statusMessage: 'Bad Request',
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [ 'X-Powered-By', 'Express' ],
      'correlation-id': [ 'correlation-id', 'ee08a470-aaf4-11ee-a5e4-df634585f9e3' ],
      'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
      'content-length': [ 'Content-Length', '218' ],
      etag: [ 'ETag', 'W/"da-JraTVIEtlP1Jhpco4xC8fboMZj0"' ]
    }
  },
  level: 'error',
  service: 'some-random-service',
  timestamp: '2024-01-04T11:32:24.094Z',
  label: 'validation'
}
{
  message: <ref *5> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 218,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 1,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/uploadHomework',
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/uploadHomework',
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            sync: false,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: false,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: clearRequestTimeout]
          },
          _eventsCount: 1,
          _maxListeners: undefined,
          socket: [Circular *1],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          headers: {
            'content-type': 'application/json',
            authorization: 'Bearer TkhOU1JYTlBia3g1',
            'user-agent': 'PostmanRuntime/7.35.0',
            accept: '*/*',
            'cache-control': 'no-cache',
            'postman-token': 'afe52915-159d-4eb7-8e08-7341ac2f69d0',
            host: 'localhost:8004',
            'accept-encoding': 'gzip, deflate, br',
            connection: 'keep-alive',
            'content-length': '4411',
            'correlation-id': '80254660-aaf5-11ee-9cf3-d743d6c2d7a5'
          },
          rawHeaders: [
            'Content-Type',
            'application/json',
            'Authorization',
            'Bearer TkhOU1JYTlBia3g1',
            'User-Agent',
            'PostmanRuntime/7.35.0',
            'Accept',
            '*/*',
            'Cache-Control',
            'no-cache',
            'Postman-Token',
            'afe52915-159d-4eb7-8e08-7341ac2f69d0',
            'Host',
            'localhost:8004',
            'Accept-Encoding',
            'gzip, deflate, br',
            'Connection',
            'keep-alive',
            'Content-Length',
            '4411'
          ],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
          method: 'POST',
          statusCode: null,
          statusMessage: null,
          client: [Circular *1],
          _consuming: true,
          _dumped: false,
          next: [Function: next],
          baseUrl: '/data/api-management/apis/v1',
          originalUrl: '/data/api-management/apis/v1/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
          _parsedUrl: Url {
            protocol: null,
            slashes: null,
            auth: null,
            host: null,
            port: null,
            hostname: null,
            hash: null,
            search: '?db=TamKroConsulting&coll=Wigdor&type=homework',
            query: 'db=TamKroConsulting&coll=Wigdor&type=homework',
            pathname: '/uploadHomework',
            path: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
            href: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
            _raw: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework'
          },
          params: {},
          query: {
            db: 'TamKroConsulting',
            coll: 'Wigdor',
            type: 'homework',
            myEndpoint: 'uploadHomework',
            homework: {
              id: 'Wigdor',
              version: '1.0.0',
              type: 'object',
              object: 'homework',
              homework: {
                userList: [
                  {
                    Username: 'Seth1TestUser100@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Partner',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser101@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Attorney',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser102@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Paralegal/CM',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser103@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Financial',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser104@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'IT/Admin',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser105@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Partner',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser106@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Attorney',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser107@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Paralegal/CM',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser108@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Financial',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser109@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'IT/Admin',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser110@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Partner',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser111@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Attorney',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser112@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Paralegal/CM',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser113@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Financial',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser114@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'IT/Admin',
                    TimeZoneSidKey: 'America/New_York'
                  }
                ]
              }
            }
          },
          res: [Circular *5],
          body: {
            id: 'Wigdor',
            version: '1.0.0',
            type: 'object',
            object: 'homework',
            homework: {
              userList: [
                {
                  Username: 'Seth1TestUser100@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Partner',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser101@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Attorney',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser102@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Paralegal/CM',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser103@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Financial',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser104@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'IT/Admin',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser105@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Partner',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser106@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Attorney',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser107@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Paralegal/CM',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser108@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Financial',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser109@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'IT/Admin',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser110@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Partner',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser111@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Attorney',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser112@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Paralegal/CM',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser113@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Financial',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser114@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'IT/Admin',
                  TimeZoneSidKey: 'America/New_York'
                }
              ]
            }
          },
          _body: true,
          length: undefined,
          getId: [Function (anonymous)],
          route: Route {
            path: '/uploadHomework',
            stack: [
              Layer {
                handle: [AsyncFunction: postHomework],
                name: 'postHomework',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                method: 'post'
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                method: 'post'
              }
            ],
            methods: { post: true }
          },
          [Symbol(kCapture)]: false,
          [Symbol(RequestTimeout)]: undefined
        },
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *5],
      [Symbol(async_id_symbol)]: 160,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'HTTP/1.1 400 Bad Request\r\n' +
      'X-Powered-By: Express\r\n' +
      'correlation-id: 80254660-aaf5-11ee-9cf3-d743d6c2d7a5\r\n' +
      'Content-Type: application/json; charset=utf-8\r\n' +
      'Content-Length: 218\r\n' +
      'ETag: W/"da-CZPUEtVxxe/hej3XKz3XRAFBetk"\r\n' +
      'Date: Thu, 04 Jan 2024 11:36:29 GMT\r\n' +
      'Connection: keep-alive\r\n' +
      'Keep-Alive: timeout=5\r\n' +
      '\r\n',
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: <ref *6> IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
      _eventsCount: 1,
      _maxListeners: undefined,
      socket: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 160,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: {
        'content-type': 'application/json',
        authorization: 'Bearer TkhOU1JYTlBia3g1',
        'user-agent': 'PostmanRuntime/7.35.0',
        accept: '*/*',
        'cache-control': 'no-cache',
        'postman-token': 'afe52915-159d-4eb7-8e08-7341ac2f69d0',
        host: 'localhost:8004',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive',
        'content-length': '4411',
        'correlation-id': '80254660-aaf5-11ee-9cf3-d743d6c2d7a5'
      },
      rawHeaders: [
        'Content-Type',
        'application/json',
        'Authorization',
        'Bearer TkhOU1JYTlBia3g1',
        'User-Agent',
        'PostmanRuntime/7.35.0',
        'Accept',
        '*/*',
        'Cache-Control',
        'no-cache',
        'Postman-Token',
        'afe52915-159d-4eb7-8e08-7341ac2f69d0',
        'Host',
        'localhost:8004',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive',
        'Content-Length',
        '4411'
      ],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
      method: 'POST',
      statusCode: null,
      statusMessage: null,
      client: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 160,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/data/api-management/apis/v1',
      originalUrl: '/data/api-management/apis/v1/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
      _parsedUrl: Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: '?db=TamKroConsulting&coll=Wigdor&type=homework',
        query: 'db=TamKroConsulting&coll=Wigdor&type=homework',
        pathname: '/uploadHomework',
        path: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
        href: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
        _raw: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework'
      },
      params: {},
      query: {
        db: 'TamKroConsulting',
        coll: 'Wigdor',
        type: 'homework',
        myEndpoint: 'uploadHomework',
        homework: {
          id: 'Wigdor',
          version: '1.0.0',
          type: 'object',
          object: 'homework',
          homework: {
            userList: [
              {
                Username: 'Seth1TestUser100@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Partner',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser101@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Attorney',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser102@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Paralegal/CM',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser103@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Financial',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser104@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'IT/Admin',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser105@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Partner',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser106@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Attorney',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser107@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Paralegal/CM',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser108@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Financial',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser109@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'IT/Admin',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser110@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Partner',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser111@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Attorney',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser112@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Paralegal/CM',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser113@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Financial',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser114@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'IT/Admin',
                TimeZoneSidKey: 'America/New_York'
              }
            ]
          }
        }
      },
      res: [Circular *5],
      body: {
        id: 'Wigdor',
        version: '1.0.0',
        type: 'object',
        object: 'homework',
        homework: {
          userList: [
            {
              Username: 'Seth1TestUser100@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Partner',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser101@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Attorney',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser102@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Paralegal/CM',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser103@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Financial',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser104@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'IT/Admin',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser105@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Partner',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser106@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Attorney',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser107@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Paralegal/CM',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser108@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Financial',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser109@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'IT/Admin',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser110@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Partner',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser111@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Attorney',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser112@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Paralegal/CM',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser113@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Financial',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser114@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'IT/Admin',
              TimeZoneSidKey: 'America/New_York'
            }
          ]
        }
      },
      _body: true,
      length: undefined,
      getId: [Function (anonymous)],
      route: Route {
        path: '/uploadHomework',
        stack: [
          Layer {
            handle: [AsyncFunction: postHomework],
            name: 'postHomework',
            params: undefined,
            path: undefined,
            keys: [],
            regexp: /^\/?$/i { fast_star: false, fast_slash: false },
            method: 'post'
          },
          Layer {
            handle: [Function (anonymous)],
            name: '<anonymous>',
            params: undefined,
            path: undefined,
            keys: [],
            regexp: /^\/?$/i { fast_star: false, fast_slash: false },
            method: 'post'
          }
        ],
        methods: { post: true }
      },
      [Symbol(kCapture)]: false,
      [Symbol(RequestTimeout)]: undefined
    },
    locals: [Object: null prototype] {},
    statusCode: 400,
    statusMessage: 'Bad Request',
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [ 'X-Powered-By', 'Express' ],
      'correlation-id': [ 'correlation-id', '80254660-aaf5-11ee-9cf3-d743d6c2d7a5' ],
      'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
      'content-length': [ 'Content-Length', '218' ],
      etag: [ 'ETag', 'W/"da-CZPUEtVxxe/hej3XKz3XRAFBetk"' ]
    }
  },
  level: 'error',
  service: 'some-random-service',
  timestamp: '2024-01-04T11:36:29.194Z',
  label: 'validation'
}
{
  message: <ref *5> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 218,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 1,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/uploadHomework',
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/uploadHomework',
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            sync: false,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: false,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: clearRequestTimeout]
          },
          _eventsCount: 1,
          _maxListeners: undefined,
          socket: [Circular *1],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          headers: {
            'content-type': 'application/json',
            authorization: 'Bearer TkhOU1JYTlBia3g1',
            'user-agent': 'PostmanRuntime/7.35.0',
            accept: '*/*',
            'cache-control': 'no-cache',
            'postman-token': 'e82349bd-8492-4abd-9a03-be62dcad918d',
            host: 'localhost:8004',
            'accept-encoding': 'gzip, deflate, br',
            connection: 'keep-alive',
            'content-length': '4411',
            'correlation-id': '995db9f0-aaf5-11ee-be76-195a31259fef'
          },
          rawHeaders: [
            'Content-Type',
            'application/json',
            'Authorization',
            'Bearer TkhOU1JYTlBia3g1',
            'User-Agent',
            'PostmanRuntime/7.35.0',
            'Accept',
            '*/*',
            'Cache-Control',
            'no-cache',
            'Postman-Token',
            'e82349bd-8492-4abd-9a03-be62dcad918d',
            'Host',
            'localhost:8004',
            'Accept-Encoding',
            'gzip, deflate, br',
            'Connection',
            'keep-alive',
            'Content-Length',
            '4411'
          ],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
          method: 'POST',
          statusCode: null,
          statusMessage: null,
          client: [Circular *1],
          _consuming: true,
          _dumped: false,
          next: [Function: next],
          baseUrl: '/data/api-management/apis/v1',
          originalUrl: '/data/api-management/apis/v1/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
          _parsedUrl: Url {
            protocol: null,
            slashes: null,
            auth: null,
            host: null,
            port: null,
            hostname: null,
            hash: null,
            search: '?db=TamKroConsulting&coll=Wigdor&type=homework',
            query: 'db=TamKroConsulting&coll=Wigdor&type=homework',
            pathname: '/uploadHomework',
            path: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
            href: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
            _raw: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework'
          },
          params: {},
          query: {
            db: 'TamKroConsulting',
            coll: 'Wigdor',
            type: 'homework',
            myEndpoint: 'uploadHomework',
            homework: {
              id: 'Wigdor',
              version: '1.0.0',
              type: 'object',
              object: 'homework',
              homework: {
                userList: [
                  {
                    Username: 'Seth1TestUser100@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Partner',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser101@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Attorney',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser102@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Paralegal/CM',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser103@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Financial',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser104@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'IT/Admin',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser105@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Partner',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser106@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Attorney',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser107@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Paralegal/CM',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser108@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Financial',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser109@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'IT/Admin',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser110@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Partner',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser111@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Attorney',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser112@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Paralegal/CM',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser113@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Financial',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser114@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'IT/Admin',
                    TimeZoneSidKey: 'America/New_York'
                  }
                ]
              }
            }
          },
          res: [Circular *5],
          body: {
            id: 'Wigdor',
            version: '1.0.0',
            type: 'object',
            object: 'homework',
            homework: {
              userList: [
                {
                  Username: 'Seth1TestUser100@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Partner',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser101@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Attorney',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser102@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Paralegal/CM',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser103@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Financial',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser104@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'IT/Admin',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser105@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Partner',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser106@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Attorney',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser107@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Paralegal/CM',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser108@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Financial',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser109@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'IT/Admin',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser110@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Partner',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser111@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Attorney',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser112@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Paralegal/CM',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser113@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Financial',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser114@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'IT/Admin',
                  TimeZoneSidKey: 'America/New_York'
                }
              ]
            }
          },
          _body: true,
          length: undefined,
          getId: [Function (anonymous)],
          route: Route {
            path: '/uploadHomework',
            stack: [
              Layer {
                handle: [AsyncFunction: postHomework],
                name: 'postHomework',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                method: 'post'
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                method: 'post'
              }
            ],
            methods: { post: true }
          },
          [Symbol(kCapture)]: false,
          [Symbol(RequestTimeout)]: undefined
        },
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *5],
      [Symbol(async_id_symbol)]: 164,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'HTTP/1.1 400 Bad Request\r\n' +
      'X-Powered-By: Express\r\n' +
      'correlation-id: 995db9f0-aaf5-11ee-be76-195a31259fef\r\n' +
      'Content-Type: application/json; charset=utf-8\r\n' +
      'Content-Length: 218\r\n' +
      'ETag: W/"da-mwEv9/V4WMzYus/ACQN7il/5Fkk"\r\n' +
      'Date: Thu, 04 Jan 2024 11:37:11 GMT\r\n' +
      'Connection: keep-alive\r\n' +
      'Keep-Alive: timeout=5\r\n' +
      '\r\n',
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: <ref *6> IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
      _eventsCount: 1,
      _maxListeners: undefined,
      socket: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 164,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: {
        'content-type': 'application/json',
        authorization: 'Bearer TkhOU1JYTlBia3g1',
        'user-agent': 'PostmanRuntime/7.35.0',
        accept: '*/*',
        'cache-control': 'no-cache',
        'postman-token': 'e82349bd-8492-4abd-9a03-be62dcad918d',
        host: 'localhost:8004',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive',
        'content-length': '4411',
        'correlation-id': '995db9f0-aaf5-11ee-be76-195a31259fef'
      },
      rawHeaders: [
        'Content-Type',
        'application/json',
        'Authorization',
        'Bearer TkhOU1JYTlBia3g1',
        'User-Agent',
        'PostmanRuntime/7.35.0',
        'Accept',
        '*/*',
        'Cache-Control',
        'no-cache',
        'Postman-Token',
        'e82349bd-8492-4abd-9a03-be62dcad918d',
        'Host',
        'localhost:8004',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive',
        'Content-Length',
        '4411'
      ],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
      method: 'POST',
      statusCode: null,
      statusMessage: null,
      client: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 164,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/data/api-management/apis/v1',
      originalUrl: '/data/api-management/apis/v1/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
      _parsedUrl: Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: '?db=TamKroConsulting&coll=Wigdor&type=homework',
        query: 'db=TamKroConsulting&coll=Wigdor&type=homework',
        pathname: '/uploadHomework',
        path: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
        href: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
        _raw: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework'
      },
      params: {},
      query: {
        db: 'TamKroConsulting',
        coll: 'Wigdor',
        type: 'homework',
        myEndpoint: 'uploadHomework',
        homework: {
          id: 'Wigdor',
          version: '1.0.0',
          type: 'object',
          object: 'homework',
          homework: {
            userList: [
              {
                Username: 'Seth1TestUser100@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Partner',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser101@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Attorney',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser102@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Paralegal/CM',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser103@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Financial',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser104@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'IT/Admin',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser105@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Partner',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser106@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Attorney',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser107@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Paralegal/CM',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser108@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Financial',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser109@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'IT/Admin',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser110@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Partner',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser111@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Attorney',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser112@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Paralegal/CM',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser113@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Financial',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser114@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'IT/Admin',
                TimeZoneSidKey: 'America/New_York'
              }
            ]
          }
        }
      },
      res: [Circular *5],
      body: {
        id: 'Wigdor',
        version: '1.0.0',
        type: 'object',
        object: 'homework',
        homework: {
          userList: [
            {
              Username: 'Seth1TestUser100@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Partner',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser101@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Attorney',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser102@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Paralegal/CM',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser103@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Financial',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser104@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'IT/Admin',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser105@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Partner',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser106@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Attorney',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser107@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Paralegal/CM',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser108@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Financial',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser109@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'IT/Admin',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser110@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Partner',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser111@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Attorney',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser112@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Paralegal/CM',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser113@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Financial',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser114@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'IT/Admin',
              TimeZoneSidKey: 'America/New_York'
            }
          ]
        }
      },
      _body: true,
      length: undefined,
      getId: [Function (anonymous)],
      route: Route {
        path: '/uploadHomework',
        stack: [
          Layer {
            handle: [AsyncFunction: postHomework],
            name: 'postHomework',
            params: undefined,
            path: undefined,
            keys: [],
            regexp: /^\/?$/i { fast_star: false, fast_slash: false },
            method: 'post'
          },
          Layer {
            handle: [Function (anonymous)],
            name: '<anonymous>',
            params: undefined,
            path: undefined,
            keys: [],
            regexp: /^\/?$/i { fast_star: false, fast_slash: false },
            method: 'post'
          }
        ],
        methods: { post: true }
      },
      [Symbol(kCapture)]: false,
      [Symbol(RequestTimeout)]: undefined
    },
    locals: [Object: null prototype] {},
    statusCode: 400,
    statusMessage: 'Bad Request',
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [ 'X-Powered-By', 'Express' ],
      'correlation-id': [ 'correlation-id', '995db9f0-aaf5-11ee-be76-195a31259fef' ],
      'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
      'content-length': [ 'Content-Length', '218' ],
      etag: [ 'ETag', 'W/"da-mwEv9/V4WMzYus/ACQN7il/5Fkk"' ]
    }
  },
  level: 'error',
  service: 'some-random-service',
  timestamp: '2024-01-04T11:37:11.485Z',
  label: 'validation'
}
{
  message: <ref *5> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 218,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 1,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/uploadHomework',
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/uploadHomework',
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            sync: false,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: false,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: clearRequestTimeout]
          },
          _eventsCount: 1,
          _maxListeners: undefined,
          socket: [Circular *1],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          headers: {
            'content-type': 'application/json',
            authorization: 'Bearer TkhOU1JYTlBia3g1',
            'user-agent': 'PostmanRuntime/7.35.0',
            accept: '*/*',
            'cache-control': 'no-cache',
            'postman-token': '1fcd8e30-41d9-43ad-b088-24b4096f2bed',
            host: 'localhost:8004',
            'accept-encoding': 'gzip, deflate, br',
            connection: 'keep-alive',
            'content-length': '4411',
            'correlation-id': 'ab65a9a0-aaf5-11ee-8b7b-5dafcf837758'
          },
          rawHeaders: [
            'Content-Type',
            'application/json',
            'Authorization',
            'Bearer TkhOU1JYTlBia3g1',
            'User-Agent',
            'PostmanRuntime/7.35.0',
            'Accept',
            '*/*',
            'Cache-Control',
            'no-cache',
            'Postman-Token',
            '1fcd8e30-41d9-43ad-b088-24b4096f2bed',
            'Host',
            'localhost:8004',
            'Accept-Encoding',
            'gzip, deflate, br',
            'Connection',
            'keep-alive',
            'Content-Length',
            '4411'
          ],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
          method: 'POST',
          statusCode: null,
          statusMessage: null,
          client: [Circular *1],
          _consuming: true,
          _dumped: false,
          next: [Function: next],
          baseUrl: '/data/api-management/apis/v1',
          originalUrl: '/data/api-management/apis/v1/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
          _parsedUrl: Url {
            protocol: null,
            slashes: null,
            auth: null,
            host: null,
            port: null,
            hostname: null,
            hash: null,
            search: '?db=TamKroConsulting&coll=Wigdor&type=homework',
            query: 'db=TamKroConsulting&coll=Wigdor&type=homework',
            pathname: '/uploadHomework',
            path: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
            href: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
            _raw: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework'
          },
          params: {},
          query: {
            db: 'TamKroConsulting',
            coll: 'Wigdor',
            type: 'homework',
            myEndpoint: 'uploadHomework',
            homework: {
              id: 'Wigdor',
              version: '1.0.0',
              type: 'object',
              object: 'homework',
              homework: {
                userList: [
                  {
                    Username: 'Seth1TestUser100@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Partner',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser101@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Attorney',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser102@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Paralegal/CM',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser103@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Financial',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser104@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'IT/Admin',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser105@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Partner',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser106@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Attorney',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser107@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Paralegal/CM',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser108@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Financial',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser109@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'IT/Admin',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser110@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Partner',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser111@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Attorney',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser112@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Paralegal/CM',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser113@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Financial',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser114@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'IT/Admin',
                    TimeZoneSidKey: 'America/New_York'
                  }
                ]
              }
            }
          },
          res: [Circular *5],
          body: {
            id: 'Wigdor',
            version: '1.0.0',
            type: 'object',
            object: 'homework',
            homework: {
              userList: [
                {
                  Username: 'Seth1TestUser100@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Partner',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser101@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Attorney',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser102@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Paralegal/CM',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser103@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Financial',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser104@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'IT/Admin',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser105@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Partner',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser106@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Attorney',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser107@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Paralegal/CM',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser108@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Financial',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser109@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'IT/Admin',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser110@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Partner',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser111@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Attorney',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser112@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Paralegal/CM',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser113@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Financial',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser114@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'IT/Admin',
                  TimeZoneSidKey: 'America/New_York'
                }
              ]
            }
          },
          _body: true,
          length: undefined,
          getId: [Function (anonymous)],
          route: Route {
            path: '/uploadHomework',
            stack: [
              Layer {
                handle: [AsyncFunction: postHomework],
                name: 'postHomework',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                method: 'post'
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                method: 'post'
              }
            ],
            methods: { post: true }
          },
          [Symbol(kCapture)]: false,
          [Symbol(RequestTimeout)]: undefined
        },
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *5],
      [Symbol(async_id_symbol)]: 160,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'HTTP/1.1 400 Bad Request\r\n' +
      'X-Powered-By: Express\r\n' +
      'correlation-id: ab65a9a0-aaf5-11ee-8b7b-5dafcf837758\r\n' +
      'Content-Type: application/json; charset=utf-8\r\n' +
      'Content-Length: 218\r\n' +
      'ETag: W/"da-U0BTBe7dsjsR0MHLWbvuqXBI9uY"\r\n' +
      'Date: Thu, 04 Jan 2024 11:37:41 GMT\r\n' +
      'Connection: keep-alive\r\n' +
      'Keep-Alive: timeout=5\r\n' +
      '\r\n',
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: <ref *6> IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
      _eventsCount: 1,
      _maxListeners: undefined,
      socket: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 160,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: {
        'content-type': 'application/json',
        authorization: 'Bearer TkhOU1JYTlBia3g1',
        'user-agent': 'PostmanRuntime/7.35.0',
        accept: '*/*',
        'cache-control': 'no-cache',
        'postman-token': '1fcd8e30-41d9-43ad-b088-24b4096f2bed',
        host: 'localhost:8004',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive',
        'content-length': '4411',
        'correlation-id': 'ab65a9a0-aaf5-11ee-8b7b-5dafcf837758'
      },
      rawHeaders: [
        'Content-Type',
        'application/json',
        'Authorization',
        'Bearer TkhOU1JYTlBia3g1',
        'User-Agent',
        'PostmanRuntime/7.35.0',
        'Accept',
        '*/*',
        'Cache-Control',
        'no-cache',
        'Postman-Token',
        '1fcd8e30-41d9-43ad-b088-24b4096f2bed',
        'Host',
        'localhost:8004',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive',
        'Content-Length',
        '4411'
      ],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
      method: 'POST',
      statusCode: null,
      statusMessage: null,
      client: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 160,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/data/api-management/apis/v1',
      originalUrl: '/data/api-management/apis/v1/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
      _parsedUrl: Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: '?db=TamKroConsulting&coll=Wigdor&type=homework',
        query: 'db=TamKroConsulting&coll=Wigdor&type=homework',
        pathname: '/uploadHomework',
        path: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
        href: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
        _raw: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework'
      },
      params: {},
      query: {
        db: 'TamKroConsulting',
        coll: 'Wigdor',
        type: 'homework',
        myEndpoint: 'uploadHomework',
        homework: {
          id: 'Wigdor',
          version: '1.0.0',
          type: 'object',
          object: 'homework',
          homework: {
            userList: [
              {
                Username: 'Seth1TestUser100@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Partner',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser101@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Attorney',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser102@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Paralegal/CM',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser103@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Financial',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser104@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'IT/Admin',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser105@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Partner',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser106@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Attorney',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser107@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Paralegal/CM',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser108@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Financial',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser109@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'IT/Admin',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser110@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Partner',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser111@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Attorney',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser112@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Paralegal/CM',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser113@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Financial',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser114@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'IT/Admin',
                TimeZoneSidKey: 'America/New_York'
              }
            ]
          }
        }
      },
      res: [Circular *5],
      body: {
        id: 'Wigdor',
        version: '1.0.0',
        type: 'object',
        object: 'homework',
        homework: {
          userList: [
            {
              Username: 'Seth1TestUser100@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Partner',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser101@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Attorney',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser102@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Paralegal/CM',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser103@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Financial',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser104@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'IT/Admin',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser105@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Partner',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser106@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Attorney',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser107@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Paralegal/CM',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser108@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Financial',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser109@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'IT/Admin',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser110@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Partner',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser111@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Attorney',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser112@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Paralegal/CM',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser113@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Financial',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser114@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'IT/Admin',
              TimeZoneSidKey: 'America/New_York'
            }
          ]
        }
      },
      _body: true,
      length: undefined,
      getId: [Function (anonymous)],
      route: Route {
        path: '/uploadHomework',
        stack: [
          Layer {
            handle: [AsyncFunction: postHomework],
            name: 'postHomework',
            params: undefined,
            path: undefined,
            keys: [],
            regexp: /^\/?$/i { fast_star: false, fast_slash: false },
            method: 'post'
          },
          Layer {
            handle: [Function (anonymous)],
            name: '<anonymous>',
            params: undefined,
            path: undefined,
            keys: [],
            regexp: /^\/?$/i { fast_star: false, fast_slash: false },
            method: 'post'
          }
        ],
        methods: { post: true }
      },
      [Symbol(kCapture)]: false,
      [Symbol(RequestTimeout)]: undefined
    },
    locals: [Object: null prototype] {},
    statusCode: 400,
    statusMessage: 'Bad Request',
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [ 'X-Powered-By', 'Express' ],
      'correlation-id': [ 'correlation-id', 'ab65a9a0-aaf5-11ee-8b7b-5dafcf837758' ],
      'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
      'content-length': [ 'Content-Length', '218' ],
      etag: [ 'ETag', 'W/"da-U0BTBe7dsjsR0MHLWbvuqXBI9uY"' ]
    }
  },
  level: 'error',
  service: 'some-random-service',
  timestamp: '2024-01-04T11:37:41.740Z',
  label: 'validation'
}
{
  message: <ref *5> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 222,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 1,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/uploadHomework',
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: qpCheck],
                              name: 'qpCheck',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/uploadHomework',
                        keys: [],
                        regexp: /^\/uploadHomework\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/uploadHomework',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: postHomework],
                              name: 'postHomework',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/activateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/activateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: activateUsers],
                              name: 'activateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/deactivateUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/deactivateUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: deactivateUsers],
                              name: 'deactivateUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 148
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            sync: false,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: false,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: clearRequestTimeout]
          },
          _eventsCount: 1,
          _maxListeners: undefined,
          socket: [Circular *1],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          headers: {
            'content-type': 'application/json',
            authorization: 'Bearer TkhOU1JYTlBia3g1',
            'user-agent': 'PostmanRuntime/7.35.0',
            accept: '*/*',
            'cache-control': 'no-cache',
            'postman-token': 'cbfddbc9-d998-465b-9f3d-05e4bb883ee1',
            host: 'localhost:8004',
            'accept-encoding': 'gzip, deflate, br',
            connection: 'keep-alive',
            'content-length': '4411',
            'correlation-id': 'c7d76ee0-aaf8-11ee-bbb8-6f147ce0b6b4'
          },
          rawHeaders: [
            'Content-Type',
            'application/json',
            'Authorization',
            'Bearer TkhOU1JYTlBia3g1',
            'User-Agent',
            'PostmanRuntime/7.35.0',
            'Accept',
            '*/*',
            'Cache-Control',
            'no-cache',
            'Postman-Token',
            'cbfddbc9-d998-465b-9f3d-05e4bb883ee1',
            'Host',
            'localhost:8004',
            'Accept-Encoding',
            'gzip, deflate, br',
            'Connection',
            'keep-alive',
            'Content-Length',
            '4411'
          ],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
          method: 'POST',
          statusCode: null,
          statusMessage: null,
          client: [Circular *1],
          _consuming: true,
          _dumped: false,
          next: [Function: next],
          baseUrl: '/data/api-management/apis/v1',
          originalUrl: '/data/api-management/apis/v1/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
          _parsedUrl: Url {
            protocol: null,
            slashes: null,
            auth: null,
            host: null,
            port: null,
            hostname: null,
            hash: null,
            search: '?db=TamKroConsulting&coll=Wigdor&type=homework',
            query: 'db=TamKroConsulting&coll=Wigdor&type=homework',
            pathname: '/uploadHomework',
            path: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
            href: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
            _raw: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework'
          },
          params: {},
          query: {
            db: 'TamKroConsulting',
            coll: 'Wigdor',
            type: {
              id: 'Wigdor',
              version: '1.0.0',
              type: 'object',
              object: 'homework',
              homework: {
                userList: [
                  {
                    Username: 'Seth1TestUser100@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Partner',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser101@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Attorney',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser102@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Paralegal/CM',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser103@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Financial',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser104@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'IT/Admin',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser105@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Partner',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser106@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Attorney',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser107@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Paralegal/CM',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser108@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Financial',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser109@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'IT/Admin',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser110@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Partner',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser111@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Attorney',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser112@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Paralegal/CM',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser113@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'Financial',
                    TimeZoneSidKey: 'America/New_York'
                  },
                  {
                    Username: 'Seth1TestUser114@cmentor.com',
                    Email: 'tammi@cmentor.com',
                    Alias: 'TammiTst',
                    LastName: 'Krobert',
                    FirstName: 'Tammi',
                    ProfileId: 'IT/Admin',
                    TimeZoneSidKey: 'America/New_York'
                  }
                ]
              },
              date: 2024-01-04T11:59:57.927Z,
              _id: new ObjectId("65969dbdee48d537abca7253")
            },
            myEndpoint: 'uploadHomework'
          },
          res: [Circular *5],
          body: {
            id: 'Wigdor',
            version: '1.0.0',
            type: 'object',
            object: 'homework',
            homework: {
              userList: [
                {
                  Username: 'Seth1TestUser100@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Partner',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser101@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Attorney',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser102@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Paralegal/CM',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser103@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Financial',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser104@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'IT/Admin',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser105@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Partner',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser106@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Attorney',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser107@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Paralegal/CM',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser108@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Financial',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser109@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'IT/Admin',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser110@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Partner',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser111@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Attorney',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser112@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Paralegal/CM',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser113@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'Financial',
                  TimeZoneSidKey: 'America/New_York'
                },
                {
                  Username: 'Seth1TestUser114@cmentor.com',
                  Email: 'tammi@cmentor.com',
                  Alias: 'TammiTst',
                  LastName: 'Krobert',
                  FirstName: 'Tammi',
                  ProfileId: 'IT/Admin',
                  TimeZoneSidKey: 'America/New_York'
                }
              ]
            },
            date: 2024-01-04T11:59:57.927Z,
            _id: new ObjectId("65969dbdee48d537abca7253")
          },
          _body: true,
          length: undefined,
          getId: [Function (anonymous)],
          route: Route {
            path: '/uploadHomework',
            stack: [
              Layer {
                handle: [AsyncFunction: postHomework],
                name: 'postHomework',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                method: 'post'
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                method: 'post'
              }
            ],
            methods: { post: true }
          },
          [Symbol(kCapture)]: false,
          [Symbol(RequestTimeout)]: undefined
        },
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *5],
      [Symbol(async_id_symbol)]: 160,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'HTTP/1.1 400 Bad Request\r\n' +
      'X-Powered-By: Express\r\n' +
      'correlation-id: c7d76ee0-aaf8-11ee-bbb8-6f147ce0b6b4\r\n' +
      'Content-Type: application/json; charset=utf-8\r\n' +
      'Content-Length: 222\r\n' +
      'ETag: W/"de-U7FuLovd6n3elWhYeGr5mv3b27Y"\r\n' +
      'Date: Thu, 04 Jan 2024 11:59:57 GMT\r\n' +
      'Connection: keep-alive\r\n' +
      'Keep-Alive: timeout=5\r\n' +
      '\r\n',
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: <ref *6> IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
      _eventsCount: 1,
      _maxListeners: undefined,
      socket: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 160,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: {
        'content-type': 'application/json',
        authorization: 'Bearer TkhOU1JYTlBia3g1',
        'user-agent': 'PostmanRuntime/7.35.0',
        accept: '*/*',
        'cache-control': 'no-cache',
        'postman-token': 'cbfddbc9-d998-465b-9f3d-05e4bb883ee1',
        host: 'localhost:8004',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive',
        'content-length': '4411',
        'correlation-id': 'c7d76ee0-aaf8-11ee-bbb8-6f147ce0b6b4'
      },
      rawHeaders: [
        'Content-Type',
        'application/json',
        'Authorization',
        'Bearer TkhOU1JYTlBia3g1',
        'User-Agent',
        'PostmanRuntime/7.35.0',
        'Accept',
        '*/*',
        'Cache-Control',
        'no-cache',
        'Postman-Token',
        'cbfddbc9-d998-465b-9f3d-05e4bb883ee1',
        'Host',
        'localhost:8004',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive',
        'Content-Length',
        '4411'
      ],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
      method: 'POST',
      statusCode: null,
      statusMessage: null,
      client: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 1,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Seth0\\gits\\Salesforce_Tests\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: qpCheck],
                                name: 'qpCheck',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/uploadHomework',
                          keys: [],
                          regexp: /^\/uploadHomework\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/uploadHomework',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: postHomework],
                                name: 'postHomework',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/activateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/activateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: activateUsers],
                                name: 'activateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/deactivateUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/deactivateUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: deactivateUsers],
                                name: 'deactivateUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 148
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 160,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/data/api-management/apis/v1',
      originalUrl: '/data/api-management/apis/v1/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
      _parsedUrl: Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: '?db=TamKroConsulting&coll=Wigdor&type=homework',
        query: 'db=TamKroConsulting&coll=Wigdor&type=homework',
        pathname: '/uploadHomework',
        path: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
        href: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework',
        _raw: '/uploadHomework?db=TamKroConsulting&coll=Wigdor&type=homework'
      },
      params: {},
      query: {
        db: 'TamKroConsulting',
        coll: 'Wigdor',
        type: {
          id: 'Wigdor',
          version: '1.0.0',
          type: 'object',
          object: 'homework',
          homework: {
            userList: [
              {
                Username: 'Seth1TestUser100@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Partner',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser101@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Attorney',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser102@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Paralegal/CM',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser103@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Financial',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser104@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'IT/Admin',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser105@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Partner',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser106@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Attorney',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser107@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Paralegal/CM',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser108@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Financial',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser109@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'IT/Admin',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser110@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Partner',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser111@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Attorney',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser112@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Paralegal/CM',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser113@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'Financial',
                TimeZoneSidKey: 'America/New_York'
              },
              {
                Username: 'Seth1TestUser114@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: 'IT/Admin',
                TimeZoneSidKey: 'America/New_York'
              }
            ]
          },
          date: 2024-01-04T11:59:57.927Z,
          _id: new ObjectId("65969dbdee48d537abca7253")
        },
        myEndpoint: 'uploadHomework'
      },
      res: [Circular *5],
      body: {
        id: 'Wigdor',
        version: '1.0.0',
        type: 'object',
        object: 'homework',
        homework: {
          userList: [
            {
              Username: 'Seth1TestUser100@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Partner',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser101@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Attorney',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser102@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Paralegal/CM',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser103@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Financial',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser104@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'IT/Admin',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser105@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Partner',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser106@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Attorney',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser107@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Paralegal/CM',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser108@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Financial',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser109@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'IT/Admin',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser110@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Partner',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser111@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Attorney',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser112@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Paralegal/CM',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser113@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'Financial',
              TimeZoneSidKey: 'America/New_York'
            },
            {
              Username: 'Seth1TestUser114@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: 'IT/Admin',
              TimeZoneSidKey: 'America/New_York'
            }
          ]
        },
        date: 2024-01-04T11:59:57.927Z,
        _id: new ObjectId("65969dbdee48d537abca7253")
      },
      _body: true,
      length: undefined,
      getId: [Function (anonymous)],
      route: Route {
        path: '/uploadHomework',
        stack: [
          Layer {
            handle: [AsyncFunction: postHomework],
            name: 'postHomework',
            params: undefined,
            path: undefined,
            keys: [],
            regexp: /^\/?$/i { fast_star: false, fast_slash: false },
            method: 'post'
          },
          Layer {
            handle: [Function (anonymous)],
            name: '<anonymous>',
            params: undefined,
            path: undefined,
            keys: [],
            regexp: /^\/?$/i { fast_star: false, fast_slash: false },
            method: 'post'
          }
        ],
        methods: { post: true }
      },
      [Symbol(kCapture)]: false,
      [Symbol(RequestTimeout)]: undefined
    },
    locals: [Object: null prototype] {},
    statusCode: 400,
    statusMessage: 'Bad Request',
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [ 'X-Powered-By', 'Express' ],
      'correlation-id': [ 'correlation-id', 'c7d76ee0-aaf8-11ee-bbb8-6f147ce0b6b4' ],
      'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
      'content-length': [ 'Content-Length', '222' ],
      etag: [ 'ETag', 'W/"de-U7FuLovd6n3elWhYeGr5mv3b27Y"' ]
    }
  },
  level: 'error',
  service: 'some-random-service',
  timestamp: '2024-01-04T11:59:57.984Z',
  label: 'validation'
}
