{
  message: 'Received a POST request for /data/api-management/apis/v1/getProfileIds',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T13:50:32.170Z',
  label: 'validation'
}
{
  message: 'No correlation-id found creating new correlation-id header of: 101a69d0-2572-11ee-ad52-994b84cdb6e4',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T13:50:32.173Z',
  label: 'validation'
}
{
  message: <ref *5> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 213,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: qpCheck],
                        name: 'qpCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/getProfileIds',
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: getProfileId],
                              name: 'getProfileId',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 157
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: qpCheck],
                        name: 'qpCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/getProfileIds',
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: getProfileId],
                              name: 'getProfileId',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 157
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            sync: false,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: false,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: clearRequestTimeout]
          },
          _eventsCount: 1,
          _maxListeners: undefined,
          socket: [Circular *1],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          headers: {
            'content-type': 'application/json',
            authorization: 'Bearer TkhOU1JYTlBia3g1',
            'user-agent': 'PostmanRuntime/7.32.3',
            accept: '*/*',
            'cache-control': 'no-cache',
            'postman-token': 'd0db4cc8-448f-4e35-9447-c2be16634174',
            host: 'localhost:8004',
            'accept-encoding': 'gzip, deflate, br',
            connection: 'keep-alive',
            'content-length': '232',
            'correlation-id': '101a69d0-2572-11ee-ad52-994b84cdb6e4'
          },
          rawHeaders: [
            'Content-Type',
            'application/json',
            'Authorization',
            'Bearer TkhOU1JYTlBia3g1',
            'User-Agent',
            'PostmanRuntime/7.32.3',
            'Accept',
            '*/*',
            'Cache-Control',
            'no-cache',
            'Postman-Token',
            'd0db4cc8-448f-4e35-9447-c2be16634174',
            'Host',
            'localhost:8004',
            'Accept-Encoding',
            'gzip, deflate, br',
            'Connection',
            'keep-alive',
            'Content-Length',
            '232'
          ],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '/getProfileIds',
          method: 'POST',
          statusCode: null,
          statusMessage: null,
          client: [Circular *1],
          _consuming: true,
          _dumped: false,
          next: [Function: next],
          baseUrl: '/data/api-management/apis/v1',
          originalUrl: '/data/api-management/apis/v1/getProfileIds',
          _parsedUrl: Url {
            protocol: null,
            slashes: null,
            auth: null,
            host: null,
            port: null,
            hostname: null,
            hash: null,
            search: null,
            query: null,
            pathname: '/getProfileIds',
            path: '/getProfileIds',
            href: '/getProfileIds',
            _raw: '/getProfileIds'
          },
          params: {},
          query: {},
          res: [Circular *5],
          body: {
            salesforceOrgApiUrl: 'https://cmentor--tammisb.sandbox.my.salesforce.com',
            accessToken: 'Bearer 00DDw000005FClx!AREAQN1QuTvRQv26QE39qwFlMNuRqs7AIuaaCov7hpkdh4PI00idFi_s4vINoa56qWYlLNtlUTS7Uxmq73V5JzXmfJmSkGrZ'
          },
          _body: true,
          length: undefined,
          getId: [Function (anonymous)],
          [Symbol(kCapture)]: false,
          [Symbol(RequestTimeout)]: undefined
        },
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *5],
      [Symbol(async_id_symbol)]: 167,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'HTTP/1.1 400 Bad Request\r\n' +
      'X-Powered-By: Express\r\n' +
      'correlation-id: 101a69d0-2572-11ee-ad52-994b84cdb6e4\r\n' +
      'Content-Type: application/json; charset=utf-8\r\n' +
      'Content-Length: 213\r\n' +
      'ETag: W/"d5-ExX0eEmt0so2gI/khu3IIhHMEvE"\r\n' +
      'Date: Tue, 18 Jul 2023 13:50:32 GMT\r\n' +
      'Connection: keep-alive\r\n' +
      'Keep-Alive: timeout=5\r\n' +
      '\r\n',
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: <ref *6> IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
      _eventsCount: 1,
      _maxListeners: undefined,
      socket: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: qpCheck],
                          name: 'qpCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/getProfileIds',
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getProfileId],
                                name: 'getProfileId',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 157
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: qpCheck],
                          name: 'qpCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/getProfileIds',
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getProfileId],
                                name: 'getProfileId',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 157
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 167,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: {
        'content-type': 'application/json',
        authorization: 'Bearer TkhOU1JYTlBia3g1',
        'user-agent': 'PostmanRuntime/7.32.3',
        accept: '*/*',
        'cache-control': 'no-cache',
        'postman-token': 'd0db4cc8-448f-4e35-9447-c2be16634174',
        host: 'localhost:8004',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive',
        'content-length': '232',
        'correlation-id': '101a69d0-2572-11ee-ad52-994b84cdb6e4'
      },
      rawHeaders: [
        'Content-Type',
        'application/json',
        'Authorization',
        'Bearer TkhOU1JYTlBia3g1',
        'User-Agent',
        'PostmanRuntime/7.32.3',
        'Accept',
        '*/*',
        'Cache-Control',
        'no-cache',
        'Postman-Token',
        'd0db4cc8-448f-4e35-9447-c2be16634174',
        'Host',
        'localhost:8004',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive',
        'Content-Length',
        '232'
      ],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/getProfileIds',
      method: 'POST',
      statusCode: null,
      statusMessage: null,
      client: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: qpCheck],
                          name: 'qpCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/getProfileIds',
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getProfileId],
                                name: 'getProfileId',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 157
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: qpCheck],
                          name: 'qpCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/getProfileIds',
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getProfileId],
                                name: 'getProfileId',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 157
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 167,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/data/api-management/apis/v1',
      originalUrl: '/data/api-management/apis/v1/getProfileIds',
      _parsedUrl: Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: null,
        query: null,
        pathname: '/getProfileIds',
        path: '/getProfileIds',
        href: '/getProfileIds',
        _raw: '/getProfileIds'
      },
      params: {},
      query: {},
      res: [Circular *5],
      body: {
        salesforceOrgApiUrl: 'https://cmentor--tammisb.sandbox.my.salesforce.com',
        accessToken: 'Bearer 00DDw000005FClx!AREAQN1QuTvRQv26QE39qwFlMNuRqs7AIuaaCov7hpkdh4PI00idFi_s4vINoa56qWYlLNtlUTS7Uxmq73V5JzXmfJmSkGrZ'
      },
      _body: true,
      length: undefined,
      getId: [Function (anonymous)],
      [Symbol(kCapture)]: false,
      [Symbol(RequestTimeout)]: undefined
    },
    locals: [Object: null prototype] {},
    statusCode: 400,
    statusMessage: 'Bad Request',
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [ 'X-Powered-By', 'Express' ],
      'correlation-id': [ 'correlation-id', '101a69d0-2572-11ee-ad52-994b84cdb6e4' ],
      'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
      'content-length': [ 'Content-Length', '213' ],
      etag: [ 'ETag', 'W/"d5-ExX0eEmt0so2gI/khu3IIhHMEvE"' ]
    }
  },
  level: 'error',
  service: 'some-random-service',
  timestamp: '2023-07-18T13:50:32.178Z',
  label: 'validation'
}
{
  message: 'Received a POST request for /data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T13:51:02.524Z',
  label: 'validation'
}
{
  message: 'No correlation-id found creating new correlation-id header of: 2231c2d0-2572-11ee-ad52-994b84cdb6e4',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T13:51:02.525Z',
  label: 'validation'
}
{
  message: 'Received a POST request for /data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T13:52:18.259Z',
  label: 'validation'
}
{
  message: 'No correlation-id found creating new correlation-id header of: 4f564f60-2572-11ee-ad57-93a69240a380',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T13:52:18.262Z',
  label: 'validation'
}
{
  message: 'Received a POST request for /data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:09:53.330Z',
  label: 'validation'
}
{
  message: 'No correlation-id found creating new correlation-id header of: c4355e50-2574-11ee-9454-3b07985f701d',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:09:53.333Z',
  label: 'validation'
}
{
  message: 'Received a POST request for /data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:11:19.597Z',
  label: 'validation'
}
{
  message: 'No correlation-id found creating new correlation-id header of: f7a0ab00-2574-11ee-93ba-eb4b010cc536',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:11:19.600Z',
  label: 'validation'
}
{
  _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  destroyed: false,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  _defaultKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: 481,
  _hasBody: true,
  _trailer: '',
  finished: true,
  _headerSent: true,
  socket: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      errored: null,
      closed: false,
      closeEmitted: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      dataEmitted: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    _events: [Object: null prototype] {
      end: [
        [Function: onReadableStreamEnd],
        [Function: bound socketOnEnd]
      ],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [
        [Function: bound socketOnClose],
        [Function: onServerResponseClose]
      ],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: <ref *2> WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: {
        count: 1,
        cb: [Function (anonymous)],
        stream: [Circular *1],
        state: [Circular *2]
      },
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 1,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      errored: null,
      closed: false,
      closeEmitted: false
    },
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: <ref *4> Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      _events: [Object: null prototype] {
        request: <ref *3> [Function: app] {
          _events: [Object: null prototype] { mount: [Function: onmount] },
          _eventsCount: 1,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames],
          init: [Function: init],
          defaultConfiguration: [Function: defaultConfiguration],
          lazyrouter: [Function: lazyrouter],
          handle: [Function: handle],
          use: [Function: use],
          route: [Function: route],
          engine: [Function: engine],
          param: [Function: param],
          set: [Function: set],
          path: [Function: path],
          enabled: [Function: enabled],
          disabled: [Function: disabled],
          enable: [Function: enable],
          disable: [Function: disable],
          acl: [Function (anonymous)],
          bind: [Function (anonymous)],
          checkout: [Function (anonymous)],
          connect: [Function (anonymous)],
          copy: [Function (anonymous)],
          delete: [Function (anonymous)],
          get: [Function (anonymous)],
          head: [Function (anonymous)],
          link: [Function (anonymous)],
          lock: [Function (anonymous)],
          'm-search': [Function (anonymous)],
          merge: [Function (anonymous)],
          mkactivity: [Function (anonymous)],
          mkcalendar: [Function (anonymous)],
          mkcol: [Function (anonymous)],
          move: [Function (anonymous)],
          notify: [Function (anonymous)],
          options: [Function (anonymous)],
          patch: [Function (anonymous)],
          post: [Function (anonymous)],
          pri: [Function (anonymous)],
          propfind: [Function (anonymous)],
          proppatch: [Function (anonymous)],
          purge: [Function (anonymous)],
          put: [Function (anonymous)],
          rebind: [Function (anonymous)],
          report: [Function (anonymous)],
          search: [Function (anonymous)],
          source: [Function (anonymous)],
          subscribe: [Function (anonymous)],
          trace: [Function (anonymous)],
          unbind: [Function (anonymous)],
          unlink: [Function (anonymous)],
          unlock: [Function (anonymous)],
          unsubscribe: [Function (anonymous)],
          all: [Function: all],
          del: [Function (anonymous)],
          render: [Function: render],
          listen: [Function: listen],
          request: IncomingMessage { app: [Circular *3] },
          response: ServerResponse { app: [Circular *3] },
          cache: {},
          engines: {},
          settings: {
            'x-powered-by': true,
            etag: 'weak',
            'etag fn': [Function: generateETag],
            env: 'development',
            'query parser': 'extended',
            'query parser fn': [Function: parseExtendedQueryString],
            'subdomain offset': 2,
            'trust proxy': false,
            'trust proxy fn': [Function: trustNone],
            view: [Function: View],
            views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
            'jsonp callback name': 'callback'
          },
          locals: [Object: null prototype] {
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            }
          },
          mountpath: '/',
          _router: [Function: router] {
            params: {},
            _params: [],
            caseSensitive: false,
            mergeParams: undefined,
            strict: false,
            stack: [
              Layer {
                handle: [Function: query],
                name: 'query',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: expressInit],
                name: 'expressInit',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: urlencodedParser],
                name: 'urlencodedParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: jsonParser],
                name: 'jsonParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: router] {
                  params: {},
                  _params: [],
                  caseSensitive: undefined,
                  mergeParams: undefined,
                  strict: undefined,
                  stack: [
                    Layer {
                      handle: [AsyncFunction: authCheck],
                      name: 'authCheck',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [AsyncFunction: appJsonHeader],
                      name: 'appJsonHeader',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [AsyncFunction: qpCheck],
                      name: 'qpCheck',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [AsyncFunction: bodyData],
                      name: 'bodyData',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/health\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/health',
                        stack: [
                          Layer {
                            handle: [AsyncFunction: healthStatus],
                            name: 'healthStatus',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          }
                        ],
                        methods: { get: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: {},
                      path: '/getProfileIds',
                      keys: [],
                      regexp: /^\/getProfileIds\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/getProfileIds',
                        stack: [
                          Layer {
                            handle: [AsyncFunction: getProfileId],
                            name: 'getProfileId',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          }
                        ],
                        methods: { post: true }
                      }
                    },
                    Layer {
                      handle: [Function: SuccessHandler],
                      name: 'SuccessHandler',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: ErrorHandler],
                      name: 'ErrorHandler',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    }
                  ]
                },
                name: 'router',
                params: {},
                path: '/data/api-management/apis/v1',
                keys: [],
                regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '/data/api-management/apis/v1',
                keys: [],
                regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: undefined
              }
            ]
          }
        },
        connection: [Function: connectionListener]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: TCP {
        reading: false,
        onconnection: [Function: onconnection],
        [Symbol(owner_symbol)]: [Circular *4]
      },
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      requestTimeout: 0,
      _connectionKey: '6::::8004',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 157
    },
    _server: <ref *4> Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      _events: [Object: null prototype] {
        request: <ref *3> [Function: app] {
          _events: [Object: null prototype] { mount: [Function: onmount] },
          _eventsCount: 1,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames],
          init: [Function: init],
          defaultConfiguration: [Function: defaultConfiguration],
          lazyrouter: [Function: lazyrouter],
          handle: [Function: handle],
          use: [Function: use],
          route: [Function: route],
          engine: [Function: engine],
          param: [Function: param],
          set: [Function: set],
          path: [Function: path],
          enabled: [Function: enabled],
          disabled: [Function: disabled],
          enable: [Function: enable],
          disable: [Function: disable],
          acl: [Function (anonymous)],
          bind: [Function (anonymous)],
          checkout: [Function (anonymous)],
          connect: [Function (anonymous)],
          copy: [Function (anonymous)],
          delete: [Function (anonymous)],
          get: [Function (anonymous)],
          head: [Function (anonymous)],
          link: [Function (anonymous)],
          lock: [Function (anonymous)],
          'm-search': [Function (anonymous)],
          merge: [Function (anonymous)],
          mkactivity: [Function (anonymous)],
          mkcalendar: [Function (anonymous)],
          mkcol: [Function (anonymous)],
          move: [Function (anonymous)],
          notify: [Function (anonymous)],
          options: [Function (anonymous)],
          patch: [Function (anonymous)],
          post: [Function (anonymous)],
          pri: [Function (anonymous)],
          propfind: [Function (anonymous)],
          proppatch: [Function (anonymous)],
          purge: [Function (anonymous)],
          put: [Function (anonymous)],
          rebind: [Function (anonymous)],
          report: [Function (anonymous)],
          search: [Function (anonymous)],
          source: [Function (anonymous)],
          subscribe: [Function (anonymous)],
          trace: [Function (anonymous)],
          unbind: [Function (anonymous)],
          unlink: [Function (anonymous)],
          unlock: [Function (anonymous)],
          unsubscribe: [Function (anonymous)],
          all: [Function: all],
          del: [Function (anonymous)],
          render: [Function: render],
          listen: [Function: listen],
          request: IncomingMessage { app: [Circular *3] },
          response: ServerResponse { app: [Circular *3] },
          cache: {},
          engines: {},
          settings: {
            'x-powered-by': true,
            etag: 'weak',
            'etag fn': [Function: generateETag],
            env: 'development',
            'query parser': 'extended',
            'query parser fn': [Function: parseExtendedQueryString],
            'subdomain offset': 2,
            'trust proxy': false,
            'trust proxy fn': [Function: trustNone],
            view: [Function: View],
            views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
            'jsonp callback name': 'callback'
          },
          locals: [Object: null prototype] {
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            }
          },
          mountpath: '/',
          _router: [Function: router] {
            params: {},
            _params: [],
            caseSensitive: false,
            mergeParams: undefined,
            strict: false,
            stack: [
              Layer {
                handle: [Function: query],
                name: 'query',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: expressInit],
                name: 'expressInit',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: urlencodedParser],
                name: 'urlencodedParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: jsonParser],
                name: 'jsonParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: router] {
                  params: {},
                  _params: [],
                  caseSensitive: undefined,
                  mergeParams: undefined,
                  strict: undefined,
                  stack: [
                    Layer {
                      handle: [AsyncFunction: authCheck],
                      name: 'authCheck',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [AsyncFunction: appJsonHeader],
                      name: 'appJsonHeader',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [AsyncFunction: qpCheck],
                      name: 'qpCheck',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [AsyncFunction: bodyData],
                      name: 'bodyData',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/health\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/health',
                        stack: [
                          Layer {
                            handle: [AsyncFunction: healthStatus],
                            name: 'healthStatus',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          }
                        ],
                        methods: { get: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: {},
                      path: '/getProfileIds',
                      keys: [],
                      regexp: /^\/getProfileIds\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/getProfileIds',
                        stack: [
                          Layer {
                            handle: [AsyncFunction: getProfileId],
                            name: 'getProfileId',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          }
                        ],
                        methods: { post: true }
                      }
                    },
                    Layer {
                      handle: [Function: SuccessHandler],
                      name: 'SuccessHandler',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: ErrorHandler],
                      name: 'ErrorHandler',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    }
                  ]
                },
                name: 'router',
                params: {},
                path: '/data/api-management/apis/v1',
                keys: [],
                regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '/data/api-management/apis/v1',
                keys: [],
                regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: undefined
              }
            ]
          }
        },
        connection: [Function: connectionListener]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: TCP {
        reading: false,
        onconnection: [Function: onconnection],
        [Symbol(owner_symbol)]: [Circular *4]
      },
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      requestTimeout: 0,
      _connectionKey: '6::::8004',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 157
    },
    parser: HTTPParser {
      '0': [Function: bound setRequestTimeout],
      '1': [Function: parserOnHeaders],
      '2': [Function: parserOnHeadersComplete],
      '3': [Function: parserOnBody],
      '4': [Function: parserOnMessageComplete],
      '5': [Function: bound onParserExecute],
      '6': [Function: bound onParserTimeout],
      _headers: [],
      _url: '',
      socket: [Circular *1],
      incoming: <ref *5> IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          sync: false,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [Function: clearRequestTimeout]
        },
        _eventsCount: 1,
        _maxListeners: undefined,
        socket: [Circular *1],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: {
          'content-type': 'application/json',
          authorization: 'Bearer TkhOU1JYTlBia3g1',
          'user-agent': 'PostmanRuntime/7.32.3',
          accept: '*/*',
          'cache-control': 'no-cache',
          'postman-token': '6ef3fb2d-e88a-4299-9cc9-8b5f25e17d75',
          host: 'localhost:8004',
          'accept-encoding': 'gzip, deflate, br',
          connection: 'keep-alive',
          'content-length': '232',
          'correlation-id': 'f7a0ab00-2574-11ee-93ba-eb4b010cc536'
        },
        rawHeaders: [
          'Content-Type',
          'application/json',
          'Authorization',
          'Bearer TkhOU1JYTlBia3g1',
          'User-Agent',
          'PostmanRuntime/7.32.3',
          'Accept',
          '*/*',
          'Cache-Control',
          'no-cache',
          'Postman-Token',
          '6ef3fb2d-e88a-4299-9cc9-8b5f25e17d75',
          'Host',
          'localhost:8004',
          'Accept-Encoding',
          'gzip, deflate, br',
          'Connection',
          'keep-alive',
          'Content-Length',
          '232'
        ],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '/getProfileIds?coll=homework&id=homework&version=1.0.0',
        method: 'POST',
        statusCode: null,
        statusMessage: null,
        client: [Circular *1],
        _consuming: true,
        _dumped: false,
        next: [Function: next],
        baseUrl: '/data/api-management/apis/v1',
        originalUrl: '/data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0',
        _parsedUrl: Url {
          protocol: null,
          slashes: null,
          auth: null,
          host: null,
          port: null,
          hostname: null,
          hash: null,
          search: '?coll=homework&id=homework&version=1.0.0',
          query: 'coll=homework&id=homework&version=1.0.0',
          pathname: '/getProfileIds',
          path: '/getProfileIds?coll=homework&id=homework&version=1.0.0',
          href: '/getProfileIds?coll=homework&id=homework&version=1.0.0',
          _raw: '/getProfileIds?coll=homework&id=homework&version=1.0.0'
        },
        params: {},
        query: { coll: 'homework', id: 'homework', version: '1.0.0' },
        res: ServerResponse {
          _events: [Object: null prototype] {
            finish: [Function: bound resOnFinish]
          },
          _eventsCount: 1,
          _maxListeners: undefined,
          outputData: [],
          outputSize: 0,
          writable: true,
          destroyed: false,
          _last: false,
          chunkedEncoding: false,
          shouldKeepAlive: true,
          _defaultKeepAlive: true,
          useChunkedEncodingByDefault: true,
          sendDate: true,
          _removedConnection: false,
          _removedContLen: false,
          _removedTE: false,
          _contentLength: 481,
          _hasBody: true,
          _trailer: '',
          finished: true,
          _headerSent: true,
          socket: [Circular *1],
          _header: 'HTTP/1.1 200 OK\r\n' +
            'X-Powered-By: Express\r\n' +
            'correlation-id: f7a0ab00-2574-11ee-93ba-eb4b010cc536\r\n' +
            'Content-Type: application/json; charset=utf-8\r\n' +
            'Content-Length: 481\r\n' +
            'ETag: W/"1e1-mHFNINhr2whr+E+mc0gxvn3UZeY"\r\n' +
            'Date: Tue, 18 Jul 2023 14:11:40 GMT\r\n' +
            'Connection: keep-alive\r\n' +
            'Keep-Alive: timeout=5\r\n' +
            '\r\n',
          _keepAliveTimeout: 5000,
          _onPendingData: [Function: bound updateOutgoingData],
          _sent100: false,
          _expect_continue: false,
          req: [Circular *5],
          locals: [Object: null prototype] {},
          statusCode: 200,
          message: 'Successfully Pulled All Needed Profile Ids',
          success: {
            profileIds: [
              {
                profileName: 'Partner',
                profileId: '00eDw000000R6XFIA0'
              },
              {
                profileName: 'Attorney',
                profileId: '00eDw000000R6XKIA0'
              },
              {
                profileName: 'Paralegal/CM',
                profileId: '00eDw000000R6XPIA0'
              },
              {
                profileName: 'Financial',
                profileId: '00eDw000000R6XUIA0'
              },
              {
                profileName: 'IT/Admin',
                profileId: '00eDw000000R6XZIA0'
              }
            ]
          },
          statusMessage: 'OK',
          level: 'info',
          service: 'some-random-service',
          timestamp: '2023-07-18T14:11:40.004Z',
          label: 'validation',
          [Symbol(kCapture)]: false,
          [Symbol(kNeedDrain)]: false,
          [Symbol(corked)]: 0,
          [Symbol(kOutHeaders)]: [Object: null prototype] {
            'x-powered-by': [ 'X-Powered-By', 'Express' ],
            'correlation-id': [
              'correlation-id',
              'f7a0ab00-2574-11ee-93ba-eb4b010cc536'
            ],
            'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
            'content-length': [ 'Content-Length', '481' ],
            etag: [ 'ETag', 'W/"1e1-mHFNINhr2whr+E+mc0gxvn3UZeY"' ]
          },
          [Symbol(level)]: 'info',
          [Symbol(message)]: '{"_contentLength":481,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":"HTTP/1.1 200 OK\\r\\nX-Powered-By: Express\\r\\ncorrelation-id: f7a0ab00-2574-11ee-93ba-eb4b010cc536\\r\\nContent-Type: application/json; charset=utf-8\\r\\nContent-Length: 481\\r\\nETag: W/\\"1e1-mHFNINhr2whr+E+mc0gxvn3UZeY\\"\\r\\nDate: Tue, 18 Jul 2023 14:11:40 GMT\\r\\nConnection: keep-alive\\r\\nKeep-Alive: timeout=5\\r\\n\\r\\n","_headerSent":true,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":true,"label":"validation","level":"info","locals":{},"message":"Successfully Pulled All Needed Profile Ids","outputData":[],"outputSize":0,"req":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/getProfileIds?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/getProfileIds?coll=homework&id=homework&version=1.0.0","path":"/getProfileIds?coll=homework&id=homework&version=1.0.0","pathname":"/getProfileIds","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQN1QuTvRQv26QE39qwFlMNuRqs7AIuaaCov7hpkdh4PI00idFi_s4vINoa56qWYlLNtlUTS7Uxmq73V5JzXmfJmSkGrZ","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"f7a0ab00-2574-11ee-93ba-eb4b010cc536","host":"localhost:8004","postman-token":"6ef3fb2d-e88a-4299-9cc9-8b5f25e17d75","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","6ef3fb2d-e88a-4299-9cc9-8b5f25e17d75","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/getProfileIds","stack":[{"keys":[],"method":"post","name":"getProfileId","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/getProfileIds?coll=homework&id=homework&version=1.0.0"},"sendDate":true,"service":"some-random-service","shouldKeepAlive":true,"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/getProfileIds?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/getProfileIds?coll=homework&id=homework&version=1.0.0","path":"/getProfileIds?coll=homework&id=homework&version=1.0.0","pathname":"/getProfileIds","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQN1QuTvRQv26QE39qwFlMNuRqs7AIuaaCov7hpkdh4PI00idFi_s4vINoa56qWYlLNtlUTS7Uxmq73V5JzXmfJmSkGrZ","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":"[Circular]","complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"f7a0ab00-2574-11ee-93ba-eb4b010cc536","host":"localhost:8004","postman-token":"6ef3fb2d-e88a-4299-9cc9-8b5f25e17d75","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","6ef3fb2d-e88a-4299-9cc9-8b5f25e17d75","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/getProfileIds","stack":[{"keys":[],"method":"post","name":"getProfileId","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":"[Circular]","statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/getProfileIds?coll=homework&id=homework&version=1.0.0"},"maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":200,"statusMessage":"OK","success":{"profileIds":[{"profileId":"00eDw000000R6XFIA0","profileName":"Partner"},{"profileId":"00eDw000000R6XKIA0","profileName":"Attorney"},{"profileId":"00eDw000000R6XPIA0","profileName":"Paralegal/CM"},{"profileId":"00eDw000000R6XUIA0","profileName":"Financial"},{"profileId":"00eDw000000R6XZIA0","profileName":"IT/Admin"}]},"timestamp":"2023-07-18T14:11:40.004Z","useChunkedEncodingByDefault":true,"writable":true}'
        },
        body: {
          salesforceOrgApiUrl: 'https://cmentor--tammisb.sandbox.my.salesforce.com',
          accessToken: 'Bearer 00DDw000005FClx!AREAQN1QuTvRQv26QE39qwFlMNuRqs7AIuaaCov7hpkdh4PI00idFi_s4vINoa56qWYlLNtlUTS7Uxmq73V5JzXmfJmSkGrZ'
        },
        _body: true,
        length: undefined,
        getId: [Function (anonymous)],
        route: Route {
          path: '/getProfileIds',
          stack: [
            Layer {
              handle: [AsyncFunction: getProfileId],
              name: 'getProfileId',
              params: undefined,
              path: undefined,
              keys: [],
              regexp: /^\/?$/i { fast_star: false, fast_slash: false },
              method: 'post'
            },
            Layer {
              handle: [Function (anonymous)],
              name: '<anonymous>',
              params: undefined,
              path: undefined,
              keys: [],
              regexp: /^\/?$/i { fast_star: false, fast_slash: false },
              method: 'post'
            }
          ],
          methods: { post: true }
        },
        [Symbol(kCapture)]: false,
        [Symbol(RequestTimeout)]: undefined
      },
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      [Symbol(resource_symbol)]: HTTPServerAsyncResource {
        type: 'HTTPINCOMINGMESSAGE',
        socket: [Circular *1]
      }
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: <ref *6> ServerResponse {
      _events: [Object: null prototype] {
        finish: [Function: bound resOnFinish]
      },
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: 481,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      socket: [Circular *1],
      _header: 'HTTP/1.1 200 OK\r\n' +
        'X-Powered-By: Express\r\n' +
        'correlation-id: f7a0ab00-2574-11ee-93ba-eb4b010cc536\r\n' +
        'Content-Type: application/json; charset=utf-8\r\n' +
        'Content-Length: 481\r\n' +
        'ETag: W/"1e1-mHFNINhr2whr+E+mc0gxvn3UZeY"\r\n' +
        'Date: Tue, 18 Jul 2023 14:11:40 GMT\r\n' +
        'Connection: keep-alive\r\n' +
        'Keep-Alive: timeout=5\r\n' +
        '\r\n',
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      _sent100: false,
      _expect_continue: false,
      req: <ref *5> IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          sync: false,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [Function: clearRequestTimeout]
        },
        _eventsCount: 1,
        _maxListeners: undefined,
        socket: [Circular *1],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: {
          'content-type': 'application/json',
          authorization: 'Bearer TkhOU1JYTlBia3g1',
          'user-agent': 'PostmanRuntime/7.32.3',
          accept: '*/*',
          'cache-control': 'no-cache',
          'postman-token': '6ef3fb2d-e88a-4299-9cc9-8b5f25e17d75',
          host: 'localhost:8004',
          'accept-encoding': 'gzip, deflate, br',
          connection: 'keep-alive',
          'content-length': '232',
          'correlation-id': 'f7a0ab00-2574-11ee-93ba-eb4b010cc536'
        },
        rawHeaders: [
          'Content-Type',
          'application/json',
          'Authorization',
          'Bearer TkhOU1JYTlBia3g1',
          'User-Agent',
          'PostmanRuntime/7.32.3',
          'Accept',
          '*/*',
          'Cache-Control',
          'no-cache',
          'Postman-Token',
          '6ef3fb2d-e88a-4299-9cc9-8b5f25e17d75',
          'Host',
          'localhost:8004',
          'Accept-Encoding',
          'gzip, deflate, br',
          'Connection',
          'keep-alive',
          'Content-Length',
          '232'
        ],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '/getProfileIds?coll=homework&id=homework&version=1.0.0',
        method: 'POST',
        statusCode: null,
        statusMessage: null,
        client: [Circular *1],
        _consuming: true,
        _dumped: false,
        next: [Function: next],
        baseUrl: '/data/api-management/apis/v1',
        originalUrl: '/data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0',
        _parsedUrl: Url {
          protocol: null,
          slashes: null,
          auth: null,
          host: null,
          port: null,
          hostname: null,
          hash: null,
          search: '?coll=homework&id=homework&version=1.0.0',
          query: 'coll=homework&id=homework&version=1.0.0',
          pathname: '/getProfileIds',
          path: '/getProfileIds?coll=homework&id=homework&version=1.0.0',
          href: '/getProfileIds?coll=homework&id=homework&version=1.0.0',
          _raw: '/getProfileIds?coll=homework&id=homework&version=1.0.0'
        },
        params: {},
        query: { coll: 'homework', id: 'homework', version: '1.0.0' },
        res: [Circular *6],
        body: {
          salesforceOrgApiUrl: 'https://cmentor--tammisb.sandbox.my.salesforce.com',
          accessToken: 'Bearer 00DDw000005FClx!AREAQN1QuTvRQv26QE39qwFlMNuRqs7AIuaaCov7hpkdh4PI00idFi_s4vINoa56qWYlLNtlUTS7Uxmq73V5JzXmfJmSkGrZ'
        },
        _body: true,
        length: undefined,
        getId: [Function (anonymous)],
        route: Route {
          path: '/getProfileIds',
          stack: [
            Layer {
              handle: [AsyncFunction: getProfileId],
              name: 'getProfileId',
              params: undefined,
              path: undefined,
              keys: [],
              regexp: /^\/?$/i { fast_star: false, fast_slash: false },
              method: 'post'
            },
            Layer {
              handle: [Function (anonymous)],
              name: '<anonymous>',
              params: undefined,
              path: undefined,
              keys: [],
              regexp: /^\/?$/i { fast_star: false, fast_slash: false },
              method: 'post'
            }
          ],
          methods: { post: true }
        },
        [Symbol(kCapture)]: false,
        [Symbol(RequestTimeout)]: undefined
      },
      locals: [Object: null prototype] {},
      statusCode: 200,
      message: 'Successfully Pulled All Needed Profile Ids',
      success: {
        profileIds: [
          { profileName: 'Partner', profileId: '00eDw000000R6XFIA0' },
          { profileName: 'Attorney', profileId: '00eDw000000R6XKIA0' },
          {
            profileName: 'Paralegal/CM',
            profileId: '00eDw000000R6XPIA0'
          },
          { profileName: 'Financial', profileId: '00eDw000000R6XUIA0' },
          { profileName: 'IT/Admin', profileId: '00eDw000000R6XZIA0' }
        ]
      },
      statusMessage: 'OK',
      level: 'info',
      service: 'some-random-service',
      timestamp: '2023-07-18T14:11:40.004Z',
      label: 'validation',
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        'x-powered-by': [ 'X-Powered-By', 'Express' ],
        'correlation-id': [ 'correlation-id', 'f7a0ab00-2574-11ee-93ba-eb4b010cc536' ],
        'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
        'content-length': [ 'Content-Length', '481' ],
        etag: [ 'ETag', 'W/"1e1-mHFNINhr2whr+E+mc0gxvn3UZeY"' ]
      },
      [Symbol(level)]: 'info',
      [Symbol(message)]: '{"_contentLength":481,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":"HTTP/1.1 200 OK\\r\\nX-Powered-By: Express\\r\\ncorrelation-id: f7a0ab00-2574-11ee-93ba-eb4b010cc536\\r\\nContent-Type: application/json; charset=utf-8\\r\\nContent-Length: 481\\r\\nETag: W/\\"1e1-mHFNINhr2whr+E+mc0gxvn3UZeY\\"\\r\\nDate: Tue, 18 Jul 2023 14:11:40 GMT\\r\\nConnection: keep-alive\\r\\nKeep-Alive: timeout=5\\r\\n\\r\\n","_headerSent":true,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":true,"label":"validation","level":"info","locals":{},"message":"Successfully Pulled All Needed Profile Ids","outputData":[],"outputSize":0,"req":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/getProfileIds?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/getProfileIds?coll=homework&id=homework&version=1.0.0","path":"/getProfileIds?coll=homework&id=homework&version=1.0.0","pathname":"/getProfileIds","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQN1QuTvRQv26QE39qwFlMNuRqs7AIuaaCov7hpkdh4PI00idFi_s4vINoa56qWYlLNtlUTS7Uxmq73V5JzXmfJmSkGrZ","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"f7a0ab00-2574-11ee-93ba-eb4b010cc536","host":"localhost:8004","postman-token":"6ef3fb2d-e88a-4299-9cc9-8b5f25e17d75","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","6ef3fb2d-e88a-4299-9cc9-8b5f25e17d75","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/getProfileIds","stack":[{"keys":[],"method":"post","name":"getProfileId","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/getProfileIds?coll=homework&id=homework&version=1.0.0"},"sendDate":true,"service":"some-random-service","shouldKeepAlive":true,"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/getProfileIds?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/getProfileIds?coll=homework&id=homework&version=1.0.0","path":"/getProfileIds?coll=homework&id=homework&version=1.0.0","pathname":"/getProfileIds","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQN1QuTvRQv26QE39qwFlMNuRqs7AIuaaCov7hpkdh4PI00idFi_s4vINoa56qWYlLNtlUTS7Uxmq73V5JzXmfJmSkGrZ","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":"[Circular]","complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"f7a0ab00-2574-11ee-93ba-eb4b010cc536","host":"localhost:8004","postman-token":"6ef3fb2d-e88a-4299-9cc9-8b5f25e17d75","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","6ef3fb2d-e88a-4299-9cc9-8b5f25e17d75","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/getProfileIds","stack":[{"keys":[],"method":"post","name":"getProfileId","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":"[Circular]","statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/getProfileIds?coll=homework&id=homework&version=1.0.0"},"maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":200,"statusMessage":"OK","success":{"profileIds":[{"profileId":"00eDw000000R6XFIA0","profileName":"Partner"},{"profileId":"00eDw000000R6XKIA0","profileName":"Attorney"},{"profileId":"00eDw000000R6XPIA0","profileName":"Paralegal/CM"},{"profileId":"00eDw000000R6XUIA0","profileName":"Financial"},{"profileId":"00eDw000000R6XZIA0","profileName":"IT/Admin"}]},"timestamp":"2023-07-18T14:11:40.004Z","useChunkedEncodingByDefault":true,"writable":true}'
    },
    [Symbol(async_id_symbol)]: 167,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular *1]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(RequestTimeout)]: undefined
  },
  _header: 'HTTP/1.1 200 OK\r\n' +
    'X-Powered-By: Express\r\n' +
    'correlation-id: f7a0ab00-2574-11ee-93ba-eb4b010cc536\r\n' +
    'Content-Type: application/json; charset=utf-8\r\n' +
    'Content-Length: 481\r\n' +
    'ETag: W/"1e1-mHFNINhr2whr+E+mc0gxvn3UZeY"\r\n' +
    'Date: Tue, 18 Jul 2023 14:11:40 GMT\r\n' +
    'Connection: keep-alive\r\n' +
    'Keep-Alive: timeout=5\r\n' +
    '\r\n',
  _keepAliveTimeout: 5000,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: <ref *5> IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: true,
      ended: true,
      endEmitted: true,
      reading: false,
      sync: false,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      errored: null,
      closed: false,
      closeEmitted: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      dataEmitted: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: qpCheck],
                        name: 'qpCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/getProfileIds',
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: getProfileId],
                              name: 'getProfileId',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 157
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: qpCheck],
                        name: 'qpCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/getProfileIds',
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: getProfileId],
                              name: 'getProfileId',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 157
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: [Circular *5],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: <ref *6> ServerResponse {
        _events: [Object: null prototype] {
          finish: [Function: bound resOnFinish]
        },
        _eventsCount: 1,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 481,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Circular *1],
        _header: 'HTTP/1.1 200 OK\r\n' +
          'X-Powered-By: Express\r\n' +
          'correlation-id: f7a0ab00-2574-11ee-93ba-eb4b010cc536\r\n' +
          'Content-Type: application/json; charset=utf-8\r\n' +
          'Content-Length: 481\r\n' +
          'ETag: W/"1e1-mHFNINhr2whr+E+mc0gxvn3UZeY"\r\n' +
          'Date: Tue, 18 Jul 2023 14:11:40 GMT\r\n' +
          'Connection: keep-alive\r\n' +
          'Keep-Alive: timeout=5\r\n' +
          '\r\n',
        _keepAliveTimeout: 5000,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular *5],
        locals: [Object: null prototype] {},
        statusCode: 200,
        message: 'Successfully Pulled All Needed Profile Ids',
        success: {
          profileIds: [
            { profileName: 'Partner', profileId: '00eDw000000R6XFIA0' },
            {
              profileName: 'Attorney',
              profileId: '00eDw000000R6XKIA0'
            },
            {
              profileName: 'Paralegal/CM',
              profileId: '00eDw000000R6XPIA0'
            },
            {
              profileName: 'Financial',
              profileId: '00eDw000000R6XUIA0'
            },
            {
              profileName: 'IT/Admin',
              profileId: '00eDw000000R6XZIA0'
            }
          ]
        },
        statusMessage: 'OK',
        level: 'info',
        service: 'some-random-service',
        timestamp: '2023-07-18T14:11:40.004Z',
        label: 'validation',
        [Symbol(kCapture)]: false,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          'x-powered-by': [ 'X-Powered-By', 'Express' ],
          'correlation-id': [ 'correlation-id', 'f7a0ab00-2574-11ee-93ba-eb4b010cc536' ],
          'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
          'content-length': [ 'Content-Length', '481' ],
          etag: [ 'ETag', 'W/"1e1-mHFNINhr2whr+E+mc0gxvn3UZeY"' ]
        },
        [Symbol(level)]: 'info',
        [Symbol(message)]: '{"_contentLength":481,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":"HTTP/1.1 200 OK\\r\\nX-Powered-By: Express\\r\\ncorrelation-id: f7a0ab00-2574-11ee-93ba-eb4b010cc536\\r\\nContent-Type: application/json; charset=utf-8\\r\\nContent-Length: 481\\r\\nETag: W/\\"1e1-mHFNINhr2whr+E+mc0gxvn3UZeY\\"\\r\\nDate: Tue, 18 Jul 2023 14:11:40 GMT\\r\\nConnection: keep-alive\\r\\nKeep-Alive: timeout=5\\r\\n\\r\\n","_headerSent":true,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":true,"label":"validation","level":"info","locals":{},"message":"Successfully Pulled All Needed Profile Ids","outputData":[],"outputSize":0,"req":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/getProfileIds?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/getProfileIds?coll=homework&id=homework&version=1.0.0","path":"/getProfileIds?coll=homework&id=homework&version=1.0.0","pathname":"/getProfileIds","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQN1QuTvRQv26QE39qwFlMNuRqs7AIuaaCov7hpkdh4PI00idFi_s4vINoa56qWYlLNtlUTS7Uxmq73V5JzXmfJmSkGrZ","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"f7a0ab00-2574-11ee-93ba-eb4b010cc536","host":"localhost:8004","postman-token":"6ef3fb2d-e88a-4299-9cc9-8b5f25e17d75","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","6ef3fb2d-e88a-4299-9cc9-8b5f25e17d75","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/getProfileIds","stack":[{"keys":[],"method":"post","name":"getProfileId","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/getProfileIds?coll=homework&id=homework&version=1.0.0"},"sendDate":true,"service":"some-random-service","shouldKeepAlive":true,"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/getProfileIds?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/getProfileIds?coll=homework&id=homework&version=1.0.0","path":"/getProfileIds?coll=homework&id=homework&version=1.0.0","pathname":"/getProfileIds","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQN1QuTvRQv26QE39qwFlMNuRqs7AIuaaCov7hpkdh4PI00idFi_s4vINoa56qWYlLNtlUTS7Uxmq73V5JzXmfJmSkGrZ","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":"[Circular]","complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"f7a0ab00-2574-11ee-93ba-eb4b010cc536","host":"localhost:8004","postman-token":"6ef3fb2d-e88a-4299-9cc9-8b5f25e17d75","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","6ef3fb2d-e88a-4299-9cc9-8b5f25e17d75","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/getProfileIds","stack":[{"keys":[],"method":"post","name":"getProfileId","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":"[Circular]","statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/getProfileIds?coll=homework&id=homework&version=1.0.0"},"maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":200,"statusMessage":"OK","success":{"profileIds":[{"profileId":"00eDw000000R6XFIA0","profileName":"Partner"},{"profileId":"00eDw000000R6XKIA0","profileName":"Attorney"},{"profileId":"00eDw000000R6XPIA0","profileName":"Paralegal/CM"},{"profileId":"00eDw000000R6XUIA0","profileName":"Financial"},{"profileId":"00eDw000000R6XZIA0","profileName":"IT/Admin"}]},"timestamp":"2023-07-18T14:11:40.004Z","useChunkedEncodingByDefault":true,"writable":true}'
      },
      [Symbol(async_id_symbol)]: 167,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: true,
    headers: {
      'content-type': 'application/json',
      authorization: 'Bearer TkhOU1JYTlBia3g1',
      'user-agent': 'PostmanRuntime/7.32.3',
      accept: '*/*',
      'cache-control': 'no-cache',
      'postman-token': '6ef3fb2d-e88a-4299-9cc9-8b5f25e17d75',
      host: 'localhost:8004',
      'accept-encoding': 'gzip, deflate, br',
      connection: 'keep-alive',
      'content-length': '232',
      'correlation-id': 'f7a0ab00-2574-11ee-93ba-eb4b010cc536'
    },
    rawHeaders: [
      'Content-Type',
      'application/json',
      'Authorization',
      'Bearer TkhOU1JYTlBia3g1',
      'User-Agent',
      'PostmanRuntime/7.32.3',
      'Accept',
      '*/*',
      'Cache-Control',
      'no-cache',
      'Postman-Token',
      '6ef3fb2d-e88a-4299-9cc9-8b5f25e17d75',
      'Host',
      'localhost:8004',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Connection',
      'keep-alive',
      'Content-Length',
      '232'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/getProfileIds?coll=homework&id=homework&version=1.0.0',
    method: 'POST',
    statusCode: null,
    statusMessage: null,
    client: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: qpCheck],
                        name: 'qpCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/getProfileIds',
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: getProfileId],
                              name: 'getProfileId',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 157
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: qpCheck],
                        name: 'qpCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/getProfileIds',
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: getProfileId],
                              name: 'getProfileId',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 157
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: [Circular *5],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: <ref *6> ServerResponse {
        _events: [Object: null prototype] {
          finish: [Function: bound resOnFinish]
        },
        _eventsCount: 1,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 481,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Circular *1],
        _header: 'HTTP/1.1 200 OK\r\n' +
          'X-Powered-By: Express\r\n' +
          'correlation-id: f7a0ab00-2574-11ee-93ba-eb4b010cc536\r\n' +
          'Content-Type: application/json; charset=utf-8\r\n' +
          'Content-Length: 481\r\n' +
          'ETag: W/"1e1-mHFNINhr2whr+E+mc0gxvn3UZeY"\r\n' +
          'Date: Tue, 18 Jul 2023 14:11:40 GMT\r\n' +
          'Connection: keep-alive\r\n' +
          'Keep-Alive: timeout=5\r\n' +
          '\r\n',
        _keepAliveTimeout: 5000,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular *5],
        locals: [Object: null prototype] {},
        statusCode: 200,
        message: 'Successfully Pulled All Needed Profile Ids',
        success: {
          profileIds: [
            { profileName: 'Partner', profileId: '00eDw000000R6XFIA0' },
            {
              profileName: 'Attorney',
              profileId: '00eDw000000R6XKIA0'
            },
            {
              profileName: 'Paralegal/CM',
              profileId: '00eDw000000R6XPIA0'
            },
            {
              profileName: 'Financial',
              profileId: '00eDw000000R6XUIA0'
            },
            {
              profileName: 'IT/Admin',
              profileId: '00eDw000000R6XZIA0'
            }
          ]
        },
        statusMessage: 'OK',
        level: 'info',
        service: 'some-random-service',
        timestamp: '2023-07-18T14:11:40.004Z',
        label: 'validation',
        [Symbol(kCapture)]: false,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          'x-powered-by': [ 'X-Powered-By', 'Express' ],
          'correlation-id': [ 'correlation-id', 'f7a0ab00-2574-11ee-93ba-eb4b010cc536' ],
          'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
          'content-length': [ 'Content-Length', '481' ],
          etag: [ 'ETag', 'W/"1e1-mHFNINhr2whr+E+mc0gxvn3UZeY"' ]
        },
        [Symbol(level)]: 'info',
        [Symbol(message)]: '{"_contentLength":481,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":"HTTP/1.1 200 OK\\r\\nX-Powered-By: Express\\r\\ncorrelation-id: f7a0ab00-2574-11ee-93ba-eb4b010cc536\\r\\nContent-Type: application/json; charset=utf-8\\r\\nContent-Length: 481\\r\\nETag: W/\\"1e1-mHFNINhr2whr+E+mc0gxvn3UZeY\\"\\r\\nDate: Tue, 18 Jul 2023 14:11:40 GMT\\r\\nConnection: keep-alive\\r\\nKeep-Alive: timeout=5\\r\\n\\r\\n","_headerSent":true,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":true,"label":"validation","level":"info","locals":{},"message":"Successfully Pulled All Needed Profile Ids","outputData":[],"outputSize":0,"req":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/getProfileIds?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/getProfileIds?coll=homework&id=homework&version=1.0.0","path":"/getProfileIds?coll=homework&id=homework&version=1.0.0","pathname":"/getProfileIds","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQN1QuTvRQv26QE39qwFlMNuRqs7AIuaaCov7hpkdh4PI00idFi_s4vINoa56qWYlLNtlUTS7Uxmq73V5JzXmfJmSkGrZ","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"f7a0ab00-2574-11ee-93ba-eb4b010cc536","host":"localhost:8004","postman-token":"6ef3fb2d-e88a-4299-9cc9-8b5f25e17d75","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","6ef3fb2d-e88a-4299-9cc9-8b5f25e17d75","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/getProfileIds","stack":[{"keys":[],"method":"post","name":"getProfileId","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/getProfileIds?coll=homework&id=homework&version=1.0.0"},"sendDate":true,"service":"some-random-service","shouldKeepAlive":true,"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/getProfileIds?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/getProfileIds?coll=homework&id=homework&version=1.0.0","path":"/getProfileIds?coll=homework&id=homework&version=1.0.0","pathname":"/getProfileIds","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQN1QuTvRQv26QE39qwFlMNuRqs7AIuaaCov7hpkdh4PI00idFi_s4vINoa56qWYlLNtlUTS7Uxmq73V5JzXmfJmSkGrZ","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":"[Circular]","complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"f7a0ab00-2574-11ee-93ba-eb4b010cc536","host":"localhost:8004","postman-token":"6ef3fb2d-e88a-4299-9cc9-8b5f25e17d75","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","6ef3fb2d-e88a-4299-9cc9-8b5f25e17d75","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/getProfileIds","stack":[{"keys":[],"method":"post","name":"getProfileId","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":"[Circular]","statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/getProfileIds?coll=homework&id=homework&version=1.0.0"},"maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":200,"statusMessage":"OK","success":{"profileIds":[{"profileId":"00eDw000000R6XFIA0","profileName":"Partner"},{"profileId":"00eDw000000R6XKIA0","profileName":"Attorney"},{"profileId":"00eDw000000R6XPIA0","profileName":"Paralegal/CM"},{"profileId":"00eDw000000R6XUIA0","profileName":"Financial"},{"profileId":"00eDw000000R6XZIA0","profileName":"IT/Admin"}]},"timestamp":"2023-07-18T14:11:40.004Z","useChunkedEncodingByDefault":true,"writable":true}'
      },
      [Symbol(async_id_symbol)]: 167,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _consuming: true,
    _dumped: false,
    next: [Function: next],
    baseUrl: '/data/api-management/apis/v1',
    originalUrl: '/data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: '?coll=homework&id=homework&version=1.0.0',
      query: 'coll=homework&id=homework&version=1.0.0',
      pathname: '/getProfileIds',
      path: '/getProfileIds?coll=homework&id=homework&version=1.0.0',
      href: '/getProfileIds?coll=homework&id=homework&version=1.0.0',
      _raw: '/getProfileIds?coll=homework&id=homework&version=1.0.0'
    },
    params: {},
    query: { coll: 'homework', id: 'homework', version: '1.0.0' },
    res: <ref *6> ServerResponse {
      _events: [Object: null prototype] {
        finish: [Function: bound resOnFinish]
      },
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: 481,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      socket: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: qpCheck],
                          name: 'qpCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/getProfileIds',
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getProfileId],
                                name: 'getProfileId',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 157
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: qpCheck],
                          name: 'qpCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/getProfileIds',
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getProfileId],
                                name: 'getProfileId',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 157
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *5],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *6],
        [Symbol(async_id_symbol)]: 167,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _header: 'HTTP/1.1 200 OK\r\n' +
        'X-Powered-By: Express\r\n' +
        'correlation-id: f7a0ab00-2574-11ee-93ba-eb4b010cc536\r\n' +
        'Content-Type: application/json; charset=utf-8\r\n' +
        'Content-Length: 481\r\n' +
        'ETag: W/"1e1-mHFNINhr2whr+E+mc0gxvn3UZeY"\r\n' +
        'Date: Tue, 18 Jul 2023 14:11:40 GMT\r\n' +
        'Connection: keep-alive\r\n' +
        'Keep-Alive: timeout=5\r\n' +
        '\r\n',
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      _sent100: false,
      _expect_continue: false,
      req: [Circular *5],
      locals: [Object: null prototype] {},
      statusCode: 200,
      message: 'Successfully Pulled All Needed Profile Ids',
      success: {
        profileIds: [
          { profileName: 'Partner', profileId: '00eDw000000R6XFIA0' },
          { profileName: 'Attorney', profileId: '00eDw000000R6XKIA0' },
          {
            profileName: 'Paralegal/CM',
            profileId: '00eDw000000R6XPIA0'
          },
          { profileName: 'Financial', profileId: '00eDw000000R6XUIA0' },
          { profileName: 'IT/Admin', profileId: '00eDw000000R6XZIA0' }
        ]
      },
      statusMessage: 'OK',
      level: 'info',
      service: 'some-random-service',
      timestamp: '2023-07-18T14:11:40.004Z',
      label: 'validation',
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        'x-powered-by': [ 'X-Powered-By', 'Express' ],
        'correlation-id': [ 'correlation-id', 'f7a0ab00-2574-11ee-93ba-eb4b010cc536' ],
        'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
        'content-length': [ 'Content-Length', '481' ],
        etag: [ 'ETag', 'W/"1e1-mHFNINhr2whr+E+mc0gxvn3UZeY"' ]
      },
      [Symbol(level)]: 'info',
      [Symbol(message)]: '{"_contentLength":481,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":"HTTP/1.1 200 OK\\r\\nX-Powered-By: Express\\r\\ncorrelation-id: f7a0ab00-2574-11ee-93ba-eb4b010cc536\\r\\nContent-Type: application/json; charset=utf-8\\r\\nContent-Length: 481\\r\\nETag: W/\\"1e1-mHFNINhr2whr+E+mc0gxvn3UZeY\\"\\r\\nDate: Tue, 18 Jul 2023 14:11:40 GMT\\r\\nConnection: keep-alive\\r\\nKeep-Alive: timeout=5\\r\\n\\r\\n","_headerSent":true,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":true,"label":"validation","level":"info","locals":{},"message":"Successfully Pulled All Needed Profile Ids","outputData":[],"outputSize":0,"req":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/getProfileIds?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/getProfileIds?coll=homework&id=homework&version=1.0.0","path":"/getProfileIds?coll=homework&id=homework&version=1.0.0","pathname":"/getProfileIds","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQN1QuTvRQv26QE39qwFlMNuRqs7AIuaaCov7hpkdh4PI00idFi_s4vINoa56qWYlLNtlUTS7Uxmq73V5JzXmfJmSkGrZ","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"f7a0ab00-2574-11ee-93ba-eb4b010cc536","host":"localhost:8004","postman-token":"6ef3fb2d-e88a-4299-9cc9-8b5f25e17d75","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","6ef3fb2d-e88a-4299-9cc9-8b5f25e17d75","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/getProfileIds","stack":[{"keys":[],"method":"post","name":"getProfileId","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/getProfileIds?coll=homework&id=homework&version=1.0.0"},"sendDate":true,"service":"some-random-service","shouldKeepAlive":true,"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/getProfileIds?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/getProfileIds?coll=homework&id=homework&version=1.0.0","path":"/getProfileIds?coll=homework&id=homework&version=1.0.0","pathname":"/getProfileIds","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQN1QuTvRQv26QE39qwFlMNuRqs7AIuaaCov7hpkdh4PI00idFi_s4vINoa56qWYlLNtlUTS7Uxmq73V5JzXmfJmSkGrZ","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":"[Circular]","complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"f7a0ab00-2574-11ee-93ba-eb4b010cc536","host":"localhost:8004","postman-token":"6ef3fb2d-e88a-4299-9cc9-8b5f25e17d75","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","6ef3fb2d-e88a-4299-9cc9-8b5f25e17d75","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/getProfileIds","stack":[{"keys":[],"method":"post","name":"getProfileId","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":"[Circular]","statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/getProfileIds?coll=homework&id=homework&version=1.0.0"},"maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":200,"statusMessage":"OK","success":{"profileIds":[{"profileId":"00eDw000000R6XFIA0","profileName":"Partner"},{"profileId":"00eDw000000R6XKIA0","profileName":"Attorney"},{"profileId":"00eDw000000R6XPIA0","profileName":"Paralegal/CM"},{"profileId":"00eDw000000R6XUIA0","profileName":"Financial"},{"profileId":"00eDw000000R6XZIA0","profileName":"IT/Admin"}]},"timestamp":"2023-07-18T14:11:40.004Z","useChunkedEncodingByDefault":true,"writable":true}'
    },
    body: {
      salesforceOrgApiUrl: 'https://cmentor--tammisb.sandbox.my.salesforce.com',
      accessToken: 'Bearer 00DDw000005FClx!AREAQN1QuTvRQv26QE39qwFlMNuRqs7AIuaaCov7hpkdh4PI00idFi_s4vINoa56qWYlLNtlUTS7Uxmq73V5JzXmfJmSkGrZ'
    },
    _body: true,
    length: undefined,
    getId: [Function (anonymous)],
    route: Route {
      path: '/getProfileIds',
      stack: [
        Layer {
          handle: [AsyncFunction: getProfileId],
          name: 'getProfileId',
          params: undefined,
          path: undefined,
          keys: [],
          regexp: /^\/?$/i { fast_star: false, fast_slash: false },
          method: 'post'
        },
        Layer {
          handle: [Function (anonymous)],
          name: '<anonymous>',
          params: undefined,
          path: undefined,
          keys: [],
          regexp: /^\/?$/i { fast_star: false, fast_slash: false },
          method: 'post'
        }
      ],
      methods: { post: true }
    },
    [Symbol(kCapture)]: false,
    [Symbol(RequestTimeout)]: undefined
  },
  locals: [Object: null prototype] {},
  statusCode: 200,
  message: 'Successfully Pulled All Needed Profile Ids',
  success: {
    profileIds: [
      { profileName: 'Partner', profileId: '00eDw000000R6XFIA0' },
      { profileName: 'Attorney', profileId: '00eDw000000R6XKIA0' },
      { profileName: 'Paralegal/CM', profileId: '00eDw000000R6XPIA0' },
      { profileName: 'Financial', profileId: '00eDw000000R6XUIA0' },
      { profileName: 'IT/Admin', profileId: '00eDw000000R6XZIA0' }
    ]
  },
  statusMessage: 'OK',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:11:40.004Z',
  label: 'validation',
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'correlation-id': [ 'correlation-id', 'f7a0ab00-2574-11ee-93ba-eb4b010cc536' ],
    'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
    'content-length': [ 'Content-Length', '481' ],
    etag: [ 'ETag', 'W/"1e1-mHFNINhr2whr+E+mc0gxvn3UZeY"' ]
  }
}
{
  message: 'Received a POST request for /data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:31:40.113Z',
  label: 'validation'
}
{
  message: 'No correlation-id found creating new correlation-id header of: cf1ca140-2577-11ee-9a79-af96691eab96',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:31:40.116Z',
  label: 'validation'
}
{
  message: 'Received a POST request for /data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:32:51.885Z',
  label: 'validation'
}
{
  message: 'No correlation-id found creating new correlation-id header of: f9e42b00-2577-11ee-8906-41e0bd1258b7',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:32:51.888Z',
  label: 'validation'
}
{
  message: 'Received a POST request for /data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:33:53.835Z',
  label: 'validation'
}
{
  message: 'No correlation-id found creating new correlation-id header of: 1ed123f0-2578-11ee-bd33-a1ad6437fae9',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:33:53.839Z',
  label: 'validation'
}
{
  message: 'Received a POST request for /data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:34:36.394Z',
  label: 'validation'
}
{
  message: 'No correlation-id found creating new correlation-id header of: 382ef9d0-2578-11ee-8a53-875dfebb4421',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:34:36.397Z',
  label: 'validation'
}
{
  message: 'Received a POST request for /data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:35:17.368Z',
  label: 'validation'
}
{
  message: 'No correlation-id found creating new correlation-id header of: 509b1cb0-2578-11ee-a427-9f8960f88f44',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:35:17.372Z',
  label: 'validation'
}
{
  message: 'Received a POST request for /data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:37:09.490Z',
  label: 'validation'
}
{
  message: 'No correlation-id found creating new correlation-id header of: 936f9250-2578-11ee-9ed8-01c82a9e7b8f',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:37:09.493Z',
  label: 'validation'
}
{
  _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  destroyed: false,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  _defaultKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: 481,
  _hasBody: true,
  _trailer: '',
  finished: true,
  _headerSent: true,
  socket: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      errored: null,
      closed: false,
      closeEmitted: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      dataEmitted: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    _events: [Object: null prototype] {
      end: [
        [Function: onReadableStreamEnd],
        [Function: bound socketOnEnd]
      ],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [
        [Function: bound socketOnClose],
        [Function: onServerResponseClose]
      ],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: <ref *2> WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: {
        count: 1,
        cb: [Function (anonymous)],
        stream: [Circular *1],
        state: [Circular *2]
      },
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 1,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      errored: null,
      closed: false,
      closeEmitted: false
    },
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: <ref *4> Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      _events: [Object: null prototype] {
        request: <ref *3> [Function: app] {
          _events: [Object: null prototype] { mount: [Function: onmount] },
          _eventsCount: 1,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames],
          init: [Function: init],
          defaultConfiguration: [Function: defaultConfiguration],
          lazyrouter: [Function: lazyrouter],
          handle: [Function: handle],
          use: [Function: use],
          route: [Function: route],
          engine: [Function: engine],
          param: [Function: param],
          set: [Function: set],
          path: [Function: path],
          enabled: [Function: enabled],
          disabled: [Function: disabled],
          enable: [Function: enable],
          disable: [Function: disable],
          acl: [Function (anonymous)],
          bind: [Function (anonymous)],
          checkout: [Function (anonymous)],
          connect: [Function (anonymous)],
          copy: [Function (anonymous)],
          delete: [Function (anonymous)],
          get: [Function (anonymous)],
          head: [Function (anonymous)],
          link: [Function (anonymous)],
          lock: [Function (anonymous)],
          'm-search': [Function (anonymous)],
          merge: [Function (anonymous)],
          mkactivity: [Function (anonymous)],
          mkcalendar: [Function (anonymous)],
          mkcol: [Function (anonymous)],
          move: [Function (anonymous)],
          notify: [Function (anonymous)],
          options: [Function (anonymous)],
          patch: [Function (anonymous)],
          post: [Function (anonymous)],
          pri: [Function (anonymous)],
          propfind: [Function (anonymous)],
          proppatch: [Function (anonymous)],
          purge: [Function (anonymous)],
          put: [Function (anonymous)],
          rebind: [Function (anonymous)],
          report: [Function (anonymous)],
          search: [Function (anonymous)],
          source: [Function (anonymous)],
          subscribe: [Function (anonymous)],
          trace: [Function (anonymous)],
          unbind: [Function (anonymous)],
          unlink: [Function (anonymous)],
          unlock: [Function (anonymous)],
          unsubscribe: [Function (anonymous)],
          all: [Function: all],
          del: [Function (anonymous)],
          render: [Function: render],
          listen: [Function: listen],
          request: IncomingMessage { app: [Circular *3] },
          response: ServerResponse { app: [Circular *3] },
          cache: {},
          engines: {},
          settings: {
            'x-powered-by': true,
            etag: 'weak',
            'etag fn': [Function: generateETag],
            env: 'development',
            'query parser': 'extended',
            'query parser fn': [Function: parseExtendedQueryString],
            'subdomain offset': 2,
            'trust proxy': false,
            'trust proxy fn': [Function: trustNone],
            view: [Function: View],
            views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
            'jsonp callback name': 'callback'
          },
          locals: [Object: null prototype] {
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            }
          },
          mountpath: '/',
          _router: [Function: router] {
            params: {},
            _params: [],
            caseSensitive: false,
            mergeParams: undefined,
            strict: false,
            stack: [
              Layer {
                handle: [Function: query],
                name: 'query',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: expressInit],
                name: 'expressInit',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: urlencodedParser],
                name: 'urlencodedParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: jsonParser],
                name: 'jsonParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: router] {
                  params: {},
                  _params: [],
                  caseSensitive: undefined,
                  mergeParams: undefined,
                  strict: undefined,
                  stack: [
                    Layer {
                      handle: [AsyncFunction: authCheck],
                      name: 'authCheck',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [AsyncFunction: appJsonHeader],
                      name: 'appJsonHeader',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [AsyncFunction: qpCheck],
                      name: 'qpCheck',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [AsyncFunction: bodyData],
                      name: 'bodyData',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/health\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/health',
                        stack: [
                          Layer {
                            handle: [AsyncFunction: healthStatus],
                            name: 'healthStatus',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          }
                        ],
                        methods: { get: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: {},
                      path: '/getProfileIds',
                      keys: [],
                      regexp: /^\/getProfileIds\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/getProfileIds',
                        stack: [
                          Layer {
                            handle: [AsyncFunction: getProfileIds],
                            name: 'getProfileIds',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          }
                        ],
                        methods: { post: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/createUsers\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/createUsers',
                        stack: [
                          Layer {
                            handle: [AsyncFunction: createUsers],
                            name: 'createUsers',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          }
                        ],
                        methods: { post: true }
                      }
                    },
                    Layer {
                      handle: [Function: SuccessHandler],
                      name: 'SuccessHandler',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: ErrorHandler],
                      name: 'ErrorHandler',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    }
                  ]
                },
                name: 'router',
                params: {},
                path: '/data/api-management/apis/v1',
                keys: [],
                regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '/data/api-management/apis/v1',
                keys: [],
                regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: undefined
              }
            ]
          }
        },
        connection: [Function: connectionListener]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: TCP {
        reading: false,
        onconnection: [Function: onconnection],
        [Symbol(owner_symbol)]: [Circular *4]
      },
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      requestTimeout: 0,
      _connectionKey: '6::::8004',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 157
    },
    _server: <ref *4> Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      _events: [Object: null prototype] {
        request: <ref *3> [Function: app] {
          _events: [Object: null prototype] { mount: [Function: onmount] },
          _eventsCount: 1,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames],
          init: [Function: init],
          defaultConfiguration: [Function: defaultConfiguration],
          lazyrouter: [Function: lazyrouter],
          handle: [Function: handle],
          use: [Function: use],
          route: [Function: route],
          engine: [Function: engine],
          param: [Function: param],
          set: [Function: set],
          path: [Function: path],
          enabled: [Function: enabled],
          disabled: [Function: disabled],
          enable: [Function: enable],
          disable: [Function: disable],
          acl: [Function (anonymous)],
          bind: [Function (anonymous)],
          checkout: [Function (anonymous)],
          connect: [Function (anonymous)],
          copy: [Function (anonymous)],
          delete: [Function (anonymous)],
          get: [Function (anonymous)],
          head: [Function (anonymous)],
          link: [Function (anonymous)],
          lock: [Function (anonymous)],
          'm-search': [Function (anonymous)],
          merge: [Function (anonymous)],
          mkactivity: [Function (anonymous)],
          mkcalendar: [Function (anonymous)],
          mkcol: [Function (anonymous)],
          move: [Function (anonymous)],
          notify: [Function (anonymous)],
          options: [Function (anonymous)],
          patch: [Function (anonymous)],
          post: [Function (anonymous)],
          pri: [Function (anonymous)],
          propfind: [Function (anonymous)],
          proppatch: [Function (anonymous)],
          purge: [Function (anonymous)],
          put: [Function (anonymous)],
          rebind: [Function (anonymous)],
          report: [Function (anonymous)],
          search: [Function (anonymous)],
          source: [Function (anonymous)],
          subscribe: [Function (anonymous)],
          trace: [Function (anonymous)],
          unbind: [Function (anonymous)],
          unlink: [Function (anonymous)],
          unlock: [Function (anonymous)],
          unsubscribe: [Function (anonymous)],
          all: [Function: all],
          del: [Function (anonymous)],
          render: [Function: render],
          listen: [Function: listen],
          request: IncomingMessage { app: [Circular *3] },
          response: ServerResponse { app: [Circular *3] },
          cache: {},
          engines: {},
          settings: {
            'x-powered-by': true,
            etag: 'weak',
            'etag fn': [Function: generateETag],
            env: 'development',
            'query parser': 'extended',
            'query parser fn': [Function: parseExtendedQueryString],
            'subdomain offset': 2,
            'trust proxy': false,
            'trust proxy fn': [Function: trustNone],
            view: [Function: View],
            views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
            'jsonp callback name': 'callback'
          },
          locals: [Object: null prototype] {
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            }
          },
          mountpath: '/',
          _router: [Function: router] {
            params: {},
            _params: [],
            caseSensitive: false,
            mergeParams: undefined,
            strict: false,
            stack: [
              Layer {
                handle: [Function: query],
                name: 'query',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: expressInit],
                name: 'expressInit',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: urlencodedParser],
                name: 'urlencodedParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: jsonParser],
                name: 'jsonParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: router] {
                  params: {},
                  _params: [],
                  caseSensitive: undefined,
                  mergeParams: undefined,
                  strict: undefined,
                  stack: [
                    Layer {
                      handle: [AsyncFunction: authCheck],
                      name: 'authCheck',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [AsyncFunction: appJsonHeader],
                      name: 'appJsonHeader',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [AsyncFunction: qpCheck],
                      name: 'qpCheck',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [AsyncFunction: bodyData],
                      name: 'bodyData',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/health\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/health',
                        stack: [
                          Layer {
                            handle: [AsyncFunction: healthStatus],
                            name: 'healthStatus',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          }
                        ],
                        methods: { get: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: {},
                      path: '/getProfileIds',
                      keys: [],
                      regexp: /^\/getProfileIds\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/getProfileIds',
                        stack: [
                          Layer {
                            handle: [AsyncFunction: getProfileIds],
                            name: 'getProfileIds',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          }
                        ],
                        methods: { post: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/createUsers\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/createUsers',
                        stack: [
                          Layer {
                            handle: [AsyncFunction: createUsers],
                            name: 'createUsers',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          }
                        ],
                        methods: { post: true }
                      }
                    },
                    Layer {
                      handle: [Function: SuccessHandler],
                      name: 'SuccessHandler',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: ErrorHandler],
                      name: 'ErrorHandler',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    }
                  ]
                },
                name: 'router',
                params: {},
                path: '/data/api-management/apis/v1',
                keys: [],
                regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '/data/api-management/apis/v1',
                keys: [],
                regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: undefined
              }
            ]
          }
        },
        connection: [Function: connectionListener]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: TCP {
        reading: false,
        onconnection: [Function: onconnection],
        [Symbol(owner_symbol)]: [Circular *4]
      },
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      requestTimeout: 0,
      _connectionKey: '6::::8004',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 157
    },
    parser: HTTPParser {
      '0': [Function: bound setRequestTimeout],
      '1': [Function: parserOnHeaders],
      '2': [Function: parserOnHeadersComplete],
      '3': [Function: parserOnBody],
      '4': [Function: parserOnMessageComplete],
      '5': [Function: bound onParserExecute],
      '6': [Function: bound onParserTimeout],
      _headers: [],
      _url: '',
      socket: [Circular *1],
      incoming: <ref *5> IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          sync: false,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [Function: clearRequestTimeout]
        },
        _eventsCount: 1,
        _maxListeners: undefined,
        socket: [Circular *1],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: {
          'content-type': 'application/json',
          authorization: 'Bearer TkhOU1JYTlBia3g1',
          'user-agent': 'PostmanRuntime/7.32.3',
          accept: '*/*',
          'cache-control': 'no-cache',
          'postman-token': '1ebfcf2c-787a-4f21-8e3e-73744ff17ca1',
          host: 'localhost:8004',
          'accept-encoding': 'gzip, deflate, br',
          connection: 'keep-alive',
          'content-length': '232',
          'correlation-id': '936f9250-2578-11ee-9ed8-01c82a9e7b8f'
        },
        rawHeaders: [
          'Content-Type',
          'application/json',
          'Authorization',
          'Bearer TkhOU1JYTlBia3g1',
          'User-Agent',
          'PostmanRuntime/7.32.3',
          'Accept',
          '*/*',
          'Cache-Control',
          'no-cache',
          'Postman-Token',
          '1ebfcf2c-787a-4f21-8e3e-73744ff17ca1',
          'Host',
          'localhost:8004',
          'Accept-Encoding',
          'gzip, deflate, br',
          'Connection',
          'keep-alive',
          'Content-Length',
          '232'
        ],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '/getProfileIds?coll=homework&id=homework&version=1.0.0',
        method: 'POST',
        statusCode: null,
        statusMessage: null,
        client: [Circular *1],
        _consuming: true,
        _dumped: false,
        next: [Function: next],
        baseUrl: '/data/api-management/apis/v1',
        originalUrl: '/data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0',
        _parsedUrl: Url {
          protocol: null,
          slashes: null,
          auth: null,
          host: null,
          port: null,
          hostname: null,
          hash: null,
          search: '?coll=homework&id=homework&version=1.0.0',
          query: 'coll=homework&id=homework&version=1.0.0',
          pathname: '/getProfileIds',
          path: '/getProfileIds?coll=homework&id=homework&version=1.0.0',
          href: '/getProfileIds?coll=homework&id=homework&version=1.0.0',
          _raw: '/getProfileIds?coll=homework&id=homework&version=1.0.0'
        },
        params: {},
        query: { coll: 'homework', id: 'homework', version: '1.0.0' },
        res: ServerResponse {
          _events: [Object: null prototype] {
            finish: [Function: bound resOnFinish]
          },
          _eventsCount: 1,
          _maxListeners: undefined,
          outputData: [],
          outputSize: 0,
          writable: true,
          destroyed: false,
          _last: false,
          chunkedEncoding: false,
          shouldKeepAlive: true,
          _defaultKeepAlive: true,
          useChunkedEncodingByDefault: true,
          sendDate: true,
          _removedConnection: false,
          _removedContLen: false,
          _removedTE: false,
          _contentLength: 481,
          _hasBody: true,
          _trailer: '',
          finished: true,
          _headerSent: true,
          socket: [Circular *1],
          _header: 'HTTP/1.1 200 OK\r\n' +
            'X-Powered-By: Express\r\n' +
            'correlation-id: 936f9250-2578-11ee-9ed8-01c82a9e7b8f\r\n' +
            'Content-Type: application/json; charset=utf-8\r\n' +
            'Content-Length: 481\r\n' +
            'ETag: W/"1e1-6BNpwrLXqGRlO8hujhk63Al5xBM"\r\n' +
            'Date: Tue, 18 Jul 2023 14:37:26 GMT\r\n' +
            'Connection: keep-alive\r\n' +
            'Keep-Alive: timeout=5\r\n' +
            '\r\n',
          _keepAliveTimeout: 5000,
          _onPendingData: [Function: bound updateOutgoingData],
          _sent100: false,
          _expect_continue: false,
          req: [Circular *5],
          locals: [Object: null prototype] {},
          statusCode: 200,
          message: 'Successfully Pulled All Needed Profile Ids',
          success: {
            profileIds: [
              {
                profileName: 'Partner',
                profileId: '00eDw000000R6XFIA0'
              },
              {
                profileName: 'Attorney',
                profileId: '00eDw000000R6XKIA0'
              },
              {
                profileName: 'Paralegal/CM',
                profileId: '00eDw000000R6XPIA0'
              },
              {
                profileName: 'Financial',
                profileId: '00eDw000000R6XUIA0'
              },
              {
                profileName: 'IT/Admin',
                profileId: '00eDw000000R6XZIA0'
              }
            ]
          },
          statusMessage: 'OK',
          level: 'info',
          service: 'some-random-service',
          timestamp: '2023-07-18T14:37:26.690Z',
          label: 'validation',
          [Symbol(kCapture)]: false,
          [Symbol(kNeedDrain)]: false,
          [Symbol(corked)]: 0,
          [Symbol(kOutHeaders)]: [Object: null prototype] {
            'x-powered-by': [ 'X-Powered-By', 'Express' ],
            'correlation-id': [
              'correlation-id',
              '936f9250-2578-11ee-9ed8-01c82a9e7b8f'
            ],
            'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
            'content-length': [ 'Content-Length', '481' ],
            etag: [ 'ETag', 'W/"1e1-6BNpwrLXqGRlO8hujhk63Al5xBM"' ]
          },
          [Symbol(level)]: 'info',
          [Symbol(message)]: '{"_contentLength":481,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":"HTTP/1.1 200 OK\\r\\nX-Powered-By: Express\\r\\ncorrelation-id: 936f9250-2578-11ee-9ed8-01c82a9e7b8f\\r\\nContent-Type: application/json; charset=utf-8\\r\\nContent-Length: 481\\r\\nETag: W/\\"1e1-6BNpwrLXqGRlO8hujhk63Al5xBM\\"\\r\\nDate: Tue, 18 Jul 2023 14:37:26 GMT\\r\\nConnection: keep-alive\\r\\nKeep-Alive: timeout=5\\r\\n\\r\\n","_headerSent":true,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":true,"label":"validation","level":"info","locals":{},"message":"Successfully Pulled All Needed Profile Ids","outputData":[],"outputSize":0,"req":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/getProfileIds?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/getProfileIds?coll=homework&id=homework&version=1.0.0","path":"/getProfileIds?coll=homework&id=homework&version=1.0.0","pathname":"/getProfileIds","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"936f9250-2578-11ee-9ed8-01c82a9e7b8f","host":"localhost:8004","postman-token":"1ebfcf2c-787a-4f21-8e3e-73744ff17ca1","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","1ebfcf2c-787a-4f21-8e3e-73744ff17ca1","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/getProfileIds","stack":[{"keys":[],"method":"post","name":"getProfileIds","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/getProfileIds?coll=homework&id=homework&version=1.0.0"},"sendDate":true,"service":"some-random-service","shouldKeepAlive":true,"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/getProfileIds?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/getProfileIds?coll=homework&id=homework&version=1.0.0","path":"/getProfileIds?coll=homework&id=homework&version=1.0.0","pathname":"/getProfileIds","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":"[Circular]","complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"936f9250-2578-11ee-9ed8-01c82a9e7b8f","host":"localhost:8004","postman-token":"1ebfcf2c-787a-4f21-8e3e-73744ff17ca1","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","1ebfcf2c-787a-4f21-8e3e-73744ff17ca1","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/getProfileIds","stack":[{"keys":[],"method":"post","name":"getProfileIds","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":"[Circular]","statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/getProfileIds?coll=homework&id=homework&version=1.0.0"},"maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":200,"statusMessage":"OK","success":{"profileIds":[{"profileId":"00eDw000000R6XFIA0","profileName":"Partner"},{"profileId":"00eDw000000R6XKIA0","profileName":"Attorney"},{"profileId":"00eDw000000R6XPIA0","profileName":"Paralegal/CM"},{"profileId":"00eDw000000R6XUIA0","profileName":"Financial"},{"profileId":"00eDw000000R6XZIA0","profileName":"IT/Admin"}]},"timestamp":"2023-07-18T14:37:26.690Z","useChunkedEncodingByDefault":true,"writable":true}'
        },
        body: {
          salesforceOrgApiUrl: 'https://cmentor--tammisb.sandbox.my.salesforce.com',
          accessToken: 'Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q'
        },
        _body: true,
        length: undefined,
        getId: [Function (anonymous)],
        route: Route {
          path: '/getProfileIds',
          stack: [
            Layer {
              handle: [AsyncFunction: getProfileIds],
              name: 'getProfileIds',
              params: undefined,
              path: undefined,
              keys: [],
              regexp: /^\/?$/i { fast_star: false, fast_slash: false },
              method: 'post'
            },
            Layer {
              handle: [Function (anonymous)],
              name: '<anonymous>',
              params: undefined,
              path: undefined,
              keys: [],
              regexp: /^\/?$/i { fast_star: false, fast_slash: false },
              method: 'post'
            }
          ],
          methods: { post: true }
        },
        [Symbol(kCapture)]: false,
        [Symbol(RequestTimeout)]: undefined
      },
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      [Symbol(resource_symbol)]: HTTPServerAsyncResource {
        type: 'HTTPINCOMINGMESSAGE',
        socket: [Circular *1]
      }
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: <ref *6> ServerResponse {
      _events: [Object: null prototype] {
        finish: [Function: bound resOnFinish]
      },
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: 481,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      socket: [Circular *1],
      _header: 'HTTP/1.1 200 OK\r\n' +
        'X-Powered-By: Express\r\n' +
        'correlation-id: 936f9250-2578-11ee-9ed8-01c82a9e7b8f\r\n' +
        'Content-Type: application/json; charset=utf-8\r\n' +
        'Content-Length: 481\r\n' +
        'ETag: W/"1e1-6BNpwrLXqGRlO8hujhk63Al5xBM"\r\n' +
        'Date: Tue, 18 Jul 2023 14:37:26 GMT\r\n' +
        'Connection: keep-alive\r\n' +
        'Keep-Alive: timeout=5\r\n' +
        '\r\n',
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      _sent100: false,
      _expect_continue: false,
      req: <ref *5> IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          sync: false,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [Function: clearRequestTimeout]
        },
        _eventsCount: 1,
        _maxListeners: undefined,
        socket: [Circular *1],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: {
          'content-type': 'application/json',
          authorization: 'Bearer TkhOU1JYTlBia3g1',
          'user-agent': 'PostmanRuntime/7.32.3',
          accept: '*/*',
          'cache-control': 'no-cache',
          'postman-token': '1ebfcf2c-787a-4f21-8e3e-73744ff17ca1',
          host: 'localhost:8004',
          'accept-encoding': 'gzip, deflate, br',
          connection: 'keep-alive',
          'content-length': '232',
          'correlation-id': '936f9250-2578-11ee-9ed8-01c82a9e7b8f'
        },
        rawHeaders: [
          'Content-Type',
          'application/json',
          'Authorization',
          'Bearer TkhOU1JYTlBia3g1',
          'User-Agent',
          'PostmanRuntime/7.32.3',
          'Accept',
          '*/*',
          'Cache-Control',
          'no-cache',
          'Postman-Token',
          '1ebfcf2c-787a-4f21-8e3e-73744ff17ca1',
          'Host',
          'localhost:8004',
          'Accept-Encoding',
          'gzip, deflate, br',
          'Connection',
          'keep-alive',
          'Content-Length',
          '232'
        ],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '/getProfileIds?coll=homework&id=homework&version=1.0.0',
        method: 'POST',
        statusCode: null,
        statusMessage: null,
        client: [Circular *1],
        _consuming: true,
        _dumped: false,
        next: [Function: next],
        baseUrl: '/data/api-management/apis/v1',
        originalUrl: '/data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0',
        _parsedUrl: Url {
          protocol: null,
          slashes: null,
          auth: null,
          host: null,
          port: null,
          hostname: null,
          hash: null,
          search: '?coll=homework&id=homework&version=1.0.0',
          query: 'coll=homework&id=homework&version=1.0.0',
          pathname: '/getProfileIds',
          path: '/getProfileIds?coll=homework&id=homework&version=1.0.0',
          href: '/getProfileIds?coll=homework&id=homework&version=1.0.0',
          _raw: '/getProfileIds?coll=homework&id=homework&version=1.0.0'
        },
        params: {},
        query: { coll: 'homework', id: 'homework', version: '1.0.0' },
        res: [Circular *6],
        body: {
          salesforceOrgApiUrl: 'https://cmentor--tammisb.sandbox.my.salesforce.com',
          accessToken: 'Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q'
        },
        _body: true,
        length: undefined,
        getId: [Function (anonymous)],
        route: Route {
          path: '/getProfileIds',
          stack: [
            Layer {
              handle: [AsyncFunction: getProfileIds],
              name: 'getProfileIds',
              params: undefined,
              path: undefined,
              keys: [],
              regexp: /^\/?$/i { fast_star: false, fast_slash: false },
              method: 'post'
            },
            Layer {
              handle: [Function (anonymous)],
              name: '<anonymous>',
              params: undefined,
              path: undefined,
              keys: [],
              regexp: /^\/?$/i { fast_star: false, fast_slash: false },
              method: 'post'
            }
          ],
          methods: { post: true }
        },
        [Symbol(kCapture)]: false,
        [Symbol(RequestTimeout)]: undefined
      },
      locals: [Object: null prototype] {},
      statusCode: 200,
      message: 'Successfully Pulled All Needed Profile Ids',
      success: {
        profileIds: [
          { profileName: 'Partner', profileId: '00eDw000000R6XFIA0' },
          { profileName: 'Attorney', profileId: '00eDw000000R6XKIA0' },
          {
            profileName: 'Paralegal/CM',
            profileId: '00eDw000000R6XPIA0'
          },
          { profileName: 'Financial', profileId: '00eDw000000R6XUIA0' },
          { profileName: 'IT/Admin', profileId: '00eDw000000R6XZIA0' }
        ]
      },
      statusMessage: 'OK',
      level: 'info',
      service: 'some-random-service',
      timestamp: '2023-07-18T14:37:26.690Z',
      label: 'validation',
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        'x-powered-by': [ 'X-Powered-By', 'Express' ],
        'correlation-id': [ 'correlation-id', '936f9250-2578-11ee-9ed8-01c82a9e7b8f' ],
        'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
        'content-length': [ 'Content-Length', '481' ],
        etag: [ 'ETag', 'W/"1e1-6BNpwrLXqGRlO8hujhk63Al5xBM"' ]
      },
      [Symbol(level)]: 'info',
      [Symbol(message)]: '{"_contentLength":481,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":"HTTP/1.1 200 OK\\r\\nX-Powered-By: Express\\r\\ncorrelation-id: 936f9250-2578-11ee-9ed8-01c82a9e7b8f\\r\\nContent-Type: application/json; charset=utf-8\\r\\nContent-Length: 481\\r\\nETag: W/\\"1e1-6BNpwrLXqGRlO8hujhk63Al5xBM\\"\\r\\nDate: Tue, 18 Jul 2023 14:37:26 GMT\\r\\nConnection: keep-alive\\r\\nKeep-Alive: timeout=5\\r\\n\\r\\n","_headerSent":true,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":true,"label":"validation","level":"info","locals":{},"message":"Successfully Pulled All Needed Profile Ids","outputData":[],"outputSize":0,"req":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/getProfileIds?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/getProfileIds?coll=homework&id=homework&version=1.0.0","path":"/getProfileIds?coll=homework&id=homework&version=1.0.0","pathname":"/getProfileIds","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"936f9250-2578-11ee-9ed8-01c82a9e7b8f","host":"localhost:8004","postman-token":"1ebfcf2c-787a-4f21-8e3e-73744ff17ca1","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","1ebfcf2c-787a-4f21-8e3e-73744ff17ca1","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/getProfileIds","stack":[{"keys":[],"method":"post","name":"getProfileIds","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/getProfileIds?coll=homework&id=homework&version=1.0.0"},"sendDate":true,"service":"some-random-service","shouldKeepAlive":true,"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/getProfileIds?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/getProfileIds?coll=homework&id=homework&version=1.0.0","path":"/getProfileIds?coll=homework&id=homework&version=1.0.0","pathname":"/getProfileIds","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":"[Circular]","complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"936f9250-2578-11ee-9ed8-01c82a9e7b8f","host":"localhost:8004","postman-token":"1ebfcf2c-787a-4f21-8e3e-73744ff17ca1","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","1ebfcf2c-787a-4f21-8e3e-73744ff17ca1","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/getProfileIds","stack":[{"keys":[],"method":"post","name":"getProfileIds","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":"[Circular]","statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/getProfileIds?coll=homework&id=homework&version=1.0.0"},"maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":200,"statusMessage":"OK","success":{"profileIds":[{"profileId":"00eDw000000R6XFIA0","profileName":"Partner"},{"profileId":"00eDw000000R6XKIA0","profileName":"Attorney"},{"profileId":"00eDw000000R6XPIA0","profileName":"Paralegal/CM"},{"profileId":"00eDw000000R6XUIA0","profileName":"Financial"},{"profileId":"00eDw000000R6XZIA0","profileName":"IT/Admin"}]},"timestamp":"2023-07-18T14:37:26.690Z","useChunkedEncodingByDefault":true,"writable":true}'
    },
    [Symbol(async_id_symbol)]: 167,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular *1]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(RequestTimeout)]: undefined
  },
  _header: 'HTTP/1.1 200 OK\r\n' +
    'X-Powered-By: Express\r\n' +
    'correlation-id: 936f9250-2578-11ee-9ed8-01c82a9e7b8f\r\n' +
    'Content-Type: application/json; charset=utf-8\r\n' +
    'Content-Length: 481\r\n' +
    'ETag: W/"1e1-6BNpwrLXqGRlO8hujhk63Al5xBM"\r\n' +
    'Date: Tue, 18 Jul 2023 14:37:26 GMT\r\n' +
    'Connection: keep-alive\r\n' +
    'Keep-Alive: timeout=5\r\n' +
    '\r\n',
  _keepAliveTimeout: 5000,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: <ref *5> IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: true,
      ended: true,
      endEmitted: true,
      reading: false,
      sync: false,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      errored: null,
      closed: false,
      closeEmitted: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      dataEmitted: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: qpCheck],
                        name: 'qpCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/getProfileIds',
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 157
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: qpCheck],
                        name: 'qpCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/getProfileIds',
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 157
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: [Circular *5],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: <ref *6> ServerResponse {
        _events: [Object: null prototype] {
          finish: [Function: bound resOnFinish]
        },
        _eventsCount: 1,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 481,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Circular *1],
        _header: 'HTTP/1.1 200 OK\r\n' +
          'X-Powered-By: Express\r\n' +
          'correlation-id: 936f9250-2578-11ee-9ed8-01c82a9e7b8f\r\n' +
          'Content-Type: application/json; charset=utf-8\r\n' +
          'Content-Length: 481\r\n' +
          'ETag: W/"1e1-6BNpwrLXqGRlO8hujhk63Al5xBM"\r\n' +
          'Date: Tue, 18 Jul 2023 14:37:26 GMT\r\n' +
          'Connection: keep-alive\r\n' +
          'Keep-Alive: timeout=5\r\n' +
          '\r\n',
        _keepAliveTimeout: 5000,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular *5],
        locals: [Object: null prototype] {},
        statusCode: 200,
        message: 'Successfully Pulled All Needed Profile Ids',
        success: {
          profileIds: [
            { profileName: 'Partner', profileId: '00eDw000000R6XFIA0' },
            {
              profileName: 'Attorney',
              profileId: '00eDw000000R6XKIA0'
            },
            {
              profileName: 'Paralegal/CM',
              profileId: '00eDw000000R6XPIA0'
            },
            {
              profileName: 'Financial',
              profileId: '00eDw000000R6XUIA0'
            },
            {
              profileName: 'IT/Admin',
              profileId: '00eDw000000R6XZIA0'
            }
          ]
        },
        statusMessage: 'OK',
        level: 'info',
        service: 'some-random-service',
        timestamp: '2023-07-18T14:37:26.690Z',
        label: 'validation',
        [Symbol(kCapture)]: false,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          'x-powered-by': [ 'X-Powered-By', 'Express' ],
          'correlation-id': [ 'correlation-id', '936f9250-2578-11ee-9ed8-01c82a9e7b8f' ],
          'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
          'content-length': [ 'Content-Length', '481' ],
          etag: [ 'ETag', 'W/"1e1-6BNpwrLXqGRlO8hujhk63Al5xBM"' ]
        },
        [Symbol(level)]: 'info',
        [Symbol(message)]: '{"_contentLength":481,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":"HTTP/1.1 200 OK\\r\\nX-Powered-By: Express\\r\\ncorrelation-id: 936f9250-2578-11ee-9ed8-01c82a9e7b8f\\r\\nContent-Type: application/json; charset=utf-8\\r\\nContent-Length: 481\\r\\nETag: W/\\"1e1-6BNpwrLXqGRlO8hujhk63Al5xBM\\"\\r\\nDate: Tue, 18 Jul 2023 14:37:26 GMT\\r\\nConnection: keep-alive\\r\\nKeep-Alive: timeout=5\\r\\n\\r\\n","_headerSent":true,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":true,"label":"validation","level":"info","locals":{},"message":"Successfully Pulled All Needed Profile Ids","outputData":[],"outputSize":0,"req":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/getProfileIds?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/getProfileIds?coll=homework&id=homework&version=1.0.0","path":"/getProfileIds?coll=homework&id=homework&version=1.0.0","pathname":"/getProfileIds","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"936f9250-2578-11ee-9ed8-01c82a9e7b8f","host":"localhost:8004","postman-token":"1ebfcf2c-787a-4f21-8e3e-73744ff17ca1","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","1ebfcf2c-787a-4f21-8e3e-73744ff17ca1","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/getProfileIds","stack":[{"keys":[],"method":"post","name":"getProfileIds","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/getProfileIds?coll=homework&id=homework&version=1.0.0"},"sendDate":true,"service":"some-random-service","shouldKeepAlive":true,"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/getProfileIds?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/getProfileIds?coll=homework&id=homework&version=1.0.0","path":"/getProfileIds?coll=homework&id=homework&version=1.0.0","pathname":"/getProfileIds","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":"[Circular]","complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"936f9250-2578-11ee-9ed8-01c82a9e7b8f","host":"localhost:8004","postman-token":"1ebfcf2c-787a-4f21-8e3e-73744ff17ca1","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","1ebfcf2c-787a-4f21-8e3e-73744ff17ca1","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/getProfileIds","stack":[{"keys":[],"method":"post","name":"getProfileIds","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":"[Circular]","statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/getProfileIds?coll=homework&id=homework&version=1.0.0"},"maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":200,"statusMessage":"OK","success":{"profileIds":[{"profileId":"00eDw000000R6XFIA0","profileName":"Partner"},{"profileId":"00eDw000000R6XKIA0","profileName":"Attorney"},{"profileId":"00eDw000000R6XPIA0","profileName":"Paralegal/CM"},{"profileId":"00eDw000000R6XUIA0","profileName":"Financial"},{"profileId":"00eDw000000R6XZIA0","profileName":"IT/Admin"}]},"timestamp":"2023-07-18T14:37:26.690Z","useChunkedEncodingByDefault":true,"writable":true}'
      },
      [Symbol(async_id_symbol)]: 167,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: true,
    headers: {
      'content-type': 'application/json',
      authorization: 'Bearer TkhOU1JYTlBia3g1',
      'user-agent': 'PostmanRuntime/7.32.3',
      accept: '*/*',
      'cache-control': 'no-cache',
      'postman-token': '1ebfcf2c-787a-4f21-8e3e-73744ff17ca1',
      host: 'localhost:8004',
      'accept-encoding': 'gzip, deflate, br',
      connection: 'keep-alive',
      'content-length': '232',
      'correlation-id': '936f9250-2578-11ee-9ed8-01c82a9e7b8f'
    },
    rawHeaders: [
      'Content-Type',
      'application/json',
      'Authorization',
      'Bearer TkhOU1JYTlBia3g1',
      'User-Agent',
      'PostmanRuntime/7.32.3',
      'Accept',
      '*/*',
      'Cache-Control',
      'no-cache',
      'Postman-Token',
      '1ebfcf2c-787a-4f21-8e3e-73744ff17ca1',
      'Host',
      'localhost:8004',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Connection',
      'keep-alive',
      'Content-Length',
      '232'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/getProfileIds?coll=homework&id=homework&version=1.0.0',
    method: 'POST',
    statusCode: null,
    statusMessage: null,
    client: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: qpCheck],
                        name: 'qpCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/getProfileIds',
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 157
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: qpCheck],
                        name: 'qpCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/getProfileIds',
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 157
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: [Circular *5],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: <ref *6> ServerResponse {
        _events: [Object: null prototype] {
          finish: [Function: bound resOnFinish]
        },
        _eventsCount: 1,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 481,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Circular *1],
        _header: 'HTTP/1.1 200 OK\r\n' +
          'X-Powered-By: Express\r\n' +
          'correlation-id: 936f9250-2578-11ee-9ed8-01c82a9e7b8f\r\n' +
          'Content-Type: application/json; charset=utf-8\r\n' +
          'Content-Length: 481\r\n' +
          'ETag: W/"1e1-6BNpwrLXqGRlO8hujhk63Al5xBM"\r\n' +
          'Date: Tue, 18 Jul 2023 14:37:26 GMT\r\n' +
          'Connection: keep-alive\r\n' +
          'Keep-Alive: timeout=5\r\n' +
          '\r\n',
        _keepAliveTimeout: 5000,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular *5],
        locals: [Object: null prototype] {},
        statusCode: 200,
        message: 'Successfully Pulled All Needed Profile Ids',
        success: {
          profileIds: [
            { profileName: 'Partner', profileId: '00eDw000000R6XFIA0' },
            {
              profileName: 'Attorney',
              profileId: '00eDw000000R6XKIA0'
            },
            {
              profileName: 'Paralegal/CM',
              profileId: '00eDw000000R6XPIA0'
            },
            {
              profileName: 'Financial',
              profileId: '00eDw000000R6XUIA0'
            },
            {
              profileName: 'IT/Admin',
              profileId: '00eDw000000R6XZIA0'
            }
          ]
        },
        statusMessage: 'OK',
        level: 'info',
        service: 'some-random-service',
        timestamp: '2023-07-18T14:37:26.690Z',
        label: 'validation',
        [Symbol(kCapture)]: false,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          'x-powered-by': [ 'X-Powered-By', 'Express' ],
          'correlation-id': [ 'correlation-id', '936f9250-2578-11ee-9ed8-01c82a9e7b8f' ],
          'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
          'content-length': [ 'Content-Length', '481' ],
          etag: [ 'ETag', 'W/"1e1-6BNpwrLXqGRlO8hujhk63Al5xBM"' ]
        },
        [Symbol(level)]: 'info',
        [Symbol(message)]: '{"_contentLength":481,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":"HTTP/1.1 200 OK\\r\\nX-Powered-By: Express\\r\\ncorrelation-id: 936f9250-2578-11ee-9ed8-01c82a9e7b8f\\r\\nContent-Type: application/json; charset=utf-8\\r\\nContent-Length: 481\\r\\nETag: W/\\"1e1-6BNpwrLXqGRlO8hujhk63Al5xBM\\"\\r\\nDate: Tue, 18 Jul 2023 14:37:26 GMT\\r\\nConnection: keep-alive\\r\\nKeep-Alive: timeout=5\\r\\n\\r\\n","_headerSent":true,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":true,"label":"validation","level":"info","locals":{},"message":"Successfully Pulled All Needed Profile Ids","outputData":[],"outputSize":0,"req":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/getProfileIds?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/getProfileIds?coll=homework&id=homework&version=1.0.0","path":"/getProfileIds?coll=homework&id=homework&version=1.0.0","pathname":"/getProfileIds","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"936f9250-2578-11ee-9ed8-01c82a9e7b8f","host":"localhost:8004","postman-token":"1ebfcf2c-787a-4f21-8e3e-73744ff17ca1","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","1ebfcf2c-787a-4f21-8e3e-73744ff17ca1","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/getProfileIds","stack":[{"keys":[],"method":"post","name":"getProfileIds","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/getProfileIds?coll=homework&id=homework&version=1.0.0"},"sendDate":true,"service":"some-random-service","shouldKeepAlive":true,"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/getProfileIds?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/getProfileIds?coll=homework&id=homework&version=1.0.0","path":"/getProfileIds?coll=homework&id=homework&version=1.0.0","pathname":"/getProfileIds","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":"[Circular]","complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"936f9250-2578-11ee-9ed8-01c82a9e7b8f","host":"localhost:8004","postman-token":"1ebfcf2c-787a-4f21-8e3e-73744ff17ca1","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","1ebfcf2c-787a-4f21-8e3e-73744ff17ca1","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/getProfileIds","stack":[{"keys":[],"method":"post","name":"getProfileIds","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":"[Circular]","statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/getProfileIds?coll=homework&id=homework&version=1.0.0"},"maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":200,"statusMessage":"OK","success":{"profileIds":[{"profileId":"00eDw000000R6XFIA0","profileName":"Partner"},{"profileId":"00eDw000000R6XKIA0","profileName":"Attorney"},{"profileId":"00eDw000000R6XPIA0","profileName":"Paralegal/CM"},{"profileId":"00eDw000000R6XUIA0","profileName":"Financial"},{"profileId":"00eDw000000R6XZIA0","profileName":"IT/Admin"}]},"timestamp":"2023-07-18T14:37:26.690Z","useChunkedEncodingByDefault":true,"writable":true}'
      },
      [Symbol(async_id_symbol)]: 167,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _consuming: true,
    _dumped: false,
    next: [Function: next],
    baseUrl: '/data/api-management/apis/v1',
    originalUrl: '/data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: '?coll=homework&id=homework&version=1.0.0',
      query: 'coll=homework&id=homework&version=1.0.0',
      pathname: '/getProfileIds',
      path: '/getProfileIds?coll=homework&id=homework&version=1.0.0',
      href: '/getProfileIds?coll=homework&id=homework&version=1.0.0',
      _raw: '/getProfileIds?coll=homework&id=homework&version=1.0.0'
    },
    params: {},
    query: { coll: 'homework', id: 'homework', version: '1.0.0' },
    res: <ref *6> ServerResponse {
      _events: [Object: null prototype] {
        finish: [Function: bound resOnFinish]
      },
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: 481,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      socket: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: qpCheck],
                          name: 'qpCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/getProfileIds',
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 157
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: qpCheck],
                          name: 'qpCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/getProfileIds',
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 157
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *5],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *6],
        [Symbol(async_id_symbol)]: 167,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _header: 'HTTP/1.1 200 OK\r\n' +
        'X-Powered-By: Express\r\n' +
        'correlation-id: 936f9250-2578-11ee-9ed8-01c82a9e7b8f\r\n' +
        'Content-Type: application/json; charset=utf-8\r\n' +
        'Content-Length: 481\r\n' +
        'ETag: W/"1e1-6BNpwrLXqGRlO8hujhk63Al5xBM"\r\n' +
        'Date: Tue, 18 Jul 2023 14:37:26 GMT\r\n' +
        'Connection: keep-alive\r\n' +
        'Keep-Alive: timeout=5\r\n' +
        '\r\n',
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      _sent100: false,
      _expect_continue: false,
      req: [Circular *5],
      locals: [Object: null prototype] {},
      statusCode: 200,
      message: 'Successfully Pulled All Needed Profile Ids',
      success: {
        profileIds: [
          { profileName: 'Partner', profileId: '00eDw000000R6XFIA0' },
          { profileName: 'Attorney', profileId: '00eDw000000R6XKIA0' },
          {
            profileName: 'Paralegal/CM',
            profileId: '00eDw000000R6XPIA0'
          },
          { profileName: 'Financial', profileId: '00eDw000000R6XUIA0' },
          { profileName: 'IT/Admin', profileId: '00eDw000000R6XZIA0' }
        ]
      },
      statusMessage: 'OK',
      level: 'info',
      service: 'some-random-service',
      timestamp: '2023-07-18T14:37:26.690Z',
      label: 'validation',
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        'x-powered-by': [ 'X-Powered-By', 'Express' ],
        'correlation-id': [ 'correlation-id', '936f9250-2578-11ee-9ed8-01c82a9e7b8f' ],
        'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
        'content-length': [ 'Content-Length', '481' ],
        etag: [ 'ETag', 'W/"1e1-6BNpwrLXqGRlO8hujhk63Al5xBM"' ]
      },
      [Symbol(level)]: 'info',
      [Symbol(message)]: '{"_contentLength":481,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":"HTTP/1.1 200 OK\\r\\nX-Powered-By: Express\\r\\ncorrelation-id: 936f9250-2578-11ee-9ed8-01c82a9e7b8f\\r\\nContent-Type: application/json; charset=utf-8\\r\\nContent-Length: 481\\r\\nETag: W/\\"1e1-6BNpwrLXqGRlO8hujhk63Al5xBM\\"\\r\\nDate: Tue, 18 Jul 2023 14:37:26 GMT\\r\\nConnection: keep-alive\\r\\nKeep-Alive: timeout=5\\r\\n\\r\\n","_headerSent":true,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":true,"label":"validation","level":"info","locals":{},"message":"Successfully Pulled All Needed Profile Ids","outputData":[],"outputSize":0,"req":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/getProfileIds?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/getProfileIds?coll=homework&id=homework&version=1.0.0","path":"/getProfileIds?coll=homework&id=homework&version=1.0.0","pathname":"/getProfileIds","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"936f9250-2578-11ee-9ed8-01c82a9e7b8f","host":"localhost:8004","postman-token":"1ebfcf2c-787a-4f21-8e3e-73744ff17ca1","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","1ebfcf2c-787a-4f21-8e3e-73744ff17ca1","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/getProfileIds","stack":[{"keys":[],"method":"post","name":"getProfileIds","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/getProfileIds?coll=homework&id=homework&version=1.0.0"},"sendDate":true,"service":"some-random-service","shouldKeepAlive":true,"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/getProfileIds?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/getProfileIds?coll=homework&id=homework&version=1.0.0","path":"/getProfileIds?coll=homework&id=homework&version=1.0.0","pathname":"/getProfileIds","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":"[Circular]","complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"936f9250-2578-11ee-9ed8-01c82a9e7b8f","host":"localhost:8004","postman-token":"1ebfcf2c-787a-4f21-8e3e-73744ff17ca1","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/getProfileIds?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","1ebfcf2c-787a-4f21-8e3e-73744ff17ca1","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/getProfileIds","stack":[{"keys":[],"method":"post","name":"getProfileIds","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":"[Circular]","statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/getProfileIds?coll=homework&id=homework&version=1.0.0"},"maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":200,"statusMessage":"OK","success":{"profileIds":[{"profileId":"00eDw000000R6XFIA0","profileName":"Partner"},{"profileId":"00eDw000000R6XKIA0","profileName":"Attorney"},{"profileId":"00eDw000000R6XPIA0","profileName":"Paralegal/CM"},{"profileId":"00eDw000000R6XUIA0","profileName":"Financial"},{"profileId":"00eDw000000R6XZIA0","profileName":"IT/Admin"}]},"timestamp":"2023-07-18T14:37:26.690Z","useChunkedEncodingByDefault":true,"writable":true}'
    },
    body: {
      salesforceOrgApiUrl: 'https://cmentor--tammisb.sandbox.my.salesforce.com',
      accessToken: 'Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q'
    },
    _body: true,
    length: undefined,
    getId: [Function (anonymous)],
    route: Route {
      path: '/getProfileIds',
      stack: [
        Layer {
          handle: [AsyncFunction: getProfileIds],
          name: 'getProfileIds',
          params: undefined,
          path: undefined,
          keys: [],
          regexp: /^\/?$/i { fast_star: false, fast_slash: false },
          method: 'post'
        },
        Layer {
          handle: [Function (anonymous)],
          name: '<anonymous>',
          params: undefined,
          path: undefined,
          keys: [],
          regexp: /^\/?$/i { fast_star: false, fast_slash: false },
          method: 'post'
        }
      ],
      methods: { post: true }
    },
    [Symbol(kCapture)]: false,
    [Symbol(RequestTimeout)]: undefined
  },
  locals: [Object: null prototype] {},
  statusCode: 200,
  message: 'Successfully Pulled All Needed Profile Ids',
  success: {
    profileIds: [
      { profileName: 'Partner', profileId: '00eDw000000R6XFIA0' },
      { profileName: 'Attorney', profileId: '00eDw000000R6XKIA0' },
      { profileName: 'Paralegal/CM', profileId: '00eDw000000R6XPIA0' },
      { profileName: 'Financial', profileId: '00eDw000000R6XUIA0' },
      { profileName: 'IT/Admin', profileId: '00eDw000000R6XZIA0' }
    ]
  },
  statusMessage: 'OK',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:37:26.690Z',
  label: 'validation',
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'correlation-id': [ 'correlation-id', '936f9250-2578-11ee-9ed8-01c82a9e7b8f' ],
    'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
    'content-length': [ 'Content-Length', '481' ],
    etag: [ 'ETag', 'W/"1e1-6BNpwrLXqGRlO8hujhk63Al5xBM"' ]
  }
}
{
  message: 'Received a POST request for /data/api-management/apis/v1/createUsers?coll=homework&id=homework&version=1.0.0',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:41:32.996Z',
  label: 'validation'
}
{
  message: 'No correlation-id found creating new correlation-id header of: 307f8c80-2579-11ee-903f-abfcf676e245',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:41:33.000Z',
  label: 'validation'
}
{
  message: 'Received a POST request for /data/api-management/apis/v1/createUsers?coll=homework&id=homework&version=1.0.0',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:42:47.552Z',
  label: 'validation'
}
{
  message: 'No correlation-id found creating new correlation-id header of: 5cefbd30-2579-11ee-9e31-67f5cc80caa0',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:42:47.555Z',
  label: 'validation'
}
{
  message: 'Received a POST request for /data/api-management/apis/v1/createUsers?coll=homework&id=homework&version=1.0.0',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:43:03.934Z',
  label: 'validation'
}
{
  message: 'No correlation-id found creating new correlation-id header of: 66b36f10-2579-11ee-bf0d-4dfd0295ce6f',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:43:03.937Z',
  label: 'validation'
}
{
  message: 'Received a POST request for /data/api-management/apis/v1/createUsers?coll=homework&id=homework&version=1.0.0',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:47:51.198Z',
  label: 'validation'
}
{
  message: 'No correlation-id found creating new correlation-id header of: 11ec7110-257a-11ee-94c6-9d97fdc81bfd',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:47:51.201Z',
  label: 'validation'
}
{
  message: 'Received a POST request for /data/api-management/apis/v1/createUsers?coll=homework&id=homework&version=1.0.0',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:54:33.650Z',
  label: 'validation'
}
{
  message: 'No correlation-id found creating new correlation-id header of: 01cdbe50-257b-11ee-ab4f-bdeed449886a',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:54:33.653Z',
  label: 'validation'
}
{
  message: 'Received a POST request for /data/api-management/apis/v1/createUsers?coll=homework&id=homework&version=1.0.0',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:55:34.818Z',
  label: 'validation'
}
{
  message: 'No correlation-id found creating new correlation-id header of: 26433d50-257b-11ee-afd4-dd8ecb84b3c0',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:55:34.821Z',
  label: 'validation'
}
{
  message: <ref *5> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 211,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: qpCheck],
                        name: 'qpCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/createUsers',
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 157
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: qpCheck],
                        name: 'qpCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/createUsers',
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 157
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            sync: false,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: false,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: clearRequestTimeout]
          },
          _eventsCount: 1,
          _maxListeners: undefined,
          socket: [Circular *1],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          headers: {
            'content-type': 'application/json',
            authorization: 'Bearer TkhOU1JYTlBia3g1',
            'user-agent': 'PostmanRuntime/7.32.3',
            accept: '*/*',
            'cache-control': 'no-cache',
            'postman-token': '0d7ae124-654a-4d93-8297-167c04b54380',
            host: 'localhost:8004',
            'accept-encoding': 'gzip, deflate, br',
            connection: 'keep-alive',
            'content-length': '232',
            'correlation-id': '26433d50-257b-11ee-afd4-dd8ecb84b3c0'
          },
          rawHeaders: [
            'Content-Type',
            'application/json',
            'Authorization',
            'Bearer TkhOU1JYTlBia3g1',
            'User-Agent',
            'PostmanRuntime/7.32.3',
            'Accept',
            '*/*',
            'Cache-Control',
            'no-cache',
            'Postman-Token',
            '0d7ae124-654a-4d93-8297-167c04b54380',
            'Host',
            'localhost:8004',
            'Accept-Encoding',
            'gzip, deflate, br',
            'Connection',
            'keep-alive',
            'Content-Length',
            '232'
          ],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '/createUsers?coll=homework&id=homework&version=1.0.0',
          method: 'POST',
          statusCode: null,
          statusMessage: null,
          client: [Circular *1],
          _consuming: true,
          _dumped: false,
          next: [Function: next],
          baseUrl: '/data/api-management/apis/v1',
          originalUrl: '/data/api-management/apis/v1/createUsers?coll=homework&id=homework&version=1.0.0',
          _parsedUrl: Url {
            protocol: null,
            slashes: null,
            auth: null,
            host: null,
            port: null,
            hostname: null,
            hash: null,
            search: '?coll=homework&id=homework&version=1.0.0',
            query: 'coll=homework&id=homework&version=1.0.0',
            pathname: '/createUsers',
            path: '/createUsers?coll=homework&id=homework&version=1.0.0',
            href: '/createUsers?coll=homework&id=homework&version=1.0.0',
            _raw: '/createUsers?coll=homework&id=homework&version=1.0.0'
          },
          params: {},
          query: {
            coll: 'homework',
            id: 'homework',
            version: '1.0.0',
            myEndpoint: 'createUsers'
          },
          res: [Circular *5],
          body: {
            salesforceOrgApiUrl: 'https://cmentor--tammisb.sandbox.my.salesforce.com',
            accessToken: 'Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q'
          },
          _body: true,
          length: undefined,
          getId: [Function (anonymous)],
          route: Route {
            path: '/createUsers',
            stack: [
              Layer {
                handle: [AsyncFunction: createUsers],
                name: 'createUsers',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                method: 'post'
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                method: 'post'
              }
            ],
            methods: { post: true }
          },
          [Symbol(kCapture)]: false,
          [Symbol(RequestTimeout)]: undefined
        },
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *5],
      [Symbol(async_id_symbol)]: 167,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'HTTP/1.1 500 Internal Server Error\r\n' +
      'X-Powered-By: Express\r\n' +
      'correlation-id: 26433d50-257b-11ee-afd4-dd8ecb84b3c0\r\n' +
      'Content-Type: application/json; charset=utf-8\r\n' +
      'Content-Length: 211\r\n' +
      'ETag: W/"d3-qyIegVkb0bb4ZHe6mqV78DF1qRg"\r\n' +
      'Date: Tue, 18 Jul 2023 14:55:52 GMT\r\n' +
      'Connection: keep-alive\r\n' +
      'Keep-Alive: timeout=5\r\n' +
      '\r\n',
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: <ref *6> IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
      _eventsCount: 1,
      _maxListeners: undefined,
      socket: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: qpCheck],
                          name: 'qpCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/createUsers',
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 157
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: qpCheck],
                          name: 'qpCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/createUsers',
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 157
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 167,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: {
        'content-type': 'application/json',
        authorization: 'Bearer TkhOU1JYTlBia3g1',
        'user-agent': 'PostmanRuntime/7.32.3',
        accept: '*/*',
        'cache-control': 'no-cache',
        'postman-token': '0d7ae124-654a-4d93-8297-167c04b54380',
        host: 'localhost:8004',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive',
        'content-length': '232',
        'correlation-id': '26433d50-257b-11ee-afd4-dd8ecb84b3c0'
      },
      rawHeaders: [
        'Content-Type',
        'application/json',
        'Authorization',
        'Bearer TkhOU1JYTlBia3g1',
        'User-Agent',
        'PostmanRuntime/7.32.3',
        'Accept',
        '*/*',
        'Cache-Control',
        'no-cache',
        'Postman-Token',
        '0d7ae124-654a-4d93-8297-167c04b54380',
        'Host',
        'localhost:8004',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive',
        'Content-Length',
        '232'
      ],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/createUsers?coll=homework&id=homework&version=1.0.0',
      method: 'POST',
      statusCode: null,
      statusMessage: null,
      client: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: qpCheck],
                          name: 'qpCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/createUsers',
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 157
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: qpCheck],
                          name: 'qpCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/createUsers',
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 157
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *6],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 167,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/data/api-management/apis/v1',
      originalUrl: '/data/api-management/apis/v1/createUsers?coll=homework&id=homework&version=1.0.0',
      _parsedUrl: Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: '?coll=homework&id=homework&version=1.0.0',
        query: 'coll=homework&id=homework&version=1.0.0',
        pathname: '/createUsers',
        path: '/createUsers?coll=homework&id=homework&version=1.0.0',
        href: '/createUsers?coll=homework&id=homework&version=1.0.0',
        _raw: '/createUsers?coll=homework&id=homework&version=1.0.0'
      },
      params: {},
      query: {
        coll: 'homework',
        id: 'homework',
        version: '1.0.0',
        myEndpoint: 'createUsers'
      },
      res: [Circular *5],
      body: {
        salesforceOrgApiUrl: 'https://cmentor--tammisb.sandbox.my.salesforce.com',
        accessToken: 'Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q'
      },
      _body: true,
      length: undefined,
      getId: [Function (anonymous)],
      route: Route {
        path: '/createUsers',
        stack: [
          Layer {
            handle: [AsyncFunction: createUsers],
            name: 'createUsers',
            params: undefined,
            path: undefined,
            keys: [],
            regexp: /^\/?$/i { fast_star: false, fast_slash: false },
            method: 'post'
          },
          Layer {
            handle: [Function (anonymous)],
            name: '<anonymous>',
            params: undefined,
            path: undefined,
            keys: [],
            regexp: /^\/?$/i { fast_star: false, fast_slash: false },
            method: 'post'
          }
        ],
        methods: { post: true }
      },
      [Symbol(kCapture)]: false,
      [Symbol(RequestTimeout)]: undefined
    },
    locals: [Object: null prototype] {},
    statusCode: 500,
    statusMessage: 'Internal Server Error',
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [ 'X-Powered-By', 'Express' ],
      'correlation-id': [ 'correlation-id', '26433d50-257b-11ee-afd4-dd8ecb84b3c0' ],
      'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
      'content-length': [ 'Content-Length', '211' ],
      etag: [ 'ETag', 'W/"d3-qyIegVkb0bb4ZHe6mqV78DF1qRg"' ]
    }
  },
  level: 'error',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:55:52.779Z',
  label: 'validation'
}
{
  message: 'Received a POST request for /data/api-management/apis/v1/createUsers?coll=homework&id=homework&version=1.0.0',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:56:49.473Z',
  label: 'validation'
}
{
  message: 'No correlation-id found creating new correlation-id header of: 52c2b040-257b-11ee-a034-0386a56d0c23',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:56:49.476Z',
  label: 'validation'
}
{
  _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  destroyed: false,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  _defaultKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: 1590,
  _hasBody: true,
  _trailer: '',
  finished: true,
  _headerSent: true,
  socket: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      errored: null,
      closed: false,
      closeEmitted: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      dataEmitted: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    _events: [Object: null prototype] {
      end: [
        [Function: onReadableStreamEnd],
        [Function: bound socketOnEnd]
      ],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [
        [Function: bound socketOnClose],
        [Function: onServerResponseClose]
      ],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: <ref *2> WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: {
        count: 1,
        cb: [Function (anonymous)],
        stream: [Circular *1],
        state: [Circular *2]
      },
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 1,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      errored: null,
      closed: false,
      closeEmitted: false
    },
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: <ref *4> Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      _events: [Object: null prototype] {
        request: <ref *3> [Function: app] {
          _events: [Object: null prototype] { mount: [Function: onmount] },
          _eventsCount: 1,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames],
          init: [Function: init],
          defaultConfiguration: [Function: defaultConfiguration],
          lazyrouter: [Function: lazyrouter],
          handle: [Function: handle],
          use: [Function: use],
          route: [Function: route],
          engine: [Function: engine],
          param: [Function: param],
          set: [Function: set],
          path: [Function: path],
          enabled: [Function: enabled],
          disabled: [Function: disabled],
          enable: [Function: enable],
          disable: [Function: disable],
          acl: [Function (anonymous)],
          bind: [Function (anonymous)],
          checkout: [Function (anonymous)],
          connect: [Function (anonymous)],
          copy: [Function (anonymous)],
          delete: [Function (anonymous)],
          get: [Function (anonymous)],
          head: [Function (anonymous)],
          link: [Function (anonymous)],
          lock: [Function (anonymous)],
          'm-search': [Function (anonymous)],
          merge: [Function (anonymous)],
          mkactivity: [Function (anonymous)],
          mkcalendar: [Function (anonymous)],
          mkcol: [Function (anonymous)],
          move: [Function (anonymous)],
          notify: [Function (anonymous)],
          options: [Function (anonymous)],
          patch: [Function (anonymous)],
          post: [Function (anonymous)],
          pri: [Function (anonymous)],
          propfind: [Function (anonymous)],
          proppatch: [Function (anonymous)],
          purge: [Function (anonymous)],
          put: [Function (anonymous)],
          rebind: [Function (anonymous)],
          report: [Function (anonymous)],
          search: [Function (anonymous)],
          source: [Function (anonymous)],
          subscribe: [Function (anonymous)],
          trace: [Function (anonymous)],
          unbind: [Function (anonymous)],
          unlink: [Function (anonymous)],
          unlock: [Function (anonymous)],
          unsubscribe: [Function (anonymous)],
          all: [Function: all],
          del: [Function (anonymous)],
          render: [Function: render],
          listen: [Function: listen],
          request: IncomingMessage { app: [Circular *3] },
          response: ServerResponse { app: [Circular *3] },
          cache: {},
          engines: {},
          settings: {
            'x-powered-by': true,
            etag: 'weak',
            'etag fn': [Function: generateETag],
            env: 'development',
            'query parser': 'extended',
            'query parser fn': [Function: parseExtendedQueryString],
            'subdomain offset': 2,
            'trust proxy': false,
            'trust proxy fn': [Function: trustNone],
            view: [Function: View],
            views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
            'jsonp callback name': 'callback'
          },
          locals: [Object: null prototype] {
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            }
          },
          mountpath: '/',
          _router: [Function: router] {
            params: {},
            _params: [],
            caseSensitive: false,
            mergeParams: undefined,
            strict: false,
            stack: [
              Layer {
                handle: [Function: query],
                name: 'query',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: expressInit],
                name: 'expressInit',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: urlencodedParser],
                name: 'urlencodedParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: jsonParser],
                name: 'jsonParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: router] {
                  params: {},
                  _params: [],
                  caseSensitive: undefined,
                  mergeParams: undefined,
                  strict: undefined,
                  stack: [
                    Layer {
                      handle: [AsyncFunction: authCheck],
                      name: 'authCheck',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [AsyncFunction: appJsonHeader],
                      name: 'appJsonHeader',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [AsyncFunction: qpCheck],
                      name: 'qpCheck',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [AsyncFunction: bodyData],
                      name: 'bodyData',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/health\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/health',
                        stack: [
                          Layer {
                            handle: [AsyncFunction: healthStatus],
                            name: 'healthStatus',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          }
                        ],
                        methods: { get: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/getProfileIds\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/getProfileIds',
                        stack: [
                          Layer {
                            handle: [AsyncFunction: getProfileIds],
                            name: 'getProfileIds',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          }
                        ],
                        methods: { post: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: {},
                      path: '/createUsers',
                      keys: [],
                      regexp: /^\/createUsers\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/createUsers',
                        stack: [
                          Layer {
                            handle: [AsyncFunction: createUsers],
                            name: 'createUsers',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          }
                        ],
                        methods: { post: true }
                      }
                    },
                    Layer {
                      handle: [Function: SuccessHandler],
                      name: 'SuccessHandler',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: ErrorHandler],
                      name: 'ErrorHandler',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    }
                  ]
                },
                name: 'router',
                params: {},
                path: '/data/api-management/apis/v1',
                keys: [],
                regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '/data/api-management/apis/v1',
                keys: [],
                regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: undefined
              }
            ]
          }
        },
        connection: [Function: connectionListener]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: TCP {
        reading: false,
        onconnection: [Function: onconnection],
        [Symbol(owner_symbol)]: [Circular *4]
      },
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      requestTimeout: 0,
      _connectionKey: '6::::8004',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 157
    },
    _server: <ref *4> Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      _events: [Object: null prototype] {
        request: <ref *3> [Function: app] {
          _events: [Object: null prototype] { mount: [Function: onmount] },
          _eventsCount: 1,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames],
          init: [Function: init],
          defaultConfiguration: [Function: defaultConfiguration],
          lazyrouter: [Function: lazyrouter],
          handle: [Function: handle],
          use: [Function: use],
          route: [Function: route],
          engine: [Function: engine],
          param: [Function: param],
          set: [Function: set],
          path: [Function: path],
          enabled: [Function: enabled],
          disabled: [Function: disabled],
          enable: [Function: enable],
          disable: [Function: disable],
          acl: [Function (anonymous)],
          bind: [Function (anonymous)],
          checkout: [Function (anonymous)],
          connect: [Function (anonymous)],
          copy: [Function (anonymous)],
          delete: [Function (anonymous)],
          get: [Function (anonymous)],
          head: [Function (anonymous)],
          link: [Function (anonymous)],
          lock: [Function (anonymous)],
          'm-search': [Function (anonymous)],
          merge: [Function (anonymous)],
          mkactivity: [Function (anonymous)],
          mkcalendar: [Function (anonymous)],
          mkcol: [Function (anonymous)],
          move: [Function (anonymous)],
          notify: [Function (anonymous)],
          options: [Function (anonymous)],
          patch: [Function (anonymous)],
          post: [Function (anonymous)],
          pri: [Function (anonymous)],
          propfind: [Function (anonymous)],
          proppatch: [Function (anonymous)],
          purge: [Function (anonymous)],
          put: [Function (anonymous)],
          rebind: [Function (anonymous)],
          report: [Function (anonymous)],
          search: [Function (anonymous)],
          source: [Function (anonymous)],
          subscribe: [Function (anonymous)],
          trace: [Function (anonymous)],
          unbind: [Function (anonymous)],
          unlink: [Function (anonymous)],
          unlock: [Function (anonymous)],
          unsubscribe: [Function (anonymous)],
          all: [Function: all],
          del: [Function (anonymous)],
          render: [Function: render],
          listen: [Function: listen],
          request: IncomingMessage { app: [Circular *3] },
          response: ServerResponse { app: [Circular *3] },
          cache: {},
          engines: {},
          settings: {
            'x-powered-by': true,
            etag: 'weak',
            'etag fn': [Function: generateETag],
            env: 'development',
            'query parser': 'extended',
            'query parser fn': [Function: parseExtendedQueryString],
            'subdomain offset': 2,
            'trust proxy': false,
            'trust proxy fn': [Function: trustNone],
            view: [Function: View],
            views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
            'jsonp callback name': 'callback'
          },
          locals: [Object: null prototype] {
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            }
          },
          mountpath: '/',
          _router: [Function: router] {
            params: {},
            _params: [],
            caseSensitive: false,
            mergeParams: undefined,
            strict: false,
            stack: [
              Layer {
                handle: [Function: query],
                name: 'query',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: expressInit],
                name: 'expressInit',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: urlencodedParser],
                name: 'urlencodedParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: jsonParser],
                name: 'jsonParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: router] {
                  params: {},
                  _params: [],
                  caseSensitive: undefined,
                  mergeParams: undefined,
                  strict: undefined,
                  stack: [
                    Layer {
                      handle: [AsyncFunction: authCheck],
                      name: 'authCheck',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [AsyncFunction: appJsonHeader],
                      name: 'appJsonHeader',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [AsyncFunction: qpCheck],
                      name: 'qpCheck',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [AsyncFunction: bodyData],
                      name: 'bodyData',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/health\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/health',
                        stack: [
                          Layer {
                            handle: [AsyncFunction: healthStatus],
                            name: 'healthStatus',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          }
                        ],
                        methods: { get: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/getProfileIds\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/getProfileIds',
                        stack: [
                          Layer {
                            handle: [AsyncFunction: getProfileIds],
                            name: 'getProfileIds',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          }
                        ],
                        methods: { post: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: {},
                      path: '/createUsers',
                      keys: [],
                      regexp: /^\/createUsers\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/createUsers',
                        stack: [
                          Layer {
                            handle: [AsyncFunction: createUsers],
                            name: 'createUsers',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          }
                        ],
                        methods: { post: true }
                      }
                    },
                    Layer {
                      handle: [Function: SuccessHandler],
                      name: 'SuccessHandler',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: ErrorHandler],
                      name: 'ErrorHandler',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    }
                  ]
                },
                name: 'router',
                params: {},
                path: '/data/api-management/apis/v1',
                keys: [],
                regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '/data/api-management/apis/v1',
                keys: [],
                regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: undefined
              }
            ]
          }
        },
        connection: [Function: connectionListener]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: TCP {
        reading: false,
        onconnection: [Function: onconnection],
        [Symbol(owner_symbol)]: [Circular *4]
      },
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      requestTimeout: 0,
      _connectionKey: '6::::8004',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 157
    },
    parser: HTTPParser {
      '0': [Function: bound setRequestTimeout],
      '1': [Function: parserOnHeaders],
      '2': [Function: parserOnHeadersComplete],
      '3': [Function: parserOnBody],
      '4': [Function: parserOnMessageComplete],
      '5': [Function: bound onParserExecute],
      '6': [Function: bound onParserTimeout],
      _headers: [],
      _url: '',
      socket: [Circular *1],
      incoming: <ref *5> IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          sync: false,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [Function: clearRequestTimeout]
        },
        _eventsCount: 1,
        _maxListeners: undefined,
        socket: [Circular *1],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: {
          'content-type': 'application/json',
          authorization: 'Bearer TkhOU1JYTlBia3g1',
          'user-agent': 'PostmanRuntime/7.32.3',
          accept: '*/*',
          'cache-control': 'no-cache',
          'postman-token': '67db8391-d484-477e-a2b2-c3b1c5a0a5aa',
          host: 'localhost:8004',
          'accept-encoding': 'gzip, deflate, br',
          connection: 'keep-alive',
          'content-length': '232',
          'correlation-id': '52c2b040-257b-11ee-a034-0386a56d0c23'
        },
        rawHeaders: [
          'Content-Type',
          'application/json',
          'Authorization',
          'Bearer TkhOU1JYTlBia3g1',
          'User-Agent',
          'PostmanRuntime/7.32.3',
          'Accept',
          '*/*',
          'Cache-Control',
          'no-cache',
          'Postman-Token',
          '67db8391-d484-477e-a2b2-c3b1c5a0a5aa',
          'Host',
          'localhost:8004',
          'Accept-Encoding',
          'gzip, deflate, br',
          'Connection',
          'keep-alive',
          'Content-Length',
          '232'
        ],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '/createUsers?coll=homework&id=homework&version=1.0.0',
        method: 'POST',
        statusCode: null,
        statusMessage: null,
        client: [Circular *1],
        _consuming: true,
        _dumped: false,
        next: [Function: next],
        baseUrl: '/data/api-management/apis/v1',
        originalUrl: '/data/api-management/apis/v1/createUsers?coll=homework&id=homework&version=1.0.0',
        _parsedUrl: Url {
          protocol: null,
          slashes: null,
          auth: null,
          host: null,
          port: null,
          hostname: null,
          hash: null,
          search: '?coll=homework&id=homework&version=1.0.0',
          query: 'coll=homework&id=homework&version=1.0.0',
          pathname: '/createUsers',
          path: '/createUsers?coll=homework&id=homework&version=1.0.0',
          href: '/createUsers?coll=homework&id=homework&version=1.0.0',
          _raw: '/createUsers?coll=homework&id=homework&version=1.0.0'
        },
        params: {},
        query: {
          coll: 'homework',
          id: 'homework',
          version: '1.0.0',
          myEndpoint: 'createUsers'
        },
        res: ServerResponse {
          _events: [Object: null prototype] {
            finish: [Function: bound resOnFinish]
          },
          _eventsCount: 1,
          _maxListeners: undefined,
          outputData: [],
          outputSize: 0,
          writable: true,
          destroyed: false,
          _last: false,
          chunkedEncoding: false,
          shouldKeepAlive: true,
          _defaultKeepAlive: true,
          useChunkedEncodingByDefault: true,
          sendDate: true,
          _removedConnection: false,
          _removedContLen: false,
          _removedTE: false,
          _contentLength: 1590,
          _hasBody: true,
          _trailer: '',
          finished: true,
          _headerSent: true,
          socket: [Circular *1],
          _header: 'HTTP/1.1 200 OK\r\n' +
            'X-Powered-By: Express\r\n' +
            'correlation-id: 52c2b040-257b-11ee-a034-0386a56d0c23\r\n' +
            'Content-Type: application/json; charset=utf-8\r\n' +
            'Content-Length: 1590\r\n' +
            'ETag: W/"636-XhDsGDeK0ZwlcJgChOuJaoHyazc"\r\n' +
            'Date: Tue, 18 Jul 2023 14:57:05 GMT\r\n' +
            'Connection: keep-alive\r\n' +
            'Keep-Alive: timeout=5\r\n' +
            '\r\n',
          _keepAliveTimeout: 5000,
          _onPendingData: [Function: bound updateOutgoingData],
          _sent100: false,
          _expect_continue: false,
          req: [Circular *5],
          locals: [Object: null prototype] {},
          statusCode: 200,
          message: 'Successfully Updated Salesforce User Listing With New User Array',
          success: {
            updatedMergedArray: [
              {
                Username: 'SethTestUser8@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: '00eDw000000R6XFIA0',
                TimeZoneSidKey: 'America/New_York',
                LanguageLocaleKey: 'en_US',
                EmailEncodingKey: 'UTF-8',
                LocaleSidKey: 'en_US'
              },
              {
                Username: 'SethTestUser9@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: '00eDw000000R6XKIA0',
                TimeZoneSidKey: 'America/New_York',
                LanguageLocaleKey: 'en_US',
                EmailEncodingKey: 'UTF-8',
                LocaleSidKey: 'en_US'
              },
              {
                Username: 'SethTestUser10@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: '00eDw000000R6XPIA0',
                TimeZoneSidKey: 'America/New_York',
                LanguageLocaleKey: 'en_US',
                EmailEncodingKey: 'UTF-8',
                LocaleSidKey: 'en_US'
              },
              {
                Username: 'SethTestUser11@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: '00eDw000000R6XUIA0',
                TimeZoneSidKey: 'America/New_York',
                LanguageLocaleKey: 'en_US',
                EmailEncodingKey: 'UTF-8',
                LocaleSidKey: 'en_US'
              },
              {
                Username: 'SethTestUser12@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: '00eDw000000R6XZIA0',
                TimeZoneSidKey: 'America/New_York',
                LanguageLocaleKey: 'en_US',
                EmailEncodingKey: 'UTF-8',
                LocaleSidKey: 'en_US'
              }
            ]
          },
          statusMessage: 'OK',
          level: 'info',
          service: 'some-random-service',
          timestamp: '2023-07-18T14:57:05.571Z',
          label: 'validation',
          [Symbol(kCapture)]: false,
          [Symbol(kNeedDrain)]: false,
          [Symbol(corked)]: 0,
          [Symbol(kOutHeaders)]: [Object: null prototype] {
            'x-powered-by': [ 'X-Powered-By', 'Express' ],
            'correlation-id': [
              'correlation-id',
              '52c2b040-257b-11ee-a034-0386a56d0c23'
            ],
            'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
            'content-length': [ 'Content-Length', '1590' ],
            etag: [ 'ETag', 'W/"636-XhDsGDeK0ZwlcJgChOuJaoHyazc"' ]
          },
          [Symbol(level)]: 'info',
          [Symbol(message)]: '{"_contentLength":1590,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":"HTTP/1.1 200 OK\\r\\nX-Powered-By: Express\\r\\ncorrelation-id: 52c2b040-257b-11ee-a034-0386a56d0c23\\r\\nContent-Type: application/json; charset=utf-8\\r\\nContent-Length: 1590\\r\\nETag: W/\\"636-XhDsGDeK0ZwlcJgChOuJaoHyazc\\"\\r\\nDate: Tue, 18 Jul 2023 14:57:05 GMT\\r\\nConnection: keep-alive\\r\\nKeep-Alive: timeout=5\\r\\n\\r\\n","_headerSent":true,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":true,"label":"validation","level":"info","locals":{},"message":"Successfully Updated Salesforce User Listing With New User Array","outputData":[],"outputSize":0,"req":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/createUsers?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/createUsers?coll=homework&id=homework&version=1.0.0","path":"/createUsers?coll=homework&id=homework&version=1.0.0","pathname":"/createUsers","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"52c2b040-257b-11ee-a034-0386a56d0c23","host":"localhost:8004","postman-token":"67db8391-d484-477e-a2b2-c3b1c5a0a5aa","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/createUsers?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","myEndpoint":"createUsers","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","67db8391-d484-477e-a2b2-c3b1c5a0a5aa","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/createUsers","stack":[{"keys":[],"method":"post","name":"createUsers","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/createUsers?coll=homework&id=homework&version=1.0.0"},"sendDate":true,"service":"some-random-service","shouldKeepAlive":true,"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/createUsers?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/createUsers?coll=homework&id=homework&version=1.0.0","path":"/createUsers?coll=homework&id=homework&version=1.0.0","pathname":"/createUsers","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":"[Circular]","complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"52c2b040-257b-11ee-a034-0386a56d0c23","host":"localhost:8004","postman-token":"67db8391-d484-477e-a2b2-c3b1c5a0a5aa","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/createUsers?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","myEndpoint":"createUsers","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","67db8391-d484-477e-a2b2-c3b1c5a0a5aa","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/createUsers","stack":[{"keys":[],"method":"post","name":"createUsers","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":"[Circular]","statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/createUsers?coll=homework&id=homework&version=1.0.0"},"maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":200,"statusMessage":"OK","success":{"updatedMergedArray":[{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XFIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser8@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XKIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser9@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XPIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser10@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XUIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser11@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XZIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser12@cmentor.com"}]},"timestamp":"2023-07-18T14:57:05.571Z","useChunkedEncodingByDefault":true,"writable":true}'
        },
        body: {
          salesforceOrgApiUrl: 'https://cmentor--tammisb.sandbox.my.salesforce.com',
          accessToken: 'Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q'
        },
        _body: true,
        length: undefined,
        getId: [Function (anonymous)],
        route: Route {
          path: '/createUsers',
          stack: [
            Layer {
              handle: [AsyncFunction: createUsers],
              name: 'createUsers',
              params: undefined,
              path: undefined,
              keys: [],
              regexp: /^\/?$/i { fast_star: false, fast_slash: false },
              method: 'post'
            },
            Layer {
              handle: [Function (anonymous)],
              name: '<anonymous>',
              params: undefined,
              path: undefined,
              keys: [],
              regexp: /^\/?$/i { fast_star: false, fast_slash: false },
              method: 'post'
            }
          ],
          methods: { post: true }
        },
        [Symbol(kCapture)]: false,
        [Symbol(RequestTimeout)]: undefined
      },
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      [Symbol(resource_symbol)]: HTTPServerAsyncResource {
        type: 'HTTPINCOMINGMESSAGE',
        socket: [Circular *1]
      }
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: <ref *6> ServerResponse {
      _events: [Object: null prototype] {
        finish: [Function: bound resOnFinish]
      },
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: 1590,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      socket: [Circular *1],
      _header: 'HTTP/1.1 200 OK\r\n' +
        'X-Powered-By: Express\r\n' +
        'correlation-id: 52c2b040-257b-11ee-a034-0386a56d0c23\r\n' +
        'Content-Type: application/json; charset=utf-8\r\n' +
        'Content-Length: 1590\r\n' +
        'ETag: W/"636-XhDsGDeK0ZwlcJgChOuJaoHyazc"\r\n' +
        'Date: Tue, 18 Jul 2023 14:57:05 GMT\r\n' +
        'Connection: keep-alive\r\n' +
        'Keep-Alive: timeout=5\r\n' +
        '\r\n',
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      _sent100: false,
      _expect_continue: false,
      req: <ref *5> IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          sync: false,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [Function: clearRequestTimeout]
        },
        _eventsCount: 1,
        _maxListeners: undefined,
        socket: [Circular *1],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: {
          'content-type': 'application/json',
          authorization: 'Bearer TkhOU1JYTlBia3g1',
          'user-agent': 'PostmanRuntime/7.32.3',
          accept: '*/*',
          'cache-control': 'no-cache',
          'postman-token': '67db8391-d484-477e-a2b2-c3b1c5a0a5aa',
          host: 'localhost:8004',
          'accept-encoding': 'gzip, deflate, br',
          connection: 'keep-alive',
          'content-length': '232',
          'correlation-id': '52c2b040-257b-11ee-a034-0386a56d0c23'
        },
        rawHeaders: [
          'Content-Type',
          'application/json',
          'Authorization',
          'Bearer TkhOU1JYTlBia3g1',
          'User-Agent',
          'PostmanRuntime/7.32.3',
          'Accept',
          '*/*',
          'Cache-Control',
          'no-cache',
          'Postman-Token',
          '67db8391-d484-477e-a2b2-c3b1c5a0a5aa',
          'Host',
          'localhost:8004',
          'Accept-Encoding',
          'gzip, deflate, br',
          'Connection',
          'keep-alive',
          'Content-Length',
          '232'
        ],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '/createUsers?coll=homework&id=homework&version=1.0.0',
        method: 'POST',
        statusCode: null,
        statusMessage: null,
        client: [Circular *1],
        _consuming: true,
        _dumped: false,
        next: [Function: next],
        baseUrl: '/data/api-management/apis/v1',
        originalUrl: '/data/api-management/apis/v1/createUsers?coll=homework&id=homework&version=1.0.0',
        _parsedUrl: Url {
          protocol: null,
          slashes: null,
          auth: null,
          host: null,
          port: null,
          hostname: null,
          hash: null,
          search: '?coll=homework&id=homework&version=1.0.0',
          query: 'coll=homework&id=homework&version=1.0.0',
          pathname: '/createUsers',
          path: '/createUsers?coll=homework&id=homework&version=1.0.0',
          href: '/createUsers?coll=homework&id=homework&version=1.0.0',
          _raw: '/createUsers?coll=homework&id=homework&version=1.0.0'
        },
        params: {},
        query: {
          coll: 'homework',
          id: 'homework',
          version: '1.0.0',
          myEndpoint: 'createUsers'
        },
        res: [Circular *6],
        body: {
          salesforceOrgApiUrl: 'https://cmentor--tammisb.sandbox.my.salesforce.com',
          accessToken: 'Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q'
        },
        _body: true,
        length: undefined,
        getId: [Function (anonymous)],
        route: Route {
          path: '/createUsers',
          stack: [
            Layer {
              handle: [AsyncFunction: createUsers],
              name: 'createUsers',
              params: undefined,
              path: undefined,
              keys: [],
              regexp: /^\/?$/i { fast_star: false, fast_slash: false },
              method: 'post'
            },
            Layer {
              handle: [Function (anonymous)],
              name: '<anonymous>',
              params: undefined,
              path: undefined,
              keys: [],
              regexp: /^\/?$/i { fast_star: false, fast_slash: false },
              method: 'post'
            }
          ],
          methods: { post: true }
        },
        [Symbol(kCapture)]: false,
        [Symbol(RequestTimeout)]: undefined
      },
      locals: [Object: null prototype] {},
      statusCode: 200,
      message: 'Successfully Updated Salesforce User Listing With New User Array',
      success: {
        updatedMergedArray: [
          {
            Username: 'SethTestUser8@cmentor.com',
            Email: 'tammi@cmentor.com',
            Alias: 'TammiTst',
            LastName: 'Krobert',
            FirstName: 'Tammi',
            ProfileId: '00eDw000000R6XFIA0',
            TimeZoneSidKey: 'America/New_York',
            LanguageLocaleKey: 'en_US',
            EmailEncodingKey: 'UTF-8',
            LocaleSidKey: 'en_US'
          },
          {
            Username: 'SethTestUser9@cmentor.com',
            Email: 'tammi@cmentor.com',
            Alias: 'TammiTst',
            LastName: 'Krobert',
            FirstName: 'Tammi',
            ProfileId: '00eDw000000R6XKIA0',
            TimeZoneSidKey: 'America/New_York',
            LanguageLocaleKey: 'en_US',
            EmailEncodingKey: 'UTF-8',
            LocaleSidKey: 'en_US'
          },
          {
            Username: 'SethTestUser10@cmentor.com',
            Email: 'tammi@cmentor.com',
            Alias: 'TammiTst',
            LastName: 'Krobert',
            FirstName: 'Tammi',
            ProfileId: '00eDw000000R6XPIA0',
            TimeZoneSidKey: 'America/New_York',
            LanguageLocaleKey: 'en_US',
            EmailEncodingKey: 'UTF-8',
            LocaleSidKey: 'en_US'
          },
          {
            Username: 'SethTestUser11@cmentor.com',
            Email: 'tammi@cmentor.com',
            Alias: 'TammiTst',
            LastName: 'Krobert',
            FirstName: 'Tammi',
            ProfileId: '00eDw000000R6XUIA0',
            TimeZoneSidKey: 'America/New_York',
            LanguageLocaleKey: 'en_US',
            EmailEncodingKey: 'UTF-8',
            LocaleSidKey: 'en_US'
          },
          {
            Username: 'SethTestUser12@cmentor.com',
            Email: 'tammi@cmentor.com',
            Alias: 'TammiTst',
            LastName: 'Krobert',
            FirstName: 'Tammi',
            ProfileId: '00eDw000000R6XZIA0',
            TimeZoneSidKey: 'America/New_York',
            LanguageLocaleKey: 'en_US',
            EmailEncodingKey: 'UTF-8',
            LocaleSidKey: 'en_US'
          }
        ]
      },
      statusMessage: 'OK',
      level: 'info',
      service: 'some-random-service',
      timestamp: '2023-07-18T14:57:05.571Z',
      label: 'validation',
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        'x-powered-by': [ 'X-Powered-By', 'Express' ],
        'correlation-id': [ 'correlation-id', '52c2b040-257b-11ee-a034-0386a56d0c23' ],
        'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
        'content-length': [ 'Content-Length', '1590' ],
        etag: [ 'ETag', 'W/"636-XhDsGDeK0ZwlcJgChOuJaoHyazc"' ]
      },
      [Symbol(level)]: 'info',
      [Symbol(message)]: '{"_contentLength":1590,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":"HTTP/1.1 200 OK\\r\\nX-Powered-By: Express\\r\\ncorrelation-id: 52c2b040-257b-11ee-a034-0386a56d0c23\\r\\nContent-Type: application/json; charset=utf-8\\r\\nContent-Length: 1590\\r\\nETag: W/\\"636-XhDsGDeK0ZwlcJgChOuJaoHyazc\\"\\r\\nDate: Tue, 18 Jul 2023 14:57:05 GMT\\r\\nConnection: keep-alive\\r\\nKeep-Alive: timeout=5\\r\\n\\r\\n","_headerSent":true,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":true,"label":"validation","level":"info","locals":{},"message":"Successfully Updated Salesforce User Listing With New User Array","outputData":[],"outputSize":0,"req":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/createUsers?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/createUsers?coll=homework&id=homework&version=1.0.0","path":"/createUsers?coll=homework&id=homework&version=1.0.0","pathname":"/createUsers","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"52c2b040-257b-11ee-a034-0386a56d0c23","host":"localhost:8004","postman-token":"67db8391-d484-477e-a2b2-c3b1c5a0a5aa","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/createUsers?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","myEndpoint":"createUsers","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","67db8391-d484-477e-a2b2-c3b1c5a0a5aa","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/createUsers","stack":[{"keys":[],"method":"post","name":"createUsers","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/createUsers?coll=homework&id=homework&version=1.0.0"},"sendDate":true,"service":"some-random-service","shouldKeepAlive":true,"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/createUsers?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/createUsers?coll=homework&id=homework&version=1.0.0","path":"/createUsers?coll=homework&id=homework&version=1.0.0","pathname":"/createUsers","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":"[Circular]","complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"52c2b040-257b-11ee-a034-0386a56d0c23","host":"localhost:8004","postman-token":"67db8391-d484-477e-a2b2-c3b1c5a0a5aa","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/createUsers?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","myEndpoint":"createUsers","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","67db8391-d484-477e-a2b2-c3b1c5a0a5aa","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/createUsers","stack":[{"keys":[],"method":"post","name":"createUsers","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":"[Circular]","statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/createUsers?coll=homework&id=homework&version=1.0.0"},"maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":200,"statusMessage":"OK","success":{"updatedMergedArray":[{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XFIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser8@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XKIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser9@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XPIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser10@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XUIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser11@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XZIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser12@cmentor.com"}]},"timestamp":"2023-07-18T14:57:05.571Z","useChunkedEncodingByDefault":true,"writable":true}'
    },
    [Symbol(async_id_symbol)]: 167,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular *1]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(RequestTimeout)]: undefined
  },
  _header: 'HTTP/1.1 200 OK\r\n' +
    'X-Powered-By: Express\r\n' +
    'correlation-id: 52c2b040-257b-11ee-a034-0386a56d0c23\r\n' +
    'Content-Type: application/json; charset=utf-8\r\n' +
    'Content-Length: 1590\r\n' +
    'ETag: W/"636-XhDsGDeK0ZwlcJgChOuJaoHyazc"\r\n' +
    'Date: Tue, 18 Jul 2023 14:57:05 GMT\r\n' +
    'Connection: keep-alive\r\n' +
    'Keep-Alive: timeout=5\r\n' +
    '\r\n',
  _keepAliveTimeout: 5000,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: <ref *5> IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: true,
      ended: true,
      endEmitted: true,
      reading: false,
      sync: false,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      errored: null,
      closed: false,
      closeEmitted: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      dataEmitted: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: qpCheck],
                        name: 'qpCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/createUsers',
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 157
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: qpCheck],
                        name: 'qpCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/createUsers',
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 157
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: [Circular *5],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: <ref *6> ServerResponse {
        _events: [Object: null prototype] {
          finish: [Function: bound resOnFinish]
        },
        _eventsCount: 1,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 1590,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Circular *1],
        _header: 'HTTP/1.1 200 OK\r\n' +
          'X-Powered-By: Express\r\n' +
          'correlation-id: 52c2b040-257b-11ee-a034-0386a56d0c23\r\n' +
          'Content-Type: application/json; charset=utf-8\r\n' +
          'Content-Length: 1590\r\n' +
          'ETag: W/"636-XhDsGDeK0ZwlcJgChOuJaoHyazc"\r\n' +
          'Date: Tue, 18 Jul 2023 14:57:05 GMT\r\n' +
          'Connection: keep-alive\r\n' +
          'Keep-Alive: timeout=5\r\n' +
          '\r\n',
        _keepAliveTimeout: 5000,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular *5],
        locals: [Object: null prototype] {},
        statusCode: 200,
        message: 'Successfully Updated Salesforce User Listing With New User Array',
        success: {
          updatedMergedArray: [
            {
              Username: 'SethTestUser8@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: '00eDw000000R6XFIA0',
              TimeZoneSidKey: 'America/New_York',
              LanguageLocaleKey: 'en_US',
              EmailEncodingKey: 'UTF-8',
              LocaleSidKey: 'en_US'
            },
            {
              Username: 'SethTestUser9@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: '00eDw000000R6XKIA0',
              TimeZoneSidKey: 'America/New_York',
              LanguageLocaleKey: 'en_US',
              EmailEncodingKey: 'UTF-8',
              LocaleSidKey: 'en_US'
            },
            {
              Username: 'SethTestUser10@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: '00eDw000000R6XPIA0',
              TimeZoneSidKey: 'America/New_York',
              LanguageLocaleKey: 'en_US',
              EmailEncodingKey: 'UTF-8',
              LocaleSidKey: 'en_US'
            },
            {
              Username: 'SethTestUser11@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: '00eDw000000R6XUIA0',
              TimeZoneSidKey: 'America/New_York',
              LanguageLocaleKey: 'en_US',
              EmailEncodingKey: 'UTF-8',
              LocaleSidKey: 'en_US'
            },
            {
              Username: 'SethTestUser12@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: '00eDw000000R6XZIA0',
              TimeZoneSidKey: 'America/New_York',
              LanguageLocaleKey: 'en_US',
              EmailEncodingKey: 'UTF-8',
              LocaleSidKey: 'en_US'
            }
          ]
        },
        statusMessage: 'OK',
        level: 'info',
        service: 'some-random-service',
        timestamp: '2023-07-18T14:57:05.571Z',
        label: 'validation',
        [Symbol(kCapture)]: false,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          'x-powered-by': [ 'X-Powered-By', 'Express' ],
          'correlation-id': [ 'correlation-id', '52c2b040-257b-11ee-a034-0386a56d0c23' ],
          'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
          'content-length': [ 'Content-Length', '1590' ],
          etag: [ 'ETag', 'W/"636-XhDsGDeK0ZwlcJgChOuJaoHyazc"' ]
        },
        [Symbol(level)]: 'info',
        [Symbol(message)]: '{"_contentLength":1590,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":"HTTP/1.1 200 OK\\r\\nX-Powered-By: Express\\r\\ncorrelation-id: 52c2b040-257b-11ee-a034-0386a56d0c23\\r\\nContent-Type: application/json; charset=utf-8\\r\\nContent-Length: 1590\\r\\nETag: W/\\"636-XhDsGDeK0ZwlcJgChOuJaoHyazc\\"\\r\\nDate: Tue, 18 Jul 2023 14:57:05 GMT\\r\\nConnection: keep-alive\\r\\nKeep-Alive: timeout=5\\r\\n\\r\\n","_headerSent":true,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":true,"label":"validation","level":"info","locals":{},"message":"Successfully Updated Salesforce User Listing With New User Array","outputData":[],"outputSize":0,"req":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/createUsers?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/createUsers?coll=homework&id=homework&version=1.0.0","path":"/createUsers?coll=homework&id=homework&version=1.0.0","pathname":"/createUsers","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"52c2b040-257b-11ee-a034-0386a56d0c23","host":"localhost:8004","postman-token":"67db8391-d484-477e-a2b2-c3b1c5a0a5aa","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/createUsers?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","myEndpoint":"createUsers","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","67db8391-d484-477e-a2b2-c3b1c5a0a5aa","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/createUsers","stack":[{"keys":[],"method":"post","name":"createUsers","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/createUsers?coll=homework&id=homework&version=1.0.0"},"sendDate":true,"service":"some-random-service","shouldKeepAlive":true,"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/createUsers?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/createUsers?coll=homework&id=homework&version=1.0.0","path":"/createUsers?coll=homework&id=homework&version=1.0.0","pathname":"/createUsers","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":"[Circular]","complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"52c2b040-257b-11ee-a034-0386a56d0c23","host":"localhost:8004","postman-token":"67db8391-d484-477e-a2b2-c3b1c5a0a5aa","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/createUsers?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","myEndpoint":"createUsers","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","67db8391-d484-477e-a2b2-c3b1c5a0a5aa","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/createUsers","stack":[{"keys":[],"method":"post","name":"createUsers","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":"[Circular]","statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/createUsers?coll=homework&id=homework&version=1.0.0"},"maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":200,"statusMessage":"OK","success":{"updatedMergedArray":[{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XFIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser8@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XKIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser9@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XPIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser10@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XUIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser11@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XZIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser12@cmentor.com"}]},"timestamp":"2023-07-18T14:57:05.571Z","useChunkedEncodingByDefault":true,"writable":true}'
      },
      [Symbol(async_id_symbol)]: 167,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: true,
    headers: {
      'content-type': 'application/json',
      authorization: 'Bearer TkhOU1JYTlBia3g1',
      'user-agent': 'PostmanRuntime/7.32.3',
      accept: '*/*',
      'cache-control': 'no-cache',
      'postman-token': '67db8391-d484-477e-a2b2-c3b1c5a0a5aa',
      host: 'localhost:8004',
      'accept-encoding': 'gzip, deflate, br',
      connection: 'keep-alive',
      'content-length': '232',
      'correlation-id': '52c2b040-257b-11ee-a034-0386a56d0c23'
    },
    rawHeaders: [
      'Content-Type',
      'application/json',
      'Authorization',
      'Bearer TkhOU1JYTlBia3g1',
      'User-Agent',
      'PostmanRuntime/7.32.3',
      'Accept',
      '*/*',
      'Cache-Control',
      'no-cache',
      'Postman-Token',
      '67db8391-d484-477e-a2b2-c3b1c5a0a5aa',
      'Host',
      'localhost:8004',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Connection',
      'keep-alive',
      'Content-Length',
      '232'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/createUsers?coll=homework&id=homework&version=1.0.0',
    method: 'POST',
    statusCode: null,
    statusMessage: null,
    client: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: qpCheck],
                        name: 'qpCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/createUsers',
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 157
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: qpCheck],
                        name: 'qpCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/createUsers',
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 157
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: [Circular *5],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: <ref *6> ServerResponse {
        _events: [Object: null prototype] {
          finish: [Function: bound resOnFinish]
        },
        _eventsCount: 1,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 1590,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Circular *1],
        _header: 'HTTP/1.1 200 OK\r\n' +
          'X-Powered-By: Express\r\n' +
          'correlation-id: 52c2b040-257b-11ee-a034-0386a56d0c23\r\n' +
          'Content-Type: application/json; charset=utf-8\r\n' +
          'Content-Length: 1590\r\n' +
          'ETag: W/"636-XhDsGDeK0ZwlcJgChOuJaoHyazc"\r\n' +
          'Date: Tue, 18 Jul 2023 14:57:05 GMT\r\n' +
          'Connection: keep-alive\r\n' +
          'Keep-Alive: timeout=5\r\n' +
          '\r\n',
        _keepAliveTimeout: 5000,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular *5],
        locals: [Object: null prototype] {},
        statusCode: 200,
        message: 'Successfully Updated Salesforce User Listing With New User Array',
        success: {
          updatedMergedArray: [
            {
              Username: 'SethTestUser8@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: '00eDw000000R6XFIA0',
              TimeZoneSidKey: 'America/New_York',
              LanguageLocaleKey: 'en_US',
              EmailEncodingKey: 'UTF-8',
              LocaleSidKey: 'en_US'
            },
            {
              Username: 'SethTestUser9@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: '00eDw000000R6XKIA0',
              TimeZoneSidKey: 'America/New_York',
              LanguageLocaleKey: 'en_US',
              EmailEncodingKey: 'UTF-8',
              LocaleSidKey: 'en_US'
            },
            {
              Username: 'SethTestUser10@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: '00eDw000000R6XPIA0',
              TimeZoneSidKey: 'America/New_York',
              LanguageLocaleKey: 'en_US',
              EmailEncodingKey: 'UTF-8',
              LocaleSidKey: 'en_US'
            },
            {
              Username: 'SethTestUser11@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: '00eDw000000R6XUIA0',
              TimeZoneSidKey: 'America/New_York',
              LanguageLocaleKey: 'en_US',
              EmailEncodingKey: 'UTF-8',
              LocaleSidKey: 'en_US'
            },
            {
              Username: 'SethTestUser12@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: '00eDw000000R6XZIA0',
              TimeZoneSidKey: 'America/New_York',
              LanguageLocaleKey: 'en_US',
              EmailEncodingKey: 'UTF-8',
              LocaleSidKey: 'en_US'
            }
          ]
        },
        statusMessage: 'OK',
        level: 'info',
        service: 'some-random-service',
        timestamp: '2023-07-18T14:57:05.571Z',
        label: 'validation',
        [Symbol(kCapture)]: false,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          'x-powered-by': [ 'X-Powered-By', 'Express' ],
          'correlation-id': [ 'correlation-id', '52c2b040-257b-11ee-a034-0386a56d0c23' ],
          'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
          'content-length': [ 'Content-Length', '1590' ],
          etag: [ 'ETag', 'W/"636-XhDsGDeK0ZwlcJgChOuJaoHyazc"' ]
        },
        [Symbol(level)]: 'info',
        [Symbol(message)]: '{"_contentLength":1590,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":"HTTP/1.1 200 OK\\r\\nX-Powered-By: Express\\r\\ncorrelation-id: 52c2b040-257b-11ee-a034-0386a56d0c23\\r\\nContent-Type: application/json; charset=utf-8\\r\\nContent-Length: 1590\\r\\nETag: W/\\"636-XhDsGDeK0ZwlcJgChOuJaoHyazc\\"\\r\\nDate: Tue, 18 Jul 2023 14:57:05 GMT\\r\\nConnection: keep-alive\\r\\nKeep-Alive: timeout=5\\r\\n\\r\\n","_headerSent":true,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":true,"label":"validation","level":"info","locals":{},"message":"Successfully Updated Salesforce User Listing With New User Array","outputData":[],"outputSize":0,"req":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/createUsers?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/createUsers?coll=homework&id=homework&version=1.0.0","path":"/createUsers?coll=homework&id=homework&version=1.0.0","pathname":"/createUsers","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"52c2b040-257b-11ee-a034-0386a56d0c23","host":"localhost:8004","postman-token":"67db8391-d484-477e-a2b2-c3b1c5a0a5aa","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/createUsers?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","myEndpoint":"createUsers","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","67db8391-d484-477e-a2b2-c3b1c5a0a5aa","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/createUsers","stack":[{"keys":[],"method":"post","name":"createUsers","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/createUsers?coll=homework&id=homework&version=1.0.0"},"sendDate":true,"service":"some-random-service","shouldKeepAlive":true,"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/createUsers?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/createUsers?coll=homework&id=homework&version=1.0.0","path":"/createUsers?coll=homework&id=homework&version=1.0.0","pathname":"/createUsers","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":"[Circular]","complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"52c2b040-257b-11ee-a034-0386a56d0c23","host":"localhost:8004","postman-token":"67db8391-d484-477e-a2b2-c3b1c5a0a5aa","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/createUsers?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","myEndpoint":"createUsers","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","67db8391-d484-477e-a2b2-c3b1c5a0a5aa","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/createUsers","stack":[{"keys":[],"method":"post","name":"createUsers","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":"[Circular]","statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/createUsers?coll=homework&id=homework&version=1.0.0"},"maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":200,"statusMessage":"OK","success":{"updatedMergedArray":[{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XFIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser8@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XKIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser9@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XPIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser10@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XUIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser11@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XZIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser12@cmentor.com"}]},"timestamp":"2023-07-18T14:57:05.571Z","useChunkedEncodingByDefault":true,"writable":true}'
      },
      [Symbol(async_id_symbol)]: 167,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _consuming: true,
    _dumped: false,
    next: [Function: next],
    baseUrl: '/data/api-management/apis/v1',
    originalUrl: '/data/api-management/apis/v1/createUsers?coll=homework&id=homework&version=1.0.0',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: '?coll=homework&id=homework&version=1.0.0',
      query: 'coll=homework&id=homework&version=1.0.0',
      pathname: '/createUsers',
      path: '/createUsers?coll=homework&id=homework&version=1.0.0',
      href: '/createUsers?coll=homework&id=homework&version=1.0.0',
      _raw: '/createUsers?coll=homework&id=homework&version=1.0.0'
    },
    params: {},
    query: {
      coll: 'homework',
      id: 'homework',
      version: '1.0.0',
      myEndpoint: 'createUsers'
    },
    res: <ref *6> ServerResponse {
      _events: [Object: null prototype] {
        finish: [Function: bound resOnFinish]
      },
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: 1590,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      socket: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: qpCheck],
                          name: 'qpCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/createUsers',
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 157
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: qpCheck],
                          name: 'qpCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/createUsers',
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 157
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *5],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *6],
        [Symbol(async_id_symbol)]: 167,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _header: 'HTTP/1.1 200 OK\r\n' +
        'X-Powered-By: Express\r\n' +
        'correlation-id: 52c2b040-257b-11ee-a034-0386a56d0c23\r\n' +
        'Content-Type: application/json; charset=utf-8\r\n' +
        'Content-Length: 1590\r\n' +
        'ETag: W/"636-XhDsGDeK0ZwlcJgChOuJaoHyazc"\r\n' +
        'Date: Tue, 18 Jul 2023 14:57:05 GMT\r\n' +
        'Connection: keep-alive\r\n' +
        'Keep-Alive: timeout=5\r\n' +
        '\r\n',
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      _sent100: false,
      _expect_continue: false,
      req: [Circular *5],
      locals: [Object: null prototype] {},
      statusCode: 200,
      message: 'Successfully Updated Salesforce User Listing With New User Array',
      success: {
        updatedMergedArray: [
          {
            Username: 'SethTestUser8@cmentor.com',
            Email: 'tammi@cmentor.com',
            Alias: 'TammiTst',
            LastName: 'Krobert',
            FirstName: 'Tammi',
            ProfileId: '00eDw000000R6XFIA0',
            TimeZoneSidKey: 'America/New_York',
            LanguageLocaleKey: 'en_US',
            EmailEncodingKey: 'UTF-8',
            LocaleSidKey: 'en_US'
          },
          {
            Username: 'SethTestUser9@cmentor.com',
            Email: 'tammi@cmentor.com',
            Alias: 'TammiTst',
            LastName: 'Krobert',
            FirstName: 'Tammi',
            ProfileId: '00eDw000000R6XKIA0',
            TimeZoneSidKey: 'America/New_York',
            LanguageLocaleKey: 'en_US',
            EmailEncodingKey: 'UTF-8',
            LocaleSidKey: 'en_US'
          },
          {
            Username: 'SethTestUser10@cmentor.com',
            Email: 'tammi@cmentor.com',
            Alias: 'TammiTst',
            LastName: 'Krobert',
            FirstName: 'Tammi',
            ProfileId: '00eDw000000R6XPIA0',
            TimeZoneSidKey: 'America/New_York',
            LanguageLocaleKey: 'en_US',
            EmailEncodingKey: 'UTF-8',
            LocaleSidKey: 'en_US'
          },
          {
            Username: 'SethTestUser11@cmentor.com',
            Email: 'tammi@cmentor.com',
            Alias: 'TammiTst',
            LastName: 'Krobert',
            FirstName: 'Tammi',
            ProfileId: '00eDw000000R6XUIA0',
            TimeZoneSidKey: 'America/New_York',
            LanguageLocaleKey: 'en_US',
            EmailEncodingKey: 'UTF-8',
            LocaleSidKey: 'en_US'
          },
          {
            Username: 'SethTestUser12@cmentor.com',
            Email: 'tammi@cmentor.com',
            Alias: 'TammiTst',
            LastName: 'Krobert',
            FirstName: 'Tammi',
            ProfileId: '00eDw000000R6XZIA0',
            TimeZoneSidKey: 'America/New_York',
            LanguageLocaleKey: 'en_US',
            EmailEncodingKey: 'UTF-8',
            LocaleSidKey: 'en_US'
          }
        ]
      },
      statusMessage: 'OK',
      level: 'info',
      service: 'some-random-service',
      timestamp: '2023-07-18T14:57:05.571Z',
      label: 'validation',
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        'x-powered-by': [ 'X-Powered-By', 'Express' ],
        'correlation-id': [ 'correlation-id', '52c2b040-257b-11ee-a034-0386a56d0c23' ],
        'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
        'content-length': [ 'Content-Length', '1590' ],
        etag: [ 'ETag', 'W/"636-XhDsGDeK0ZwlcJgChOuJaoHyazc"' ]
      },
      [Symbol(level)]: 'info',
      [Symbol(message)]: '{"_contentLength":1590,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":"HTTP/1.1 200 OK\\r\\nX-Powered-By: Express\\r\\ncorrelation-id: 52c2b040-257b-11ee-a034-0386a56d0c23\\r\\nContent-Type: application/json; charset=utf-8\\r\\nContent-Length: 1590\\r\\nETag: W/\\"636-XhDsGDeK0ZwlcJgChOuJaoHyazc\\"\\r\\nDate: Tue, 18 Jul 2023 14:57:05 GMT\\r\\nConnection: keep-alive\\r\\nKeep-Alive: timeout=5\\r\\n\\r\\n","_headerSent":true,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":true,"label":"validation","level":"info","locals":{},"message":"Successfully Updated Salesforce User Listing With New User Array","outputData":[],"outputSize":0,"req":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/createUsers?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/createUsers?coll=homework&id=homework&version=1.0.0","path":"/createUsers?coll=homework&id=homework&version=1.0.0","pathname":"/createUsers","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"52c2b040-257b-11ee-a034-0386a56d0c23","host":"localhost:8004","postman-token":"67db8391-d484-477e-a2b2-c3b1c5a0a5aa","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/createUsers?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","myEndpoint":"createUsers","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","67db8391-d484-477e-a2b2-c3b1c5a0a5aa","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/createUsers","stack":[{"keys":[],"method":"post","name":"createUsers","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/createUsers?coll=homework&id=homework&version=1.0.0"},"sendDate":true,"service":"some-random-service","shouldKeepAlive":true,"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/createUsers?coll=homework&id=homework&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/createUsers?coll=homework&id=homework&version=1.0.0","path":"/createUsers?coll=homework&id=homework&version=1.0.0","pathname":"/createUsers","port":null,"protocol":null,"query":"coll=homework&id=homework&version=1.0.0","search":"?coll=homework&id=homework&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":"[Circular]","complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"52c2b040-257b-11ee-a034-0386a56d0c23","host":"localhost:8004","postman-token":"67db8391-d484-477e-a2b2-c3b1c5a0a5aa","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/createUsers?coll=homework&id=homework&version=1.0.0","params":{},"query":{"coll":"homework","id":"homework","myEndpoint":"createUsers","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","67db8391-d484-477e-a2b2-c3b1c5a0a5aa","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/createUsers","stack":[{"keys":[],"method":"post","name":"createUsers","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":"[Circular]","statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/createUsers?coll=homework&id=homework&version=1.0.0"},"maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":200,"statusMessage":"OK","success":{"updatedMergedArray":[{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XFIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser8@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XKIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser9@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XPIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser10@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XUIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser11@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XZIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser12@cmentor.com"}]},"timestamp":"2023-07-18T14:57:05.571Z","useChunkedEncodingByDefault":true,"writable":true}'
    },
    body: {
      salesforceOrgApiUrl: 'https://cmentor--tammisb.sandbox.my.salesforce.com',
      accessToken: 'Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q'
    },
    _body: true,
    length: undefined,
    getId: [Function (anonymous)],
    route: Route {
      path: '/createUsers',
      stack: [
        Layer {
          handle: [AsyncFunction: createUsers],
          name: 'createUsers',
          params: undefined,
          path: undefined,
          keys: [],
          regexp: /^\/?$/i { fast_star: false, fast_slash: false },
          method: 'post'
        },
        Layer {
          handle: [Function (anonymous)],
          name: '<anonymous>',
          params: undefined,
          path: undefined,
          keys: [],
          regexp: /^\/?$/i { fast_star: false, fast_slash: false },
          method: 'post'
        }
      ],
      methods: { post: true }
    },
    [Symbol(kCapture)]: false,
    [Symbol(RequestTimeout)]: undefined
  },
  locals: [Object: null prototype] {},
  statusCode: 200,
  message: 'Successfully Updated Salesforce User Listing With New User Array',
  success: {
    updatedMergedArray: [
      {
        Username: 'SethTestUser8@cmentor.com',
        Email: 'tammi@cmentor.com',
        Alias: 'TammiTst',
        LastName: 'Krobert',
        FirstName: 'Tammi',
        ProfileId: '00eDw000000R6XFIA0',
        TimeZoneSidKey: 'America/New_York',
        LanguageLocaleKey: 'en_US',
        EmailEncodingKey: 'UTF-8',
        LocaleSidKey: 'en_US'
      },
      {
        Username: 'SethTestUser9@cmentor.com',
        Email: 'tammi@cmentor.com',
        Alias: 'TammiTst',
        LastName: 'Krobert',
        FirstName: 'Tammi',
        ProfileId: '00eDw000000R6XKIA0',
        TimeZoneSidKey: 'America/New_York',
        LanguageLocaleKey: 'en_US',
        EmailEncodingKey: 'UTF-8',
        LocaleSidKey: 'en_US'
      },
      {
        Username: 'SethTestUser10@cmentor.com',
        Email: 'tammi@cmentor.com',
        Alias: 'TammiTst',
        LastName: 'Krobert',
        FirstName: 'Tammi',
        ProfileId: '00eDw000000R6XPIA0',
        TimeZoneSidKey: 'America/New_York',
        LanguageLocaleKey: 'en_US',
        EmailEncodingKey: 'UTF-8',
        LocaleSidKey: 'en_US'
      },
      {
        Username: 'SethTestUser11@cmentor.com',
        Email: 'tammi@cmentor.com',
        Alias: 'TammiTst',
        LastName: 'Krobert',
        FirstName: 'Tammi',
        ProfileId: '00eDw000000R6XUIA0',
        TimeZoneSidKey: 'America/New_York',
        LanguageLocaleKey: 'en_US',
        EmailEncodingKey: 'UTF-8',
        LocaleSidKey: 'en_US'
      },
      {
        Username: 'SethTestUser12@cmentor.com',
        Email: 'tammi@cmentor.com',
        Alias: 'TammiTst',
        LastName: 'Krobert',
        FirstName: 'Tammi',
        ProfileId: '00eDw000000R6XZIA0',
        TimeZoneSidKey: 'America/New_York',
        LanguageLocaleKey: 'en_US',
        EmailEncodingKey: 'UTF-8',
        LocaleSidKey: 'en_US'
      }
    ]
  },
  statusMessage: 'OK',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T14:57:05.571Z',
  label: 'validation',
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'correlation-id': [ 'correlation-id', '52c2b040-257b-11ee-a034-0386a56d0c23' ],
    'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
    'content-length': [ 'Content-Length', '1590' ],
    etag: [ 'ETag', 'W/"636-XhDsGDeK0ZwlcJgChOuJaoHyazc"' ]
  }
}
{
  message: 'Received a POST request for /data/api-management/apis/v1/createUsers?coll=homework&id=TammiLaw&version=1.0.0',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T15:27:29.417Z',
  label: 'validation'
}
{
  message: 'No correlation-id found creating new correlation-id header of: 9b736790-257f-11ee-a034-0386a56d0c23',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T15:27:29.417Z',
  label: 'validation'
}
{
  _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  destroyed: false,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  _defaultKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: 1590,
  _hasBody: true,
  _trailer: '',
  finished: true,
  _headerSent: true,
  socket: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      errored: null,
      closed: false,
      closeEmitted: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      dataEmitted: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    _events: [Object: null prototype] {
      end: [
        [Function: onReadableStreamEnd],
        [Function: bound socketOnEnd]
      ],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [
        [Function: bound socketOnClose],
        [Function: onServerResponseClose]
      ],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: <ref *2> WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: {
        count: 1,
        cb: [Function (anonymous)],
        stream: [Circular *1],
        state: [Circular *2]
      },
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 1,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      errored: null,
      closed: false,
      closeEmitted: false
    },
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: <ref *4> Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      _events: [Object: null prototype] {
        request: <ref *3> [Function: app] {
          _events: [Object: null prototype] { mount: [Function: onmount] },
          _eventsCount: 1,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames],
          init: [Function: init],
          defaultConfiguration: [Function: defaultConfiguration],
          lazyrouter: [Function: lazyrouter],
          handle: [Function: handle],
          use: [Function: use],
          route: [Function: route],
          engine: [Function: engine],
          param: [Function: param],
          set: [Function: set],
          path: [Function: path],
          enabled: [Function: enabled],
          disabled: [Function: disabled],
          enable: [Function: enable],
          disable: [Function: disable],
          acl: [Function (anonymous)],
          bind: [Function (anonymous)],
          checkout: [Function (anonymous)],
          connect: [Function (anonymous)],
          copy: [Function (anonymous)],
          delete: [Function (anonymous)],
          get: [Function (anonymous)],
          head: [Function (anonymous)],
          link: [Function (anonymous)],
          lock: [Function (anonymous)],
          'm-search': [Function (anonymous)],
          merge: [Function (anonymous)],
          mkactivity: [Function (anonymous)],
          mkcalendar: [Function (anonymous)],
          mkcol: [Function (anonymous)],
          move: [Function (anonymous)],
          notify: [Function (anonymous)],
          options: [Function (anonymous)],
          patch: [Function (anonymous)],
          post: [Function (anonymous)],
          pri: [Function (anonymous)],
          propfind: [Function (anonymous)],
          proppatch: [Function (anonymous)],
          purge: [Function (anonymous)],
          put: [Function (anonymous)],
          rebind: [Function (anonymous)],
          report: [Function (anonymous)],
          search: [Function (anonymous)],
          source: [Function (anonymous)],
          subscribe: [Function (anonymous)],
          trace: [Function (anonymous)],
          unbind: [Function (anonymous)],
          unlink: [Function (anonymous)],
          unlock: [Function (anonymous)],
          unsubscribe: [Function (anonymous)],
          all: [Function: all],
          del: [Function (anonymous)],
          render: [Function: render],
          listen: [Function: listen],
          request: IncomingMessage { app: [Circular *3] },
          response: ServerResponse { app: [Circular *3] },
          cache: {},
          engines: {},
          settings: {
            'x-powered-by': true,
            etag: 'weak',
            'etag fn': [Function: generateETag],
            env: 'development',
            'query parser': 'extended',
            'query parser fn': [Function: parseExtendedQueryString],
            'subdomain offset': 2,
            'trust proxy': false,
            'trust proxy fn': [Function: trustNone],
            view: [Function: View],
            views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
            'jsonp callback name': 'callback'
          },
          locals: [Object: null prototype] {
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            }
          },
          mountpath: '/',
          _router: [Function: router] {
            params: {},
            _params: [],
            caseSensitive: false,
            mergeParams: undefined,
            strict: false,
            stack: [
              Layer {
                handle: [Function: query],
                name: 'query',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: expressInit],
                name: 'expressInit',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: urlencodedParser],
                name: 'urlencodedParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: jsonParser],
                name: 'jsonParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: router] {
                  params: {},
                  _params: [],
                  caseSensitive: undefined,
                  mergeParams: undefined,
                  strict: undefined,
                  stack: [
                    Layer {
                      handle: [AsyncFunction: authCheck],
                      name: 'authCheck',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [AsyncFunction: appJsonHeader],
                      name: 'appJsonHeader',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [AsyncFunction: qpCheck],
                      name: 'qpCheck',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [AsyncFunction: bodyData],
                      name: 'bodyData',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/health\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/health',
                        stack: [
                          Layer {
                            handle: [AsyncFunction: healthStatus],
                            name: 'healthStatus',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          }
                        ],
                        methods: { get: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/getProfileIds\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/getProfileIds',
                        stack: [
                          Layer {
                            handle: [AsyncFunction: getProfileIds],
                            name: 'getProfileIds',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          }
                        ],
                        methods: { post: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: {},
                      path: '/createUsers',
                      keys: [],
                      regexp: /^\/createUsers\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/createUsers',
                        stack: [
                          Layer {
                            handle: [AsyncFunction: createUsers],
                            name: 'createUsers',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          }
                        ],
                        methods: { post: true }
                      }
                    },
                    Layer {
                      handle: [Function: SuccessHandler],
                      name: 'SuccessHandler',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: ErrorHandler],
                      name: 'ErrorHandler',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    }
                  ]
                },
                name: 'router',
                params: {},
                path: '/data/api-management/apis/v1',
                keys: [],
                regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '/data/api-management/apis/v1',
                keys: [],
                regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: undefined
              }
            ]
          }
        },
        connection: [Function: connectionListener]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: TCP {
        reading: false,
        onconnection: [Function: onconnection],
        [Symbol(owner_symbol)]: [Circular *4]
      },
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      requestTimeout: 0,
      _connectionKey: '6::::8004',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 157
    },
    _server: <ref *4> Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      _events: [Object: null prototype] {
        request: <ref *3> [Function: app] {
          _events: [Object: null prototype] { mount: [Function: onmount] },
          _eventsCount: 1,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames],
          init: [Function: init],
          defaultConfiguration: [Function: defaultConfiguration],
          lazyrouter: [Function: lazyrouter],
          handle: [Function: handle],
          use: [Function: use],
          route: [Function: route],
          engine: [Function: engine],
          param: [Function: param],
          set: [Function: set],
          path: [Function: path],
          enabled: [Function: enabled],
          disabled: [Function: disabled],
          enable: [Function: enable],
          disable: [Function: disable],
          acl: [Function (anonymous)],
          bind: [Function (anonymous)],
          checkout: [Function (anonymous)],
          connect: [Function (anonymous)],
          copy: [Function (anonymous)],
          delete: [Function (anonymous)],
          get: [Function (anonymous)],
          head: [Function (anonymous)],
          link: [Function (anonymous)],
          lock: [Function (anonymous)],
          'm-search': [Function (anonymous)],
          merge: [Function (anonymous)],
          mkactivity: [Function (anonymous)],
          mkcalendar: [Function (anonymous)],
          mkcol: [Function (anonymous)],
          move: [Function (anonymous)],
          notify: [Function (anonymous)],
          options: [Function (anonymous)],
          patch: [Function (anonymous)],
          post: [Function (anonymous)],
          pri: [Function (anonymous)],
          propfind: [Function (anonymous)],
          proppatch: [Function (anonymous)],
          purge: [Function (anonymous)],
          put: [Function (anonymous)],
          rebind: [Function (anonymous)],
          report: [Function (anonymous)],
          search: [Function (anonymous)],
          source: [Function (anonymous)],
          subscribe: [Function (anonymous)],
          trace: [Function (anonymous)],
          unbind: [Function (anonymous)],
          unlink: [Function (anonymous)],
          unlock: [Function (anonymous)],
          unsubscribe: [Function (anonymous)],
          all: [Function: all],
          del: [Function (anonymous)],
          render: [Function: render],
          listen: [Function: listen],
          request: IncomingMessage { app: [Circular *3] },
          response: ServerResponse { app: [Circular *3] },
          cache: {},
          engines: {},
          settings: {
            'x-powered-by': true,
            etag: 'weak',
            'etag fn': [Function: generateETag],
            env: 'development',
            'query parser': 'extended',
            'query parser fn': [Function: parseExtendedQueryString],
            'subdomain offset': 2,
            'trust proxy': false,
            'trust proxy fn': [Function: trustNone],
            view: [Function: View],
            views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
            'jsonp callback name': 'callback'
          },
          locals: [Object: null prototype] {
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            }
          },
          mountpath: '/',
          _router: [Function: router] {
            params: {},
            _params: [],
            caseSensitive: false,
            mergeParams: undefined,
            strict: false,
            stack: [
              Layer {
                handle: [Function: query],
                name: 'query',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: expressInit],
                name: 'expressInit',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: urlencodedParser],
                name: 'urlencodedParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: jsonParser],
                name: 'jsonParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: router] {
                  params: {},
                  _params: [],
                  caseSensitive: undefined,
                  mergeParams: undefined,
                  strict: undefined,
                  stack: [
                    Layer {
                      handle: [AsyncFunction: authCheck],
                      name: 'authCheck',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [AsyncFunction: appJsonHeader],
                      name: 'appJsonHeader',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [AsyncFunction: qpCheck],
                      name: 'qpCheck',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [AsyncFunction: bodyData],
                      name: 'bodyData',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/health\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/health',
                        stack: [
                          Layer {
                            handle: [AsyncFunction: healthStatus],
                            name: 'healthStatus',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          }
                        ],
                        methods: { get: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/getProfileIds\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/getProfileIds',
                        stack: [
                          Layer {
                            handle: [AsyncFunction: getProfileIds],
                            name: 'getProfileIds',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          }
                        ],
                        methods: { post: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: {},
                      path: '/createUsers',
                      keys: [],
                      regexp: /^\/createUsers\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/createUsers',
                        stack: [
                          Layer {
                            handle: [AsyncFunction: createUsers],
                            name: 'createUsers',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          }
                        ],
                        methods: { post: true }
                      }
                    },
                    Layer {
                      handle: [Function: SuccessHandler],
                      name: 'SuccessHandler',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: ErrorHandler],
                      name: 'ErrorHandler',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    }
                  ]
                },
                name: 'router',
                params: {},
                path: '/data/api-management/apis/v1',
                keys: [],
                regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '/data/api-management/apis/v1',
                keys: [],
                regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: undefined
              }
            ]
          }
        },
        connection: [Function: connectionListener]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: TCP {
        reading: false,
        onconnection: [Function: onconnection],
        [Symbol(owner_symbol)]: [Circular *4]
      },
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      requestTimeout: 0,
      _connectionKey: '6::::8004',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 157
    },
    parser: HTTPParser {
      '0': [Function: bound setRequestTimeout],
      '1': [Function: parserOnHeaders],
      '2': [Function: parserOnHeadersComplete],
      '3': [Function: parserOnBody],
      '4': [Function: parserOnMessageComplete],
      '5': [Function: bound onParserExecute],
      '6': [Function: bound onParserTimeout],
      _headers: [],
      _url: '',
      socket: [Circular *1],
      incoming: <ref *5> IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          sync: false,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [Function: clearRequestTimeout]
        },
        _eventsCount: 1,
        _maxListeners: undefined,
        socket: [Circular *1],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: {
          'content-type': 'application/json',
          authorization: 'Bearer TkhOU1JYTlBia3g1',
          'user-agent': 'PostmanRuntime/7.32.3',
          accept: '*/*',
          'cache-control': 'no-cache',
          'postman-token': 'e68bac6c-b6b8-4428-b42c-023bb560089b',
          host: 'localhost:8004',
          'accept-encoding': 'gzip, deflate, br',
          connection: 'keep-alive',
          'content-length': '232',
          'correlation-id': '9b736790-257f-11ee-a034-0386a56d0c23'
        },
        rawHeaders: [
          'Content-Type',
          'application/json',
          'Authorization',
          'Bearer TkhOU1JYTlBia3g1',
          'User-Agent',
          'PostmanRuntime/7.32.3',
          'Accept',
          '*/*',
          'Cache-Control',
          'no-cache',
          'Postman-Token',
          'e68bac6c-b6b8-4428-b42c-023bb560089b',
          'Host',
          'localhost:8004',
          'Accept-Encoding',
          'gzip, deflate, br',
          'Connection',
          'keep-alive',
          'Content-Length',
          '232'
        ],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '/createUsers?coll=homework&id=TammiLaw&version=1.0.0',
        method: 'POST',
        statusCode: null,
        statusMessage: null,
        client: [Circular *1],
        _consuming: true,
        _dumped: false,
        next: [Function: next],
        baseUrl: '/data/api-management/apis/v1',
        originalUrl: '/data/api-management/apis/v1/createUsers?coll=homework&id=TammiLaw&version=1.0.0',
        _parsedUrl: Url {
          protocol: null,
          slashes: null,
          auth: null,
          host: null,
          port: null,
          hostname: null,
          hash: null,
          search: '?coll=homework&id=TammiLaw&version=1.0.0',
          query: 'coll=homework&id=TammiLaw&version=1.0.0',
          pathname: '/createUsers',
          path: '/createUsers?coll=homework&id=TammiLaw&version=1.0.0',
          href: '/createUsers?coll=homework&id=TammiLaw&version=1.0.0',
          _raw: '/createUsers?coll=homework&id=TammiLaw&version=1.0.0'
        },
        params: {},
        query: {
          coll: 'homework',
          id: 'TammiLaw',
          version: '1.0.0',
          myEndpoint: 'createUsers'
        },
        res: ServerResponse {
          _events: [Object: null prototype] {
            finish: [Function: bound resOnFinish]
          },
          _eventsCount: 1,
          _maxListeners: undefined,
          outputData: [],
          outputSize: 0,
          writable: true,
          destroyed: false,
          _last: false,
          chunkedEncoding: false,
          shouldKeepAlive: true,
          _defaultKeepAlive: true,
          useChunkedEncodingByDefault: true,
          sendDate: true,
          _removedConnection: false,
          _removedContLen: false,
          _removedTE: false,
          _contentLength: 1590,
          _hasBody: true,
          _trailer: '',
          finished: true,
          _headerSent: true,
          socket: [Circular *1],
          _header: 'HTTP/1.1 200 OK\r\n' +
            'X-Powered-By: Express\r\n' +
            'correlation-id: 9b736790-257f-11ee-a034-0386a56d0c23\r\n' +
            'Content-Type: application/json; charset=utf-8\r\n' +
            'Content-Length: 1590\r\n' +
            'ETag: W/"636-4ElVjInrpftTXcpHXqTcoSBkbMo"\r\n' +
            'Date: Tue, 18 Jul 2023 15:27:46 GMT\r\n' +
            'Connection: keep-alive\r\n' +
            'Keep-Alive: timeout=5\r\n' +
            '\r\n',
          _keepAliveTimeout: 5000,
          _onPendingData: [Function: bound updateOutgoingData],
          _sent100: false,
          _expect_continue: false,
          req: [Circular *5],
          locals: [Object: null prototype] {},
          statusCode: 200,
          message: 'Successfully Updated Salesforce User Listing With New User Array',
          success: {
            updatedMergedArray: [
              {
                Username: 'SethTestUser8@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: '00eDw000000R6XFIA0',
                TimeZoneSidKey: 'America/New_York',
                LanguageLocaleKey: 'en_US',
                EmailEncodingKey: 'UTF-8',
                LocaleSidKey: 'en_US'
              },
              {
                Username: 'SethTestUser9@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: '00eDw000000R6XKIA0',
                TimeZoneSidKey: 'America/New_York',
                LanguageLocaleKey: 'en_US',
                EmailEncodingKey: 'UTF-8',
                LocaleSidKey: 'en_US'
              },
              {
                Username: 'SethTestUser10@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: '00eDw000000R6XPIA0',
                TimeZoneSidKey: 'America/New_York',
                LanguageLocaleKey: 'en_US',
                EmailEncodingKey: 'UTF-8',
                LocaleSidKey: 'en_US'
              },
              {
                Username: 'SethTestUser11@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: '00eDw000000R6XUIA0',
                TimeZoneSidKey: 'America/New_York',
                LanguageLocaleKey: 'en_US',
                EmailEncodingKey: 'UTF-8',
                LocaleSidKey: 'en_US'
              },
              {
                Username: 'SethTestUser12@cmentor.com',
                Email: 'tammi@cmentor.com',
                Alias: 'TammiTst',
                LastName: 'Krobert',
                FirstName: 'Tammi',
                ProfileId: '00eDw000000R6XZIA0',
                TimeZoneSidKey: 'America/New_York',
                LanguageLocaleKey: 'en_US',
                EmailEncodingKey: 'UTF-8',
                LocaleSidKey: 'en_US'
              }
            ]
          },
          statusMessage: 'OK',
          level: 'info',
          service: 'some-random-service',
          timestamp: '2023-07-18T15:27:46.337Z',
          label: 'validation',
          [Symbol(kCapture)]: false,
          [Symbol(kNeedDrain)]: false,
          [Symbol(corked)]: 0,
          [Symbol(kOutHeaders)]: [Object: null prototype] {
            'x-powered-by': [ 'X-Powered-By', 'Express' ],
            'correlation-id': [
              'correlation-id',
              '9b736790-257f-11ee-a034-0386a56d0c23'
            ],
            'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
            'content-length': [ 'Content-Length', '1590' ],
            etag: [ 'ETag', 'W/"636-4ElVjInrpftTXcpHXqTcoSBkbMo"' ]
          },
          [Symbol(level)]: 'info',
          [Symbol(message)]: '{"_contentLength":1590,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":"HTTP/1.1 200 OK\\r\\nX-Powered-By: Express\\r\\ncorrelation-id: 9b736790-257f-11ee-a034-0386a56d0c23\\r\\nContent-Type: application/json; charset=utf-8\\r\\nContent-Length: 1590\\r\\nETag: W/\\"636-4ElVjInrpftTXcpHXqTcoSBkbMo\\"\\r\\nDate: Tue, 18 Jul 2023 15:27:46 GMT\\r\\nConnection: keep-alive\\r\\nKeep-Alive: timeout=5\\r\\n\\r\\n","_headerSent":true,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":true,"label":"validation","level":"info","locals":{},"message":"Successfully Updated Salesforce User Listing With New User Array","outputData":[],"outputSize":0,"req":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","path":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","pathname":"/createUsers","port":null,"protocol":null,"query":"coll=homework&id=TammiLaw&version=1.0.0","search":"?coll=homework&id=TammiLaw&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"9b736790-257f-11ee-a034-0386a56d0c23","host":"localhost:8004","postman-token":"e68bac6c-b6b8-4428-b42c-023bb560089b","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/createUsers?coll=homework&id=TammiLaw&version=1.0.0","params":{},"query":{"coll":"homework","id":"TammiLaw","myEndpoint":"createUsers","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","e68bac6c-b6b8-4428-b42c-023bb560089b","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/createUsers","stack":[{"keys":[],"method":"post","name":"createUsers","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0"},"sendDate":true,"service":"some-random-service","shouldKeepAlive":true,"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","path":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","pathname":"/createUsers","port":null,"protocol":null,"query":"coll=homework&id=TammiLaw&version=1.0.0","search":"?coll=homework&id=TammiLaw&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":"[Circular]","complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"9b736790-257f-11ee-a034-0386a56d0c23","host":"localhost:8004","postman-token":"e68bac6c-b6b8-4428-b42c-023bb560089b","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/createUsers?coll=homework&id=TammiLaw&version=1.0.0","params":{},"query":{"coll":"homework","id":"TammiLaw","myEndpoint":"createUsers","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","e68bac6c-b6b8-4428-b42c-023bb560089b","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/createUsers","stack":[{"keys":[],"method":"post","name":"createUsers","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":"[Circular]","statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0"},"maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":200,"statusMessage":"OK","success":{"updatedMergedArray":[{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XFIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser8@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XKIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser9@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XPIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser10@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XUIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser11@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XZIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser12@cmentor.com"}]},"timestamp":"2023-07-18T15:27:46.337Z","useChunkedEncodingByDefault":true,"writable":true}'
        },
        body: {
          salesforceOrgApiUrl: 'https://cmentor--tammisb.sandbox.my.salesforce.com',
          accessToken: 'Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q'
        },
        _body: true,
        length: undefined,
        getId: [Function (anonymous)],
        route: Route {
          path: '/createUsers',
          stack: [
            Layer {
              handle: [AsyncFunction: createUsers],
              name: 'createUsers',
              params: undefined,
              path: undefined,
              keys: [],
              regexp: /^\/?$/i { fast_star: false, fast_slash: false },
              method: 'post'
            },
            Layer {
              handle: [Function (anonymous)],
              name: '<anonymous>',
              params: undefined,
              path: undefined,
              keys: [],
              regexp: /^\/?$/i { fast_star: false, fast_slash: false },
              method: 'post'
            }
          ],
          methods: { post: true }
        },
        [Symbol(kCapture)]: false,
        [Symbol(RequestTimeout)]: undefined
      },
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      [Symbol(resource_symbol)]: HTTPServerAsyncResource {
        type: 'HTTPINCOMINGMESSAGE',
        socket: [Circular *1]
      }
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: <ref *6> ServerResponse {
      _events: [Object: null prototype] {
        finish: [Function: bound resOnFinish]
      },
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: 1590,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      socket: [Circular *1],
      _header: 'HTTP/1.1 200 OK\r\n' +
        'X-Powered-By: Express\r\n' +
        'correlation-id: 9b736790-257f-11ee-a034-0386a56d0c23\r\n' +
        'Content-Type: application/json; charset=utf-8\r\n' +
        'Content-Length: 1590\r\n' +
        'ETag: W/"636-4ElVjInrpftTXcpHXqTcoSBkbMo"\r\n' +
        'Date: Tue, 18 Jul 2023 15:27:46 GMT\r\n' +
        'Connection: keep-alive\r\n' +
        'Keep-Alive: timeout=5\r\n' +
        '\r\n',
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      _sent100: false,
      _expect_continue: false,
      req: <ref *5> IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          sync: false,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [Function: clearRequestTimeout]
        },
        _eventsCount: 1,
        _maxListeners: undefined,
        socket: [Circular *1],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: {
          'content-type': 'application/json',
          authorization: 'Bearer TkhOU1JYTlBia3g1',
          'user-agent': 'PostmanRuntime/7.32.3',
          accept: '*/*',
          'cache-control': 'no-cache',
          'postman-token': 'e68bac6c-b6b8-4428-b42c-023bb560089b',
          host: 'localhost:8004',
          'accept-encoding': 'gzip, deflate, br',
          connection: 'keep-alive',
          'content-length': '232',
          'correlation-id': '9b736790-257f-11ee-a034-0386a56d0c23'
        },
        rawHeaders: [
          'Content-Type',
          'application/json',
          'Authorization',
          'Bearer TkhOU1JYTlBia3g1',
          'User-Agent',
          'PostmanRuntime/7.32.3',
          'Accept',
          '*/*',
          'Cache-Control',
          'no-cache',
          'Postman-Token',
          'e68bac6c-b6b8-4428-b42c-023bb560089b',
          'Host',
          'localhost:8004',
          'Accept-Encoding',
          'gzip, deflate, br',
          'Connection',
          'keep-alive',
          'Content-Length',
          '232'
        ],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '/createUsers?coll=homework&id=TammiLaw&version=1.0.0',
        method: 'POST',
        statusCode: null,
        statusMessage: null,
        client: [Circular *1],
        _consuming: true,
        _dumped: false,
        next: [Function: next],
        baseUrl: '/data/api-management/apis/v1',
        originalUrl: '/data/api-management/apis/v1/createUsers?coll=homework&id=TammiLaw&version=1.0.0',
        _parsedUrl: Url {
          protocol: null,
          slashes: null,
          auth: null,
          host: null,
          port: null,
          hostname: null,
          hash: null,
          search: '?coll=homework&id=TammiLaw&version=1.0.0',
          query: 'coll=homework&id=TammiLaw&version=1.0.0',
          pathname: '/createUsers',
          path: '/createUsers?coll=homework&id=TammiLaw&version=1.0.0',
          href: '/createUsers?coll=homework&id=TammiLaw&version=1.0.0',
          _raw: '/createUsers?coll=homework&id=TammiLaw&version=1.0.0'
        },
        params: {},
        query: {
          coll: 'homework',
          id: 'TammiLaw',
          version: '1.0.0',
          myEndpoint: 'createUsers'
        },
        res: [Circular *6],
        body: {
          salesforceOrgApiUrl: 'https://cmentor--tammisb.sandbox.my.salesforce.com',
          accessToken: 'Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q'
        },
        _body: true,
        length: undefined,
        getId: [Function (anonymous)],
        route: Route {
          path: '/createUsers',
          stack: [
            Layer {
              handle: [AsyncFunction: createUsers],
              name: 'createUsers',
              params: undefined,
              path: undefined,
              keys: [],
              regexp: /^\/?$/i { fast_star: false, fast_slash: false },
              method: 'post'
            },
            Layer {
              handle: [Function (anonymous)],
              name: '<anonymous>',
              params: undefined,
              path: undefined,
              keys: [],
              regexp: /^\/?$/i { fast_star: false, fast_slash: false },
              method: 'post'
            }
          ],
          methods: { post: true }
        },
        [Symbol(kCapture)]: false,
        [Symbol(RequestTimeout)]: undefined
      },
      locals: [Object: null prototype] {},
      statusCode: 200,
      message: 'Successfully Updated Salesforce User Listing With New User Array',
      success: {
        updatedMergedArray: [
          {
            Username: 'SethTestUser8@cmentor.com',
            Email: 'tammi@cmentor.com',
            Alias: 'TammiTst',
            LastName: 'Krobert',
            FirstName: 'Tammi',
            ProfileId: '00eDw000000R6XFIA0',
            TimeZoneSidKey: 'America/New_York',
            LanguageLocaleKey: 'en_US',
            EmailEncodingKey: 'UTF-8',
            LocaleSidKey: 'en_US'
          },
          {
            Username: 'SethTestUser9@cmentor.com',
            Email: 'tammi@cmentor.com',
            Alias: 'TammiTst',
            LastName: 'Krobert',
            FirstName: 'Tammi',
            ProfileId: '00eDw000000R6XKIA0',
            TimeZoneSidKey: 'America/New_York',
            LanguageLocaleKey: 'en_US',
            EmailEncodingKey: 'UTF-8',
            LocaleSidKey: 'en_US'
          },
          {
            Username: 'SethTestUser10@cmentor.com',
            Email: 'tammi@cmentor.com',
            Alias: 'TammiTst',
            LastName: 'Krobert',
            FirstName: 'Tammi',
            ProfileId: '00eDw000000R6XPIA0',
            TimeZoneSidKey: 'America/New_York',
            LanguageLocaleKey: 'en_US',
            EmailEncodingKey: 'UTF-8',
            LocaleSidKey: 'en_US'
          },
          {
            Username: 'SethTestUser11@cmentor.com',
            Email: 'tammi@cmentor.com',
            Alias: 'TammiTst',
            LastName: 'Krobert',
            FirstName: 'Tammi',
            ProfileId: '00eDw000000R6XUIA0',
            TimeZoneSidKey: 'America/New_York',
            LanguageLocaleKey: 'en_US',
            EmailEncodingKey: 'UTF-8',
            LocaleSidKey: 'en_US'
          },
          {
            Username: 'SethTestUser12@cmentor.com',
            Email: 'tammi@cmentor.com',
            Alias: 'TammiTst',
            LastName: 'Krobert',
            FirstName: 'Tammi',
            ProfileId: '00eDw000000R6XZIA0',
            TimeZoneSidKey: 'America/New_York',
            LanguageLocaleKey: 'en_US',
            EmailEncodingKey: 'UTF-8',
            LocaleSidKey: 'en_US'
          }
        ]
      },
      statusMessage: 'OK',
      level: 'info',
      service: 'some-random-service',
      timestamp: '2023-07-18T15:27:46.337Z',
      label: 'validation',
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        'x-powered-by': [ 'X-Powered-By', 'Express' ],
        'correlation-id': [ 'correlation-id', '9b736790-257f-11ee-a034-0386a56d0c23' ],
        'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
        'content-length': [ 'Content-Length', '1590' ],
        etag: [ 'ETag', 'W/"636-4ElVjInrpftTXcpHXqTcoSBkbMo"' ]
      },
      [Symbol(level)]: 'info',
      [Symbol(message)]: '{"_contentLength":1590,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":"HTTP/1.1 200 OK\\r\\nX-Powered-By: Express\\r\\ncorrelation-id: 9b736790-257f-11ee-a034-0386a56d0c23\\r\\nContent-Type: application/json; charset=utf-8\\r\\nContent-Length: 1590\\r\\nETag: W/\\"636-4ElVjInrpftTXcpHXqTcoSBkbMo\\"\\r\\nDate: Tue, 18 Jul 2023 15:27:46 GMT\\r\\nConnection: keep-alive\\r\\nKeep-Alive: timeout=5\\r\\n\\r\\n","_headerSent":true,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":true,"label":"validation","level":"info","locals":{},"message":"Successfully Updated Salesforce User Listing With New User Array","outputData":[],"outputSize":0,"req":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","path":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","pathname":"/createUsers","port":null,"protocol":null,"query":"coll=homework&id=TammiLaw&version=1.0.0","search":"?coll=homework&id=TammiLaw&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"9b736790-257f-11ee-a034-0386a56d0c23","host":"localhost:8004","postman-token":"e68bac6c-b6b8-4428-b42c-023bb560089b","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/createUsers?coll=homework&id=TammiLaw&version=1.0.0","params":{},"query":{"coll":"homework","id":"TammiLaw","myEndpoint":"createUsers","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","e68bac6c-b6b8-4428-b42c-023bb560089b","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/createUsers","stack":[{"keys":[],"method":"post","name":"createUsers","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0"},"sendDate":true,"service":"some-random-service","shouldKeepAlive":true,"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","path":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","pathname":"/createUsers","port":null,"protocol":null,"query":"coll=homework&id=TammiLaw&version=1.0.0","search":"?coll=homework&id=TammiLaw&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":"[Circular]","complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"9b736790-257f-11ee-a034-0386a56d0c23","host":"localhost:8004","postman-token":"e68bac6c-b6b8-4428-b42c-023bb560089b","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/createUsers?coll=homework&id=TammiLaw&version=1.0.0","params":{},"query":{"coll":"homework","id":"TammiLaw","myEndpoint":"createUsers","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","e68bac6c-b6b8-4428-b42c-023bb560089b","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/createUsers","stack":[{"keys":[],"method":"post","name":"createUsers","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":"[Circular]","statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0"},"maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":200,"statusMessage":"OK","success":{"updatedMergedArray":[{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XFIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser8@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XKIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser9@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XPIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser10@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XUIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser11@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XZIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser12@cmentor.com"}]},"timestamp":"2023-07-18T15:27:46.337Z","useChunkedEncodingByDefault":true,"writable":true}'
    },
    [Symbol(async_id_symbol)]: 1814,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular *1]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(RequestTimeout)]: undefined
  },
  _header: 'HTTP/1.1 200 OK\r\n' +
    'X-Powered-By: Express\r\n' +
    'correlation-id: 9b736790-257f-11ee-a034-0386a56d0c23\r\n' +
    'Content-Type: application/json; charset=utf-8\r\n' +
    'Content-Length: 1590\r\n' +
    'ETag: W/"636-4ElVjInrpftTXcpHXqTcoSBkbMo"\r\n' +
    'Date: Tue, 18 Jul 2023 15:27:46 GMT\r\n' +
    'Connection: keep-alive\r\n' +
    'Keep-Alive: timeout=5\r\n' +
    '\r\n',
  _keepAliveTimeout: 5000,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: <ref *5> IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: true,
      ended: true,
      endEmitted: true,
      reading: false,
      sync: false,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      errored: null,
      closed: false,
      closeEmitted: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      dataEmitted: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: qpCheck],
                        name: 'qpCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/createUsers',
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 157
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: qpCheck],
                        name: 'qpCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/createUsers',
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 157
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: [Circular *5],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: <ref *6> ServerResponse {
        _events: [Object: null prototype] {
          finish: [Function: bound resOnFinish]
        },
        _eventsCount: 1,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 1590,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Circular *1],
        _header: 'HTTP/1.1 200 OK\r\n' +
          'X-Powered-By: Express\r\n' +
          'correlation-id: 9b736790-257f-11ee-a034-0386a56d0c23\r\n' +
          'Content-Type: application/json; charset=utf-8\r\n' +
          'Content-Length: 1590\r\n' +
          'ETag: W/"636-4ElVjInrpftTXcpHXqTcoSBkbMo"\r\n' +
          'Date: Tue, 18 Jul 2023 15:27:46 GMT\r\n' +
          'Connection: keep-alive\r\n' +
          'Keep-Alive: timeout=5\r\n' +
          '\r\n',
        _keepAliveTimeout: 5000,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular *5],
        locals: [Object: null prototype] {},
        statusCode: 200,
        message: 'Successfully Updated Salesforce User Listing With New User Array',
        success: {
          updatedMergedArray: [
            {
              Username: 'SethTestUser8@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: '00eDw000000R6XFIA0',
              TimeZoneSidKey: 'America/New_York',
              LanguageLocaleKey: 'en_US',
              EmailEncodingKey: 'UTF-8',
              LocaleSidKey: 'en_US'
            },
            {
              Username: 'SethTestUser9@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: '00eDw000000R6XKIA0',
              TimeZoneSidKey: 'America/New_York',
              LanguageLocaleKey: 'en_US',
              EmailEncodingKey: 'UTF-8',
              LocaleSidKey: 'en_US'
            },
            {
              Username: 'SethTestUser10@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: '00eDw000000R6XPIA0',
              TimeZoneSidKey: 'America/New_York',
              LanguageLocaleKey: 'en_US',
              EmailEncodingKey: 'UTF-8',
              LocaleSidKey: 'en_US'
            },
            {
              Username: 'SethTestUser11@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: '00eDw000000R6XUIA0',
              TimeZoneSidKey: 'America/New_York',
              LanguageLocaleKey: 'en_US',
              EmailEncodingKey: 'UTF-8',
              LocaleSidKey: 'en_US'
            },
            {
              Username: 'SethTestUser12@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: '00eDw000000R6XZIA0',
              TimeZoneSidKey: 'America/New_York',
              LanguageLocaleKey: 'en_US',
              EmailEncodingKey: 'UTF-8',
              LocaleSidKey: 'en_US'
            }
          ]
        },
        statusMessage: 'OK',
        level: 'info',
        service: 'some-random-service',
        timestamp: '2023-07-18T15:27:46.337Z',
        label: 'validation',
        [Symbol(kCapture)]: false,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          'x-powered-by': [ 'X-Powered-By', 'Express' ],
          'correlation-id': [ 'correlation-id', '9b736790-257f-11ee-a034-0386a56d0c23' ],
          'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
          'content-length': [ 'Content-Length', '1590' ],
          etag: [ 'ETag', 'W/"636-4ElVjInrpftTXcpHXqTcoSBkbMo"' ]
        },
        [Symbol(level)]: 'info',
        [Symbol(message)]: '{"_contentLength":1590,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":"HTTP/1.1 200 OK\\r\\nX-Powered-By: Express\\r\\ncorrelation-id: 9b736790-257f-11ee-a034-0386a56d0c23\\r\\nContent-Type: application/json; charset=utf-8\\r\\nContent-Length: 1590\\r\\nETag: W/\\"636-4ElVjInrpftTXcpHXqTcoSBkbMo\\"\\r\\nDate: Tue, 18 Jul 2023 15:27:46 GMT\\r\\nConnection: keep-alive\\r\\nKeep-Alive: timeout=5\\r\\n\\r\\n","_headerSent":true,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":true,"label":"validation","level":"info","locals":{},"message":"Successfully Updated Salesforce User Listing With New User Array","outputData":[],"outputSize":0,"req":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","path":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","pathname":"/createUsers","port":null,"protocol":null,"query":"coll=homework&id=TammiLaw&version=1.0.0","search":"?coll=homework&id=TammiLaw&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"9b736790-257f-11ee-a034-0386a56d0c23","host":"localhost:8004","postman-token":"e68bac6c-b6b8-4428-b42c-023bb560089b","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/createUsers?coll=homework&id=TammiLaw&version=1.0.0","params":{},"query":{"coll":"homework","id":"TammiLaw","myEndpoint":"createUsers","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","e68bac6c-b6b8-4428-b42c-023bb560089b","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/createUsers","stack":[{"keys":[],"method":"post","name":"createUsers","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0"},"sendDate":true,"service":"some-random-service","shouldKeepAlive":true,"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","path":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","pathname":"/createUsers","port":null,"protocol":null,"query":"coll=homework&id=TammiLaw&version=1.0.0","search":"?coll=homework&id=TammiLaw&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":"[Circular]","complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"9b736790-257f-11ee-a034-0386a56d0c23","host":"localhost:8004","postman-token":"e68bac6c-b6b8-4428-b42c-023bb560089b","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/createUsers?coll=homework&id=TammiLaw&version=1.0.0","params":{},"query":{"coll":"homework","id":"TammiLaw","myEndpoint":"createUsers","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","e68bac6c-b6b8-4428-b42c-023bb560089b","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/createUsers","stack":[{"keys":[],"method":"post","name":"createUsers","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":"[Circular]","statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0"},"maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":200,"statusMessage":"OK","success":{"updatedMergedArray":[{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XFIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser8@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XKIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser9@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XPIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser10@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XUIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser11@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XZIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser12@cmentor.com"}]},"timestamp":"2023-07-18T15:27:46.337Z","useChunkedEncodingByDefault":true,"writable":true}'
      },
      [Symbol(async_id_symbol)]: 1814,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: true,
    headers: {
      'content-type': 'application/json',
      authorization: 'Bearer TkhOU1JYTlBia3g1',
      'user-agent': 'PostmanRuntime/7.32.3',
      accept: '*/*',
      'cache-control': 'no-cache',
      'postman-token': 'e68bac6c-b6b8-4428-b42c-023bb560089b',
      host: 'localhost:8004',
      'accept-encoding': 'gzip, deflate, br',
      connection: 'keep-alive',
      'content-length': '232',
      'correlation-id': '9b736790-257f-11ee-a034-0386a56d0c23'
    },
    rawHeaders: [
      'Content-Type',
      'application/json',
      'Authorization',
      'Bearer TkhOU1JYTlBia3g1',
      'User-Agent',
      'PostmanRuntime/7.32.3',
      'Accept',
      '*/*',
      'Cache-Control',
      'no-cache',
      'Postman-Token',
      'e68bac6c-b6b8-4428-b42c-023bb560089b',
      'Host',
      'localhost:8004',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Connection',
      'keep-alive',
      'Content-Length',
      '232'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/createUsers?coll=homework&id=TammiLaw&version=1.0.0',
    method: 'POST',
    statusCode: null,
    statusMessage: null,
    client: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: <ref *2> WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: {
          count: 1,
          cb: [Function (anonymous)],
          stream: [Circular *1],
          state: [Circular *2]
        },
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: qpCheck],
                        name: 'qpCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/createUsers',
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 157
      },
      _server: <ref *4> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *3> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            pri: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *3] },
            response: ServerResponse { app: [Circular *3] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction: authCheck],
                        name: 'authCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: appJsonHeader],
                        name: 'appJsonHeader',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: qpCheck],
                        name: 'qpCheck',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction: bodyData],
                        name: 'bodyData',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/health\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/health',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: healthStatus],
                              name: 'healthStatus',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/getProfileIds\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getProfileIds',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: getProfileIds],
                              name: 'getProfileIds',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/createUsers',
                        keys: [],
                        regexp: /^\/createUsers\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/createUsers',
                          stack: [
                            Layer {
                              handle: [AsyncFunction: createUsers],
                              name: 'createUsers',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: SuccessHandler],
                        name: 'SuccessHandler',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: ErrorHandler],
                        name: 'ErrorHandler',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: {},
                  path: '/data/api-management/apis/v1',
                  keys: [],
                  regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *4]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8004',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 157
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: [Circular *5],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *1]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: <ref *6> ServerResponse {
        _events: [Object: null prototype] {
          finish: [Function: bound resOnFinish]
        },
        _eventsCount: 1,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 1590,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Circular *1],
        _header: 'HTTP/1.1 200 OK\r\n' +
          'X-Powered-By: Express\r\n' +
          'correlation-id: 9b736790-257f-11ee-a034-0386a56d0c23\r\n' +
          'Content-Type: application/json; charset=utf-8\r\n' +
          'Content-Length: 1590\r\n' +
          'ETag: W/"636-4ElVjInrpftTXcpHXqTcoSBkbMo"\r\n' +
          'Date: Tue, 18 Jul 2023 15:27:46 GMT\r\n' +
          'Connection: keep-alive\r\n' +
          'Keep-Alive: timeout=5\r\n' +
          '\r\n',
        _keepAliveTimeout: 5000,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular *5],
        locals: [Object: null prototype] {},
        statusCode: 200,
        message: 'Successfully Updated Salesforce User Listing With New User Array',
        success: {
          updatedMergedArray: [
            {
              Username: 'SethTestUser8@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: '00eDw000000R6XFIA0',
              TimeZoneSidKey: 'America/New_York',
              LanguageLocaleKey: 'en_US',
              EmailEncodingKey: 'UTF-8',
              LocaleSidKey: 'en_US'
            },
            {
              Username: 'SethTestUser9@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: '00eDw000000R6XKIA0',
              TimeZoneSidKey: 'America/New_York',
              LanguageLocaleKey: 'en_US',
              EmailEncodingKey: 'UTF-8',
              LocaleSidKey: 'en_US'
            },
            {
              Username: 'SethTestUser10@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: '00eDw000000R6XPIA0',
              TimeZoneSidKey: 'America/New_York',
              LanguageLocaleKey: 'en_US',
              EmailEncodingKey: 'UTF-8',
              LocaleSidKey: 'en_US'
            },
            {
              Username: 'SethTestUser11@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: '00eDw000000R6XUIA0',
              TimeZoneSidKey: 'America/New_York',
              LanguageLocaleKey: 'en_US',
              EmailEncodingKey: 'UTF-8',
              LocaleSidKey: 'en_US'
            },
            {
              Username: 'SethTestUser12@cmentor.com',
              Email: 'tammi@cmentor.com',
              Alias: 'TammiTst',
              LastName: 'Krobert',
              FirstName: 'Tammi',
              ProfileId: '00eDw000000R6XZIA0',
              TimeZoneSidKey: 'America/New_York',
              LanguageLocaleKey: 'en_US',
              EmailEncodingKey: 'UTF-8',
              LocaleSidKey: 'en_US'
            }
          ]
        },
        statusMessage: 'OK',
        level: 'info',
        service: 'some-random-service',
        timestamp: '2023-07-18T15:27:46.337Z',
        label: 'validation',
        [Symbol(kCapture)]: false,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          'x-powered-by': [ 'X-Powered-By', 'Express' ],
          'correlation-id': [ 'correlation-id', '9b736790-257f-11ee-a034-0386a56d0c23' ],
          'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
          'content-length': [ 'Content-Length', '1590' ],
          etag: [ 'ETag', 'W/"636-4ElVjInrpftTXcpHXqTcoSBkbMo"' ]
        },
        [Symbol(level)]: 'info',
        [Symbol(message)]: '{"_contentLength":1590,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":"HTTP/1.1 200 OK\\r\\nX-Powered-By: Express\\r\\ncorrelation-id: 9b736790-257f-11ee-a034-0386a56d0c23\\r\\nContent-Type: application/json; charset=utf-8\\r\\nContent-Length: 1590\\r\\nETag: W/\\"636-4ElVjInrpftTXcpHXqTcoSBkbMo\\"\\r\\nDate: Tue, 18 Jul 2023 15:27:46 GMT\\r\\nConnection: keep-alive\\r\\nKeep-Alive: timeout=5\\r\\n\\r\\n","_headerSent":true,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":true,"label":"validation","level":"info","locals":{},"message":"Successfully Updated Salesforce User Listing With New User Array","outputData":[],"outputSize":0,"req":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","path":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","pathname":"/createUsers","port":null,"protocol":null,"query":"coll=homework&id=TammiLaw&version=1.0.0","search":"?coll=homework&id=TammiLaw&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"9b736790-257f-11ee-a034-0386a56d0c23","host":"localhost:8004","postman-token":"e68bac6c-b6b8-4428-b42c-023bb560089b","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/createUsers?coll=homework&id=TammiLaw&version=1.0.0","params":{},"query":{"coll":"homework","id":"TammiLaw","myEndpoint":"createUsers","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","e68bac6c-b6b8-4428-b42c-023bb560089b","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/createUsers","stack":[{"keys":[],"method":"post","name":"createUsers","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0"},"sendDate":true,"service":"some-random-service","shouldKeepAlive":true,"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","path":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","pathname":"/createUsers","port":null,"protocol":null,"query":"coll=homework&id=TammiLaw&version=1.0.0","search":"?coll=homework&id=TammiLaw&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":"[Circular]","complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"9b736790-257f-11ee-a034-0386a56d0c23","host":"localhost:8004","postman-token":"e68bac6c-b6b8-4428-b42c-023bb560089b","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/createUsers?coll=homework&id=TammiLaw&version=1.0.0","params":{},"query":{"coll":"homework","id":"TammiLaw","myEndpoint":"createUsers","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","e68bac6c-b6b8-4428-b42c-023bb560089b","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/createUsers","stack":[{"keys":[],"method":"post","name":"createUsers","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":"[Circular]","statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0"},"maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":200,"statusMessage":"OK","success":{"updatedMergedArray":[{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XFIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser8@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XKIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser9@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XPIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser10@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XUIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser11@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XZIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser12@cmentor.com"}]},"timestamp":"2023-07-18T15:27:46.337Z","useChunkedEncodingByDefault":true,"writable":true}'
      },
      [Symbol(async_id_symbol)]: 1814,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _consuming: true,
    _dumped: false,
    next: [Function: next],
    baseUrl: '/data/api-management/apis/v1',
    originalUrl: '/data/api-management/apis/v1/createUsers?coll=homework&id=TammiLaw&version=1.0.0',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: '?coll=homework&id=TammiLaw&version=1.0.0',
      query: 'coll=homework&id=TammiLaw&version=1.0.0',
      pathname: '/createUsers',
      path: '/createUsers?coll=homework&id=TammiLaw&version=1.0.0',
      href: '/createUsers?coll=homework&id=TammiLaw&version=1.0.0',
      _raw: '/createUsers?coll=homework&id=TammiLaw&version=1.0.0'
    },
    params: {},
    query: {
      coll: 'homework',
      id: 'TammiLaw',
      version: '1.0.0',
      myEndpoint: 'createUsers'
    },
    res: <ref *6> ServerResponse {
      _events: [Object: null prototype] {
        finish: [Function: bound resOnFinish]
      },
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: 1590,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      socket: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: <ref *2> WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: {
            count: 1,
            cb: [Function (anonymous)],
            stream: [Circular *1],
            state: [Circular *2]
          },
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          errored: null,
          closed: false,
          closeEmitted: false
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: qpCheck],
                          name: 'qpCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/createUsers',
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 157
        },
        _server: <ref *4> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *3> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              pri: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *3] },
              response: ServerResponse { app: [Circular *3] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\DickersonS\\gits\\test-sf-api\\Scripts\\NodeJS\\src\\main\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [AsyncFunction: authCheck],
                          name: 'authCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: appJsonHeader],
                          name: 'appJsonHeader',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: qpCheck],
                          name: 'qpCheck',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [AsyncFunction: bodyData],
                          name: 'bodyData',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/health\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/health',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: healthStatus],
                                name: 'healthStatus',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'get'
                              }
                            ],
                            methods: { get: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/getProfileIds\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/getProfileIds',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: getProfileIds],
                                name: 'getProfileIds',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: {},
                          path: '/createUsers',
                          keys: [],
                          regexp: /^\/createUsers\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/createUsers',
                            stack: [
                              Layer {
                                handle: [AsyncFunction: createUsers],
                                name: 'createUsers',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              },
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        },
                        Layer {
                          handle: [Function: SuccessHandler],
                          name: 'SuccessHandler',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: ErrorHandler],
                          name: 'ErrorHandler',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: true
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '/data/api-management/apis/v1',
                    keys: [],
                    regexp: /^\/data\/api-management\/apis\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *4]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::8004',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 157
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *1],
          incoming: [Circular *5],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *1]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        _paused: false,
        _httpMessage: [Circular *6],
        [Symbol(async_id_symbol)]: 1814,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _header: 'HTTP/1.1 200 OK\r\n' +
        'X-Powered-By: Express\r\n' +
        'correlation-id: 9b736790-257f-11ee-a034-0386a56d0c23\r\n' +
        'Content-Type: application/json; charset=utf-8\r\n' +
        'Content-Length: 1590\r\n' +
        'ETag: W/"636-4ElVjInrpftTXcpHXqTcoSBkbMo"\r\n' +
        'Date: Tue, 18 Jul 2023 15:27:46 GMT\r\n' +
        'Connection: keep-alive\r\n' +
        'Keep-Alive: timeout=5\r\n' +
        '\r\n',
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      _sent100: false,
      _expect_continue: false,
      req: [Circular *5],
      locals: [Object: null prototype] {},
      statusCode: 200,
      message: 'Successfully Updated Salesforce User Listing With New User Array',
      success: {
        updatedMergedArray: [
          {
            Username: 'SethTestUser8@cmentor.com',
            Email: 'tammi@cmentor.com',
            Alias: 'TammiTst',
            LastName: 'Krobert',
            FirstName: 'Tammi',
            ProfileId: '00eDw000000R6XFIA0',
            TimeZoneSidKey: 'America/New_York',
            LanguageLocaleKey: 'en_US',
            EmailEncodingKey: 'UTF-8',
            LocaleSidKey: 'en_US'
          },
          {
            Username: 'SethTestUser9@cmentor.com',
            Email: 'tammi@cmentor.com',
            Alias: 'TammiTst',
            LastName: 'Krobert',
            FirstName: 'Tammi',
            ProfileId: '00eDw000000R6XKIA0',
            TimeZoneSidKey: 'America/New_York',
            LanguageLocaleKey: 'en_US',
            EmailEncodingKey: 'UTF-8',
            LocaleSidKey: 'en_US'
          },
          {
            Username: 'SethTestUser10@cmentor.com',
            Email: 'tammi@cmentor.com',
            Alias: 'TammiTst',
            LastName: 'Krobert',
            FirstName: 'Tammi',
            ProfileId: '00eDw000000R6XPIA0',
            TimeZoneSidKey: 'America/New_York',
            LanguageLocaleKey: 'en_US',
            EmailEncodingKey: 'UTF-8',
            LocaleSidKey: 'en_US'
          },
          {
            Username: 'SethTestUser11@cmentor.com',
            Email: 'tammi@cmentor.com',
            Alias: 'TammiTst',
            LastName: 'Krobert',
            FirstName: 'Tammi',
            ProfileId: '00eDw000000R6XUIA0',
            TimeZoneSidKey: 'America/New_York',
            LanguageLocaleKey: 'en_US',
            EmailEncodingKey: 'UTF-8',
            LocaleSidKey: 'en_US'
          },
          {
            Username: 'SethTestUser12@cmentor.com',
            Email: 'tammi@cmentor.com',
            Alias: 'TammiTst',
            LastName: 'Krobert',
            FirstName: 'Tammi',
            ProfileId: '00eDw000000R6XZIA0',
            TimeZoneSidKey: 'America/New_York',
            LanguageLocaleKey: 'en_US',
            EmailEncodingKey: 'UTF-8',
            LocaleSidKey: 'en_US'
          }
        ]
      },
      statusMessage: 'OK',
      level: 'info',
      service: 'some-random-service',
      timestamp: '2023-07-18T15:27:46.337Z',
      label: 'validation',
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        'x-powered-by': [ 'X-Powered-By', 'Express' ],
        'correlation-id': [ 'correlation-id', '9b736790-257f-11ee-a034-0386a56d0c23' ],
        'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
        'content-length': [ 'Content-Length', '1590' ],
        etag: [ 'ETag', 'W/"636-4ElVjInrpftTXcpHXqTcoSBkbMo"' ]
      },
      [Symbol(level)]: 'info',
      [Symbol(message)]: '{"_contentLength":1590,"_defaultKeepAlive":true,"_events":{},"_eventsCount":1,"_expect_continue":false,"_hasBody":true,"_header":"HTTP/1.1 200 OK\\r\\nX-Powered-By: Express\\r\\ncorrelation-id: 9b736790-257f-11ee-a034-0386a56d0c23\\r\\nContent-Type: application/json; charset=utf-8\\r\\nContent-Length: 1590\\r\\nETag: W/\\"636-4ElVjInrpftTXcpHXqTcoSBkbMo\\"\\r\\nDate: Tue, 18 Jul 2023 15:27:46 GMT\\r\\nConnection: keep-alive\\r\\nKeep-Alive: timeout=5\\r\\n\\r\\n","_headerSent":true,"_keepAliveTimeout":5000,"_last":false,"_removedConnection":false,"_removedContLen":false,"_removedTE":false,"_sent100":false,"_trailer":"","chunkedEncoding":false,"destroyed":false,"finished":true,"label":"validation","level":"info","locals":{},"message":"Successfully Updated Salesforce User Listing With New User Array","outputData":[],"outputSize":0,"req":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","path":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","pathname":"/createUsers","port":null,"protocol":null,"query":"coll=homework&id=TammiLaw&version=1.0.0","search":"?coll=homework&id=TammiLaw&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"9b736790-257f-11ee-a034-0386a56d0c23","host":"localhost:8004","postman-token":"e68bac6c-b6b8-4428-b42c-023bb560089b","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/createUsers?coll=homework&id=TammiLaw&version=1.0.0","params":{},"query":{"coll":"homework","id":"TammiLaw","myEndpoint":"createUsers","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","e68bac6c-b6b8-4428-b42c-023bb560089b","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/createUsers","stack":[{"keys":[],"method":"post","name":"createUsers","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":"[Circular]","maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0"},"sendDate":true,"service":"some-random-service","shouldKeepAlive":true,"socket":{"_events":{"close":[null,null],"end":[null,null]},"_eventsCount":8,"_hadError":false,"_host":null,"_httpMessage":"[Circular]","_parent":null,"_paused":false,"_pendingData":null,"_pendingEncoding":"","_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":false,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"emittedReadable":false,"encoding":null,"endEmitted":false,"ended":false,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":true,"objectMode":false,"pipes":[],"readableListening":false,"reading":true,"readingMore":false,"resumeScheduled":false,"sync":false},"_server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0},"_sockname":null,"_writableState":{"afterWriteTickInfo":{"count":1,"state":"[Circular]","stream":"[Circular]"},"allBuffers":true,"allNoop":true,"autoDestroy":false,"bufferProcessing":false,"buffered":[],"bufferedIndex":0,"closeEmitted":false,"closed":false,"corked":0,"decodeStrings":false,"defaultEncoding":"utf8","destroyed":false,"emitClose":false,"ended":false,"ending":false,"errorEmitted":false,"errored":null,"finalCalled":false,"finished":false,"highWaterMark":16384,"length":0,"needDrain":false,"objectMode":false,"pendingcb":1,"prefinished":false,"sync":false,"writecb":null,"writelen":0,"writing":false},"allowHalfOpen":true,"connecting":false,"parser":{"_consumed":true,"_headers":[],"_url":"","incoming":{"_body":true,"_consuming":true,"_dumped":false,"_events":{},"_eventsCount":1,"_parsedUrl":{"_raw":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","auth":null,"hash":null,"host":null,"hostname":null,"href":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","path":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0","pathname":"/createUsers","port":null,"protocol":null,"query":"coll=homework&id=TammiLaw&version=1.0.0","search":"?coll=homework&id=TammiLaw&version=1.0.0","slashes":null},"_readableState":{"autoDestroy":false,"awaitDrainWriters":null,"buffer":{"head":null,"length":0,"tail":null},"closeEmitted":false,"closed":false,"dataEmitted":true,"decoder":null,"defaultEncoding":"utf8","destroyed":false,"emitClose":true,"emittedReadable":false,"encoding":null,"endEmitted":true,"ended":true,"errorEmitted":false,"errored":null,"flowing":true,"highWaterMark":16384,"length":0,"multiAwaitDrain":false,"needReadable":false,"objectMode":false,"pipes":[],"readableListening":false,"reading":false,"readingMore":false,"resumeScheduled":false,"sync":false},"aborted":false,"baseUrl":"/data/api-management/apis/v1","body":{"accessToken":"Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q","salesforceOrgApiUrl":"https://cmentor--tammisb.sandbox.my.salesforce.com"},"client":"[Circular]","complete":true,"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br","authorization":"Bearer TkhOU1JYTlBia3g1","cache-control":"no-cache","connection":"keep-alive","content-length":"232","content-type":"application/json","correlation-id":"9b736790-257f-11ee-a034-0386a56d0c23","host":"localhost:8004","postman-token":"e68bac6c-b6b8-4428-b42c-023bb560089b","user-agent":"PostmanRuntime/7.32.3"},"httpVersion":"1.1","httpVersionMajor":1,"httpVersionMinor":1,"method":"POST","originalUrl":"/data/api-management/apis/v1/createUsers?coll=homework&id=TammiLaw&version=1.0.0","params":{},"query":{"coll":"homework","id":"TammiLaw","myEndpoint":"createUsers","version":"1.0.0"},"rawHeaders":["Content-Type","application/json","Authorization","Bearer TkhOU1JYTlBia3g1","User-Agent","PostmanRuntime/7.32.3","Accept","*/*","Cache-Control","no-cache","Postman-Token","e68bac6c-b6b8-4428-b42c-023bb560089b","Host","localhost:8004","Accept-Encoding","gzip, deflate, br","Connection","keep-alive","Content-Length","232"],"rawTrailers":[],"res":"[Circular]","route":{"methods":{"post":true},"path":"/createUsers","stack":[{"keys":[],"method":"post","name":"createUsers","regexp":{"fast_slash":false,"fast_star":false}},{"keys":[],"method":"post","name":"<anonymous>","regexp":{"fast_slash":false,"fast_star":false}}]},"socket":"[Circular]","statusCode":null,"statusMessage":null,"trailers":{},"upgrade":false,"url":"/createUsers?coll=homework&id=TammiLaw&version=1.0.0"},"maxHeaderPairs":2000,"outgoing":null,"socket":"[Circular]"},"server":{"_connectionKey":"6::::8004","_connections":1,"_events":{},"_eventsCount":2,"_handle":{"reading":false},"_unref":false,"_usingWorkers":false,"_workers":[],"allowHalfOpen":true,"headersTimeout":60000,"httpAllowHalfOpen":false,"keepAliveTimeout":5000,"maxHeadersCount":null,"pauseOnConnect":false,"requestTimeout":0,"timeout":0}},"statusCode":200,"statusMessage":"OK","success":{"updatedMergedArray":[{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XFIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser8@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XKIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser9@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XPIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser10@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XUIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser11@cmentor.com"},{"Alias":"TammiTst","Email":"tammi@cmentor.com","EmailEncodingKey":"UTF-8","FirstName":"Tammi","LanguageLocaleKey":"en_US","LastName":"Krobert","LocaleSidKey":"en_US","ProfileId":"00eDw000000R6XZIA0","TimeZoneSidKey":"America/New_York","Username":"SethTestUser12@cmentor.com"}]},"timestamp":"2023-07-18T15:27:46.337Z","useChunkedEncodingByDefault":true,"writable":true}'
    },
    body: {
      salesforceOrgApiUrl: 'https://cmentor--tammisb.sandbox.my.salesforce.com',
      accessToken: 'Bearer 00DDw000005FClx!AREAQGX1iYijCKY4OTHzoSbdVR7oEgc5STpLfC5RtX1fehYkYciIqdLpDwe3fcblyugRrx8Juth6zFu9Em7oCNAdzdixDm4Q'
    },
    _body: true,
    length: undefined,
    getId: [Function (anonymous)],
    route: Route {
      path: '/createUsers',
      stack: [
        Layer {
          handle: [AsyncFunction: createUsers],
          name: 'createUsers',
          params: undefined,
          path: undefined,
          keys: [],
          regexp: /^\/?$/i { fast_star: false, fast_slash: false },
          method: 'post'
        },
        Layer {
          handle: [Function (anonymous)],
          name: '<anonymous>',
          params: undefined,
          path: undefined,
          keys: [],
          regexp: /^\/?$/i { fast_star: false, fast_slash: false },
          method: 'post'
        }
      ],
      methods: { post: true }
    },
    [Symbol(kCapture)]: false,
    [Symbol(RequestTimeout)]: undefined
  },
  locals: [Object: null prototype] {},
  statusCode: 200,
  message: 'Successfully Updated Salesforce User Listing With New User Array',
  success: {
    updatedMergedArray: [
      {
        Username: 'SethTestUser8@cmentor.com',
        Email: 'tammi@cmentor.com',
        Alias: 'TammiTst',
        LastName: 'Krobert',
        FirstName: 'Tammi',
        ProfileId: '00eDw000000R6XFIA0',
        TimeZoneSidKey: 'America/New_York',
        LanguageLocaleKey: 'en_US',
        EmailEncodingKey: 'UTF-8',
        LocaleSidKey: 'en_US'
      },
      {
        Username: 'SethTestUser9@cmentor.com',
        Email: 'tammi@cmentor.com',
        Alias: 'TammiTst',
        LastName: 'Krobert',
        FirstName: 'Tammi',
        ProfileId: '00eDw000000R6XKIA0',
        TimeZoneSidKey: 'America/New_York',
        LanguageLocaleKey: 'en_US',
        EmailEncodingKey: 'UTF-8',
        LocaleSidKey: 'en_US'
      },
      {
        Username: 'SethTestUser10@cmentor.com',
        Email: 'tammi@cmentor.com',
        Alias: 'TammiTst',
        LastName: 'Krobert',
        FirstName: 'Tammi',
        ProfileId: '00eDw000000R6XPIA0',
        TimeZoneSidKey: 'America/New_York',
        LanguageLocaleKey: 'en_US',
        EmailEncodingKey: 'UTF-8',
        LocaleSidKey: 'en_US'
      },
      {
        Username: 'SethTestUser11@cmentor.com',
        Email: 'tammi@cmentor.com',
        Alias: 'TammiTst',
        LastName: 'Krobert',
        FirstName: 'Tammi',
        ProfileId: '00eDw000000R6XUIA0',
        TimeZoneSidKey: 'America/New_York',
        LanguageLocaleKey: 'en_US',
        EmailEncodingKey: 'UTF-8',
        LocaleSidKey: 'en_US'
      },
      {
        Username: 'SethTestUser12@cmentor.com',
        Email: 'tammi@cmentor.com',
        Alias: 'TammiTst',
        LastName: 'Krobert',
        FirstName: 'Tammi',
        ProfileId: '00eDw000000R6XZIA0',
        TimeZoneSidKey: 'America/New_York',
        LanguageLocaleKey: 'en_US',
        EmailEncodingKey: 'UTF-8',
        LocaleSidKey: 'en_US'
      }
    ]
  },
  statusMessage: 'OK',
  level: 'info',
  service: 'some-random-service',
  timestamp: '2023-07-18T15:27:46.337Z',
  label: 'validation',
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'correlation-id': [ 'correlation-id', '9b736790-257f-11ee-a034-0386a56d0c23' ],
    'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
    'content-length': [ 'Content-Length', '1590' ],
    etag: [ 'ETag', 'W/"636-4ElVjInrpftTXcpHXqTcoSBkbMo"' ]
  }
}
